Building Your Own Types with Object-Oriented Programming 246 Storing a value using an enum type Sometimes, a value needs to be one of a limited set of options. For example, there are seven ancient wonders of the world, and a person may have one favorite. At other times, a value needs to be a combination of a limited set of options. For example, a person may have a bucket list of ancient world wonders they want to visit. We can store this data by defining an enum type. An enum type is a very efficient way of storing one or more choices because, internally, it uses integer values in combination with a lookup table of string descriptions. Let’s see an example: 1. Add a new file to the PacktLibraryNetStandard2 project named WondersOfTheAncientWorld. . cs WondersOfTheAncientWorld.cs contents, as shown in the following code: 2. Modify the namespace Packt.Shared; public enum WondersOfTheAncientWorld { GreatPyramidOfGiza, HangingGardensOfBabylon, StatueOfZeusAtOlympia, TempleOfArtemisAtEphesus, MausoleumAtHalicarnassus, ColossusOfRhodes, LighthouseOfAlexandria } 3. In Person.cs, define a field to store a person’s favorite ancient world wonder, as shown in the following code: public WondersOfTheAncientWorld FavoriteAncientWonder; 4. In Program.cs, set Bob’s favorite ancient wonder of the world and output it, as shown in the following code: bob.FavoriteAncientWonder = WondersOfTheAncientWorld. StatueOfZeusAtOlympia; WriteLine( format: "{0}'s favorite wonder is {1}. Its integer is {2}.", arg0: bob.Name, arg1: bob.FavoriteAncientWonder, arg2: (int)bob.FavoriteAncientWonder); 