Implementing Interfaces and Inheriting Classes 352 The member modifiers and the effect they have are summarized in the following table: Variable type Member modifier Method executed In class Person WriteToConsole Person Employee new WriteToConsole Employee Person virtual ToString Employee Employee override ToString Employee In my opinion, polymorphism is academic to most programmers. If you get the concept, that’s cool; but, if not, I suggest that you don’t worry about it. Some people like to make others feel inferior by saying understanding polymorphism is important for all C# programmers, but in my opinion, it’s not. There are thousands of other topics that your time and effort will be better spent on. You can have a successful career with C# and never need to be able to explain polymorphism, just as a racing car driver doesn’t need to explain the engineering behind fuel injection. Good Practice: You should use virtual and override rather than new to change the implementation of an inherited method whenever possible. Casting within inheritance hierarchies Casting between types is subtly different from converting between types. Casting is between similar types, like between a 16-bit integer and a 32-bit integer, or between a superclass and one of its sub- classes. Converting is between dissimilar types, such as between text and a number. For example, if you need to work with multiple types of stream, then instead of declaring specific types of stream like MemoryStream or FileStream, you could declare an array of Stream, the supertype of MemoryStream and FileStream. Implicit casting In the previous example, you saw how an instance of a derived type can be stored in a variable of its base type (or its base’s base type, and so on). When we do this, it is called implicit casting. Explicit casting The opposite of implicit casting is explicit casting, and you must use parentheses around the type you want to cast into as a prefix to do it: 1. In Program.cs, add a statement to assign the aliceInPerson variable to a new Employee vari- able, as shown in the following code: Employee explicitAlice = aliceInPerson; 