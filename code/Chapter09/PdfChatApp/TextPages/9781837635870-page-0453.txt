Working with Common .NET Types 434 2. Right-click on the StringSyntax attribute, select Go To Implementation, and note there are 12 recognized string syntax formats that you can choose from as well as Regex, as shown in the following partial code: [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false, Inherited = false)] public sealed class StringSyntaxAttribute : Attribute { public const string CompositeFormat = "CompositeFormat"; public const string DateOnlyFormat = "DateOnlyFormat"; public const string DateTimeFormat = "DateTimeFormat"; public const string EnumFormat = "EnumFormat"; public const string GuidFormat = "GuidFormat"; public const string Json = "Json"; public const string NumericFormat = "NumericFormat"; public const string Regex = "Regex"; public const string TimeOnlyFormat = "TimeOnlyFormat"; public const string TimeSpanFormat = "TimeSpanFormat"; public const string Uri = "Uri"; public const string Xml = "Xml"; â€¦ } 3. In the WorkingWithRegularExpressions project, add a new class file named Program.Strings. cs, delete any existing statements, and then define some string constants in a partial Program class, as shown in the following code: partial class Program { private const string DigitsOnlyText = @"^\d+$"; private const string CommaSeparatorText = "(?:^|,)(?=[^\"]|(\")?)\"?((?(1)[^\"]*|[^,\"]*))\"?(?=,|$)"; } Note that the two string constants do not have any color syntax highlighting yet. 4. In Program.cs, replace the literal string with the string constant for the digits-only regular expression, as shown highlighted in the following code: Regex ageChecker = new(DigitsOnlyText); 