Chapter 5 265 We could simplify the code in the Main method by not assigning the value 40 to the d variable, since it will always be replaced anyway. In C# 7 and later, we can simplify code that uses the out parameter. 4. In Program.cs, add statements to declare some more variables, including an out parameter named f declared inline, as shown in the following code: int e = 50; int f = 60; int g = 70; WriteLine($"Before: e={e}, f={f}, g={g}, h doesn't exist yet!"); // Simplified C# 7 or later syntax for the out parameter. bob.PassingParameters(e, f, ref g, out int h); WriteLine($"After: e={e}, f={f}, g={g}, h={h}"); 5. Run the PeopleApp project and view the result, as shown in the following output: Before: e=50, f=60, g=70, h doesn't exist yet! In the method: w=51, x=60, y=71, z=101 After: e=50, f=60, g=71, h=101 Understanding ref returns In C# 7 or later, the ref keyword is not just for passing parameters into a method; it can also be applied to the return value. This allows an external variable to reference an internal variable and modify its value after the method call. This might be useful in advanced scenarios, for example, passing place- holders into big data structures, but it’s beyond the scope of this book. If you are interested in learning more, then you can read the following link: https://learn.microsoft.com/en-us/dotnet/csharp/ . language-reference/keywords/ref#reference-return-values Now let’s return to looking at more advanced scenarios of methods that return values. Combining multiple returned values using tuples Each method can only return a single value that has a single type. That type could be a simple type, string in the previous example; a complex type, such as Person; or a collection type, such such as as List<Person>. Imagine that we want to define a method named GetTheData that needs to return both a string value and an int value. We could define a new class named TextAndNumber with a string field and an int field, and return an instance of that complex type, as shown in the following code: public class TextAndNumber { public string Text; public int Number; 