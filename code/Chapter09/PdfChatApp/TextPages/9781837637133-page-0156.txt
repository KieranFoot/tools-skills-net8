Chapter 3 123 // If using Windows Integrated authentication. builder.IntegratedSecurity = true; // If using SQL Server authentication. // builder.UserID = Environment.GetEnvironmentVariable("MY_SQL_ USR"); // builder.Password = Environment.GetEnvironmentVariable("MY_SQL_ PWD"); optionsBuilder.UseSqlServer(builder.ConnectionString); } optionsBuilder.AddInterceptors(setLastRefreshedInterceptor); } } 6. Save the changes. Creating a test project to check the integration of the class libraries Since we will not be creating a client project in this chapter that uses the EF Core model, we should create a test project to make sure the database context and entity models integrate correctly: 1. Use your preferred coding tool to add a new xUnit Test Project [C#] / xunit project named Northwind.Common.EntityModels.Tests to the Chapter03 solution. Northwind.Common.EntityModels.Tests.csproj, modify the configuration to treat warn- 2. In ings as errors and to add an item group with a project reference to the Northwind.Common. DataContext.SqlServer project, as shown in the following markup: <ItemGroup> <ProjectReference Include="..\Northwind.Common.DataContext .SqlServer\Northwind.Common.DataContext.SqlServer.csproj" /> </ItemGroup> Warning! The path to the project reference should not have a line break in your project file. 3. Build the Northwind.Common.EntityModels.Tests project to build and restore project de- pendencies. 