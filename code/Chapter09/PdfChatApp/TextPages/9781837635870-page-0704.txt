Chapter 13 685 While reviewing the preceding markup, note the following: • The <form> element with a POST method is ordinary HTML, so an <input type="submit" /> element inside it will make an HTTP POST request back to the current page with values of any other elements inside that form. An <input> element with a tag helper named asp-for enables data binding to the • model behind the Razor Page. • JetBrains Rider can be overzealous with null warnings. If you get them in the model binding expressions, you can apply the null-forgiving operator, as shown in the follow- Supplier!.CompanyName. ing code expression: 3. Start the website using the https launch profile and navigate to the website home page. Click Learn more about our suppliers, scroll down to the bottom of the page, enter Bob's 4. Burgers, USA, and (603) 555-4567, and then click Submit. 5. Note that you see a refreshed suppliers table with the new supplier added near the bottom because it is sorted by USA suppliers. 6. Close Chrome and shut down the web server. Injecting a dependency service into a Razor Page If you have a .cshtml Razor Page file that does not have a code-behind file, then you can inject a de- @inject directive instead of constructor parameter injection, and then pendency service using the directly reference the injected database context using Razor syntax in the middle of the markup. Let’s create a simple example: 1. In the Pages folder, add a new file named Orders.cshtml. (The Visual Studio 2022 item template is named Razor Page - Empty and it creates two files. Delete the .cshtml.cs file.) Orders.cshtml, replace the existing code with markup to output the number of orders in 2. In the Northwind database, as shown in the following markup: @page @using Northwind.EntityModels @inject NorthwindContext _db @{ string title = "Orders"; ViewData["Title"] = $"Northwind B2B - {title}"; } <div class="row"> <h1 class="display-2">@title</h1> <p> There are @_db.Orders.Count() orders in the Northwind database. </p> </div> 