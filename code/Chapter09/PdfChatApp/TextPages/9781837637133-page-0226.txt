Chapter 5 193 Now that we’ve explored the importance of synchronizing access to shared resources in multi-threaded applications, it’s time to delve into how some new keywords introduced in C# 5 make writing asyn- chronous code easier. Understanding async and await C# 5 introduced two C# keywords when working with the Task type. They are especially useful for the following: • Implementing multitasking for a graphical user interface (GUI) • Improving the scalability of web applications and web services In Chapter 16, Building Mobile and Desktop Apps Using .NET MAUI, we will see how the async and await keywords can implement multitasking for a GUI. But for now, let’s learn the theory of why these two C# keywords were introduced, and then later, you will see them used in practice. Improving responsiveness for console apps One of the limitations with console apps is that you can only use the await keyword inside methods that are marked as async, but C# 7 and earlier do not allow the Main method to be marked as async! Luckily, a new feature introduced in C# 7.1 was support for async in Main: 1. Use your preferred code editor to add a new Console App / console project to the Chapter05 AsyncConsole. solution named Program.cs, delete the existing statements, statically import Console, and then add state- 2. In ments to create an HttpClient instance, make a request for Apple’s home page, and output how many bytes it has, as shown in the following code: using static System.Console; HttpClient client = new(); HttpResponseMessage response = await client.GetAsync("http://www.apple.com/"); WriteLine("Apple's home page has {0:N0} bytes.", response.Content.Headers.ContentLength); 3. Build the project and note that it builds successfully. In .NET 5 and earlier, the project template created an explicit Program class with a non-async Main method, so you would have seen an error message, as shown in the following output: Program.cs(14,9): error CS4033: The 'await' operator can only be used within an async method. Consider marking this method with the 'async' modifier and changing its return type to 'Task'. [/Users/markjprice/apps- services-net7/Chapter04/AsyncConsole/AsyncConsole.csproj] 