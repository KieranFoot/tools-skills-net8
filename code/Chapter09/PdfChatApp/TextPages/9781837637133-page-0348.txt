Chapter 8 315 app.MapGet("api/products", ( [FromServices] NorthwindContext db, [FromQuery] int? page) => db.Products .Where(p => p.UnitsInStock > 0 && !p.Discontinued) .OrderBy(product => product.ProductId) .Skip(((page ?? 1) - 1) * pageSize) .Take(pageSize) ) .WithName("GetProducts") .WithOpenApi(operation => { operation.Description = "Get products with UnitsInStock > 0 and Discontinued = false."; operation.Summary = "Get in-stock products that are not discontinued."; return operation; }) .Produces<Product[]>(StatusCodes.Status200OK); app.MapGet("api/products/outofstock", ([FromServices] NorthwindContext db) => db.Products .Where(p => p.UnitsInStock == 0 && !p.Discontinued) ) .WithName("GetProductsOutOfStock") .WithOpenApi() .Produces<Product[]>(StatusCodes.Status200OK); app.MapGet("api/products/discontinued", ([FromServices] NorthwindContext db) => db.Products.Where(product => product.Discontinued) ) .WithName("GetProductsDiscontinued") .WithOpenApi() .Produces<Product[]>(StatusCodes.Status200OK); app.MapGet("api/products/{id:int}", async Task<Results<Ok<Product>, NotFound>> ( [FromServices] NorthwindContext db, [FromRoute] int id) => 