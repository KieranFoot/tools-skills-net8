Building Your Own Types with Object-Oriented Programming 258 public class Book { public Book() { } // For use with initialization syntax. [SetsRequiredMembers] public Book(string isbn, string title) 5. In Program.cs, note the statement that calls the constructor now compiles without errors. Optionally, run the PeopleApp project to confirm it behaves as expected, as shown in the 6. following output: 978-1803237800: C# 12 and .NET 8 - Modern Cross-Platform Development Fundamentals written by Mark J. Price has 821 pages. More Information: You can learn more about required fields and how to set them using a constructor at the following link: https://learn.microsoft.com/en-us/dotnet/ csharp/language-reference/keywords/required. Constructors are a special category of method. Let’s look at methods in more detail. Working with methods and tuples Methods are members of a type that execute a block of statements. They are functions that belong to a type. Returning values from methods Methods can return a single value or nothing: • A method that performs some actions but does not return a value indicates this with the void type before the name of the method. • A method that performs some actions and returns a value indicates this with the type of the return value before the name of the method. For example, in the next task, you will create two methods: WriteToConsole: This will perform an action (writing some text to the console), but it will • return nothing from the method, indicated by the void keyword. GetOrigin: This will return a text value, indicated by the string keyword. • Let’s write the code: 1. In Person.cs, add statements to define the two methods that I described earlier, as shown in the following code: #region Methods: Actions the type can perform. 