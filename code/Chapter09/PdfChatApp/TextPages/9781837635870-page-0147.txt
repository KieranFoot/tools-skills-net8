Controlling Flow, Converting Types, and Handling Exceptions 128 Branching with the switch statement The switch statement is different from the if statement because switch compares a single expres- sion against a list of multiple possible case statements. Every case statement is related to the single expression. Every case section must end with one of the following: • The break keyword (like case 1 in the following code). goto case keywords (like case 2 in the following code). • The case 3 in the following code). • They should have no statements (like goto keyword that references a named label (like case 5 in the following code). • The return keyword to leave the current function (not shown in the code). • The Let’s write some code to explore the switch statements: 1. Type the following code for a switch statement. You should note that the penultimate statement is a label that can be jumped to, and the first statement generates a random number between 1 and 6 (the number 7 in the code is an exclusive upper bound). The switch statement branches are based on the value of this random number, as shown in the following code: // Inclusive lower bound but exclusive upper bound. int number = Random.Shared.Next(minValue: 1, maxValue: 7); WriteLine($"My random number is {number}"); switch (number) { case 1: WriteLine("One"); break; // Jumps to end of switch statement. case 2: WriteLine("Two"); goto case 1; case 3: // Multiple case section. case 4: WriteLine("Three or four"); goto case 1; case 5: goto A_label; default: WriteLine("Default"); break; } // End of switch statement. WriteLine("After end of switch"); A_label: WriteLine($"After A_label"); 