Introducing Web Development Using ASP.NET Core 632 Building web and other services Although we will not learn about JavaScript and TypeScript-based SPAs, we will learn how to build a web service using the ASP.NET Core Web API, and then call that web service from the server-side code in our ASP.NET Core websites. Later, we will call that web service from Blazor components. There are no formal definitions, but services are sometimes described based on their complexity: • Service: All functionality needed by a client app in one monolithic service. • Microservice: Multiple services that each focus on a smaller set of functionalities. Nanoservice: A single function provided as a service. Unlike services and microservices that are • hosted 24/7/365, nanoservices are often inactive until called upon to reduce resources and costs. At the start of the first part of this book, we briefly reviewed C# language features and in which versions they were introduced. At the start of the second part of this book, we briefly reviewed .NET library features and in which versions they were introduced. Now, in the third and final part of this book, we will briefly review ASP.NET Core features and in which versions they were introduced. You can read this information in the GitHub repository at the following link: https://github.com/ . markjprice/cs12dotnet8/blob/main/docs/ch12-features.md Structuring projects How should you structure your projects? So far, we have mostly built small individual console apps to illustrate language or library features, with the occasional class library and unit test project to support them. In the rest of this book, we will build multiple projects using different technologies that work together to provide a single solution. With large, complex solutions, it can be difficult to navigate through all the code. So, the primary reason to structure your projects is to make it easier to find components. It is good to have an overall name for your solution that reflects the application or solution. We will build multiple projects for a fictional company named Northwind. We will name the solution PracticalApps and use the name Northwind as a prefix for all the project names. There are many ways to structure and name projects and solutions, for example, using a folder hierar- chy as well as a naming convention. If you work in a team, make sure you know how your team does it. Structuring projects in a solution It is good to have a naming convention for your projects in a solution so that any developer can tell what each one does instantly. A common choice is to use the type of project, for example, class library, console app, website, and so on. Since you might want to run multiple web projects at the same time, and they will be hosted on a local web server, we need to differentiate each project by assigning different port numbers for their endpoints for both HTTP and HTTPS. 