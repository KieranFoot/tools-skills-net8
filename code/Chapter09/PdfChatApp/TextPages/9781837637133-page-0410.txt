Chapter 9 377 • If you are using Visual Studio Code, then enter the command dotnet run --launch- , manually start a web browser, and navigate to the Swagger documen- profile https tation web page: https://localhost:5091/swagger. On Windows, if prompted to do so, you will have to set the Windows Defender Firewall to allow access to your local web service. 13. Use Swagger to test the various endpoints, and note the SQL statements logged to the output as you do so, for example: • Get the first page of 10 products. • Get the 6th page of 10 products. • Get the product with an ID of 77. • Get the single out-of-stock product. • Get the seven discontinued products. cha. • Get products whose names start with Create (POST), update (PUT), and delete a product. For hints about how to perform these • tests, read the following link: https://github.com/markjprice/apps-services-net8/ blob/main/docs/ch09-swagger-tests.md. If you completed Chapter 8, Building and Securing Web Services Using Minimal APIs, then instead of manually using Swagger, you can use the .http files we created to test the minimal API web service. Just change the port from 5081 to 5091. Now that we have a basic web service, we can start activating caching in it. Caching objects using in-memory caching The IMemoryCache interface represents a cache that uses local server memory. If you have multiple servers hosting your service or website, then you must enable “sticky sessions.” This means that an incoming request from a client or visitor will be directed to the same server as previous requests from that client or visitor, allowing the request to find the correct cached data in that server’s memory. The Microsoft.Extensions.Caching.Memory package has a modern implementation of IMemoryCache. Avoid the older System.Runtime.Caching. Sizes are defined using custom units. If you store simple string values, then you could use the length of the string. If you don’t know the size, you could just use 1 unit for each entry to simply limit the number of entries. 