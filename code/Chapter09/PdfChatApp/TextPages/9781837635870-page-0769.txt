Building User Interfaces Using Blazor 750 Good Practice: We have not selected the options to use interactive WebAssembly or server components so that we can build up your knowledge about how Blazor works step by step. In real-world projects, you are likely to want to select these options from the start. We have also selected to include sample pages, which you will likely want to clear in a real-world project. 2. Build the Northwind.Blazor project. Northwind.Blazor.csproj, note that it is identical to an ASP.NET Core project that uses 3. In the Web SDK and targets .NET 8. Note that Program.cs is almost identical to an ASP.NET Core project. A difference is the section 4. that configures services, with its call to the AddRazorComponents method, as shown highlighted in the following code: var builder = WebApplication.CreateBuilder(args); // Add services to the container. builder.Services.AddRazorComponents(); var app = builder.Build(); 5. Also note the section for configuring the HTTP pipeline, which calls the MapRazorComponents<App> method. This configures a root application component that will be named App.razor, as shown highlighted in the following code: // Configure the HTTP request pipeline. if (!app.Environment.IsDevelopment()) { app.UseExceptionHandler("/Error", createScopeForErrors: true); // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts. app.UseHsts(); } app.UseHttpsRedirection(); app.UseStaticFiles(); app.UseAntiforgery(); app.MapRazorComponents<App>(); app.Run(); 