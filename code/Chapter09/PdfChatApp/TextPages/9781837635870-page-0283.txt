Building Your Own Types with Object-Oriented Programming 264 z = 100; // Increment each parameter except the read-only x. w++; // x++; // Gives a compiler error! y++; z++; WriteLine($"In the method: w={w}, x={x}, y={y}, z={z}"); } 2. In Program.cs, add statements to declare some int variables and pass them into the method, as shown in the following code: int a = 10; int b = 20; int c = 30; int d = 40; WriteLine($"Before: a={a}, b={b}, c={c}, d={d}"); bob.PassingParameters(a, b, ref c, out d); WriteLine($"After: a={a}, b={b}, c={c}, d={d}"); 3. Run the PeopleApp project and view the result, as shown in the following output: Before: a=10, b=20, c=30, d=40 In the method: w=11, x=20, y=31, z=101 After: a=10, b=20, c=31, d=101 • When passing a variable as a parameter by default, its current value gets passed, not w has a copy of the value of the a variable. The a variable the variable itself. Therefore, retains its original value of 10 even after w is incremented to 11. When passing a variable as an in parameter, a reference to the variable gets passed into • the method. Therefore, x is a reference to b. If the b variable gets incremented by some other process while the method is executing, then the x parameter would show that. ref parameter, a reference to the variable gets passed • When passing a variable as a into the method. Therefore, y is a reference to c. The c variable gets incremented when the y parameter gets incremented. When passing a variable as an out parameter, a reference to the variable gets passed into • the method. Therefore, z is a reference to d. The value of the d variable gets replaced by whatever code executes inside the method. 