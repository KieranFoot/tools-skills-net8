Chapter 2 77 Literal values When you assign to a variable, you often, but not always, assign a literal value. But what is a literal value? A literal is a notation that represents a fixed value. Data types have different notations for their literal values, and over the next few sections, you will see examples of using literal notation to assign values to variables. More Information: You can read the formal definition of literals in the C# language specifi- cation: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/ language-specification/lexical-structure#645-literals. Storing text For text, a single letter, such as an A, is stored as a char type. Good Practice: Actually, it can be more complicated than that. Egyptian Hieroglyph A002 (U+13001) needs two System.Char values (known as surrogate pairs) to represent it: \ uD80C and \uDC01. Do not always assume one char equals one letter or you could intro- duce hard-to-notice bugs into your code. A char is assigned using single quotes around the literal value, or assigning the return value of a function call, as shown in the following code: char letter = 'A'; // Assigning literal characters. char digit = '1'; char symbol = '$'; char userChoice = GetChar(); // Assigning from a fictitious function. For text, multiple letters, such as Bob, are stored as a string type and are assigned using double quotes around the literal value, or by assigning the return value of a function call or constructor, as shown in the following code: string firstName = "Bob"; // Assigning literal strings. string lastName = "Smith"; string phoneNumber = "(215) 555-4256"; // Assigning a string returned from the string class constructor. string horizontalLine = new('-', count: 74); // 74 hyphens. // Assigning a string returned from a fictitious function. string address = GetAddressFromDatabase(id: 563); // Assigning an emoji by converting from Unicode. string grinningEmoji = char.ConvertFromUtf32(0x1F600); 