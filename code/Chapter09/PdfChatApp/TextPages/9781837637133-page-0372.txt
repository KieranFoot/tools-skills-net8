Chapter 8 339 This technique is not just useful to prevent attacks. Even genuine clients might accidentally make too many requests, or for a commercial web service, you might want to charge different amounts for different rates, like when controlling a subscription. Commercial web services from Twitter/X to Reddit now charge a lot of money for access to their web APIs. When a client makes requests over a set rate limit, the client should receive either 429 Too Many Requests or 503 Service Unavailable HTTP responses. Good Practice: If you need to build a massively scalable web service and protect its APIs, you should use a cloud service like Azure API Management instead of trying to implement your own rate limiting. You can learn more about this at the following link: https:// learn.microsoft.com/en-us/azure/api-management/. Rate limiting using the AspNetCoreRateLimit package AspNetCoreRateLimit, a third-party package that targets .NET 6 or later, provides flexible rate-limiting middleware based on the IP address or client ID: 1. In the Northwind.WebApi.Service project, add a reference to the AspNetCoreRateLimit pack- age, as shown in the following markup: <PackageReference Include="AspNetCoreRateLimit" Version="5.0.0" /> 2. Build the Northwind.WebApi.Service project to restore packages. appsettings.Development.json, add configuration for default rate limit options and cli- 3. In ent-specific policies, as shown highlighted in the following configuration: { "Logging": { "LogLevel": { "Default": "Information", "Microsoft.AspNetCore": "Warning", "Microsoft.AspNetCore.HttpLogging": "Information" } }, "ClientRateLimiting": { "EnableEndpointRateLimiting": false, "StackBlockedRequests": false, "ClientIdHeader": "X-Client-Id", "HttpStatusCode": 429, "EndpointWhitelist": [ "get:/api/license", "*:/api/status" ], "ClientWhitelist": [ "dev-id-1", "dev-id-2" ], "GeneralRules": [ { "Endpoint": "*", 