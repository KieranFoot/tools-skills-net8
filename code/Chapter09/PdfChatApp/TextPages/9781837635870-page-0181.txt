Controlling Flow, Converting Types, and Handling Exceptions 162 We will set the initial value of an int variable to its maximum value minus one. Then, we will increment it several times, outputting its value each time. Once it gets above its maximum value, it overflows to its minimum value and continues incrementing from there. Let’s see this in action: 1. In Program.cs, type statements to declare and assign an integer to one less than its maximum possible value, and then increment it and write its value to the console three times, as shown in the following code: int x = int.MaxValue - 1; WriteLine($"Initial value: {x}"); x++; WriteLine($"After incrementing: {x}"); x++; WriteLine($"After incrementing: {x}"); x++; WriteLine($"After incrementing: {x}"); 2. Run the code and view the result that shows the value overflowing silently and wrapping around to large negative values, as shown in the following output: Initial value: 2147483646 After incrementing: 2147483647 After incrementing: -2147483648 After incrementing: -2147483647 3. Now, let’s get the compiler to warn us about the overflow by wrapping the statements using a checked statement block, as shown highlighted in the following code: checked { int x = int.MaxValue - 1; WriteLine($"Initial value: {x}"); x++; WriteLine($"After incrementing: {x}"); x++; WriteLine($"After incrementing: {x}"); x++; WriteLine($"After incrementing: {x}"); } 