Working with Common .NET Types 452 Some common auto-sorting collections are shown in Table 8.14: Collection Description SortedDictionary<TKey, This represents a collection of key/value pairs that are sorted by TValue> key. Internally it maintains a binary tree for items. This represents a collection of key-value pairs that are sorted by key. The name is misleading because this is not a list. Compared to SortedDictionary<TKey, TValue>, retrieval performance is SortedList<TKey, TValue> similar, it uses less memory, and insert and remove operations are slower for unsorted data. If it is populated from sorted data, then it is faster. Internally, it maintains a sorted array with a binary search to find elements. This represents a collection of unique objects that are maintained SortedSet<T> in a sorted order. Table 8.14: Common auto-sorting collections Specialized collections There are a few other collections for special situations. The System.Collections.BitArray collection manages a compact array of bit values, which are represented as Booleans, where true indicates that the bit is on (value is 1) and false indicates that the bit is off (value is 0). The System.Collections.Generics.LinkedList<T> collection represents a doubly linked list where every item has a reference to its previous and next items. They provide better performance compared to List<T> for scenarios where you will frequently insert and remove items from the middle of the LinkedList<T>, the items do not have to be rearranged in memory. list. In a Read-only, immutable, and frozen collections When we looked at the generic collection interface, we saw that it has a property named IsReadOnly. This is useful when we want to pass a collection to a method but not allow it to make changes. For example, we might define a method as shown in the following code: void ReadCollection<T>(ICollection<T> collection) { // We can check if the collection is read-only. if (collection.IsReadOnly) { // Read the collection. } else { 