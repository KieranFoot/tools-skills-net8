Building Serverless Nanoservices Using Azure Functions 452 3. Select the URL for your function and copy it to the clipboard. 4. Start Chrome. ?amount=123456, and note the 5. Paste the URL into the address box, append the query string successful response in the browser of one hundred and twenty-three thousand four hundred and fifty-six, as shown in Figure 10.2: Figure 10.2: A successful call to the Azure function running locally 6. In the command prompt or terminal, note the function was called successfully, as shown in the following output: [2023-101-01T11:32:51.574Z] Executing 'NumbersToWordsFunction' (Reason='This function was programmatically called via the host APIs.', Id=234d3122-ff3d-4896-94b3-db3c8b5013d8) [2023-10-01T11:32:51.603Z] C# HTTP trigger function processed a request. [2023-10-01T11:32:51.629Z] Executed 'NumbersToWordsFunction' (Succeeded, Id=234d3122-ff3d-4896-94b3-db3c8b5013d8, Duration=96ms) 7. Try calling the function without an amount in the query string, or a non-integer value for the amount like apples, and note the function returns a 400 status code indicating a bad request with a custom message, Failed to parse: apples. 8. Close Chrome and shut down the web server (or in Visual Studio Code, stop debugging). Responding to timer and resource triggers Now that you have seen an Azure Functions function that responds to an HTTP request, let’s build some that respond to other types of triggers. Support for HTTP and timer triggers is built in. Support for other bindings is implemented as exten- sion packages. Implementing a Timer triggered function First, we will make a function that runs every hour and requests a page from amazon.com for the eighth edition of my book, C# 12 and .NET 8 – Modern Cross-Platform Development Fundamentals, so that I can keep track of its Best Sellers Rank in the United States. 