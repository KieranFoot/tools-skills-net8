Handling Dates, Times, and Internationalization 274 { private static void SectionTitle(string title) { ConsoleColor previousColor = ForegroundColor; ForegroundColor = ConsoleColor.DarkYellow; WriteLine($"*** {title}"); ForegroundColor = previousColor; } private static void OutputTimeZones() { // get the time zones registered with the OS ReadOnlyCollection<TimeZoneInfo> zones = TimeZoneInfo.GetSystemTimeZones(); WriteLine($"*** {zones.Count} time zones:"); // order the time zones by Id instead of DisplayName foreach (TimeZoneInfo zone in zones.OrderBy(z => z.Id)) { WriteLine($"{zone.Id}"); } } private static void OutputDateTime(DateTime dateTime, string title) { SectionTitle(title); WriteLine($"Value: {dateTime}"); WriteLine($"Kind: {dateTime.Kind}"); WriteLine($"IsDaylightSavingTime: {dateTime. IsDaylightSavingTime()}"); WriteLine($"ToLocalTime(): {dateTime.ToLocalTime()}"); WriteLine($"ToUniversalTime(): {dateTime.ToUniversalTime()}"); } private static void OutputTimeZone(TimeZoneInfo zone, string title) { SectionTitle(title); WriteLine($"Id: {zone.Id}"); WriteLine($"IsDaylightSavingTime(DateTime.Now): { zone.IsDaylightSavingTime(DateTime.Now)}"); 