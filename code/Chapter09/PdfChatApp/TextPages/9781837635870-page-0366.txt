Chapter 6 347 • base: Represents the base class that the current object inherits from. For example, anywhere in the Person class, you could use the expression base.ToString() to call the base class im- plementation of that method. You will (hopefully) remember from Chapter 5, Building Your Own Types with Object-Oriented Programming, that to access static members you must use the type name. Overriding members Rather than hiding a method, it is usually better to override it. You can only override it if the base class chooses to allow overriding, by applying the virtual keyword to any methods that should allow overriding. Let’s see an example: 1. In Program.cs, add a statement to write the value of the john variable to the console using its string representation, as shown in the following code: WriteLine(john.ToString()); 2. Run the PeopleApp project and note that the ToString method is inherited from System.Object, so the implementation returns the namespace and type name, as shown in the following output: Packt.Shared.Employee 3. In Person.cs (not in the Employee class!), override this behavior by adding a ToString method to output the name of the person as well as the type name, as shown in the following code: #region Overridden methods public override string ToString() { return $"{Name} is a {base.ToString()}."; } #endregion The base keyword allows a subclass to access members of its superclass, that is, the base class that it inherits or derives from. 