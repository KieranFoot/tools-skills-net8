Caching, Queuing, and Resilient Background Services 400 8. In the command prompt or terminal for the MVC project, note the jittered time spans, as shown in the following output: Jittered delays for Polly retries: 1.38 seconds. 0.15 seconds. 2.65 seconds. 3.06 seconds. 6.46 seconds. Your five delays will be different, but they should start at about 1 second and increase from that. 9. Arrange the web service command prompt or terminal and the MVC website browser so that you can see both side by side. 10. On the home page, click Search for products by name. Note that the MVC website might have to make multiple requests before showing the page, 11. which will take up to about 15 seconds. For example, when I ran my projects, the MVC web site made four requests that failed before succeeding on the fifth attempt. You will see the exceptions logged in the web service output. Enter a partial product name, click Get Products, and note that the web page will likely appear 12. successfully again, even if one or more requests must be made beforehand. 13. It is possible that you could exceed the maximum of five requests, in which case you will see the error message as before. Microsoft has created their own packages that wrap Polly to make it even easier to use. They are the Microsoft.Extensions.Http.Resilience and Microsoft.Extensions. Resilience packages. You can learn about this at the following link: https://devblogs. microsoft.com/dotnet/building-resilient-cloud-services-with-dotnet-8/ Now that you’ve seen two techniques that improve services, caching, and handling transient faults, let’s look a third powerful technique, queuing. Queuing with RabbitMQ Queuing can improve the scalability of your service, just as it can in the physical world. When too many clients all need to call a service at once, we can use a queue to smooth out the load. There are many queuing systems available for all the major development platforms. One of the most popular is RabbitMQ. It implements the Advanced Message Queuing Protocol (AMQP). 