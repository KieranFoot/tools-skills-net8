Speaking C# 100 More Information: A full list of custom number format codes can be found at the following link: https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom- numeric-format-strings. You can apply standard number formatting using simpler format codes, like C and N. They support a precision number to indicate how many digits of precision you want. The default is two. The most common are, as shown in Table 2.9: Format code Description Currency. For example, in US culture, C formatting the value 123.4 gives $123.40, C or c and C0 formatting the value 123.4 gives $123. N or n Number. Integer digits with an optional negative sign and grouping characters. D or d Decimal. Integer digits with an optional negative sign but no grouping characters. Binary. For example, B formatting the value 13 gives 1101 and B8 formatting the B or b value 13 gives 00001101. Hexadecimal. For example, X formatting the value 255 gives FF and X4 formatting X or x the value 255 gives 00FF. Exponential notation. For example, E formatting the value 1234.567 would give E or e 1.234567000E+003 and E2 formatting the value 1234.567 would give 1.23E+003. Table 2.9: Standard numeric format codes More Information: A full list of standard number format codes can be found at the fol- lowing link: https://learn.microsoft.com/en-us/dotnet/standard/base-types/ standard-numeric-format-strings. Getting text input from the user We can get text input from the user using the ReadLine method. This method waits for the user to type some text. Then, as soon as the user presses Enter, whatever the user has typed is returned as string value. a Letâ€™s get input from the user: 1. Type statements to ask the user for their name and age and then output what they entered, as shown in the following code: Console.Write("Type your first name and press ENTER: "); string firstName = Console.ReadLine(); Console.Write("Type your age and press ENTER: "); 