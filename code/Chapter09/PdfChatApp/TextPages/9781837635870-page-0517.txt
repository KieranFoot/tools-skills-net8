Working with Files, Streams, and Serialization 498 Deserializing XML files Now, let’s try deserializing the XML file back into live objects in memory: 1. In Program.cs, add statements to open the XML file, and then deserialize it, as shown in the following code: SectionTitle("Deserializing XML files"); using (FileStream xmlLoad = File.Open(path, FileMode.Open)) { // Deserialize and cast the object graph into a "List of Person". List<Person>? loadedPeople = xs.Deserialize(xmlLoad) as List<Person>; if (loadedPeople is not null) { foreach (Person p in loadedPeople) { WriteLine("{0} has {1} children.", p.LastName, p.Children?.Count ?? 0); } } } 2. Run the code, and note that the people are loaded successfully from the XML file and then enumerated, as shown in the following output: Smith has 0 children. Jones has 0 children. Cox has 1 children. More Information: There are many other attributes defined in the System.Xml. Serialization namespace that can be used to control the XML generated. A good place to start is the official documentation for the XmlAttributeAttribute class found here: https://learn.microsoft.com/en-us/dotnet/api/system.xml.serialization. xmlattributeattribute. Do not get this class confused with the XmlAttribute class in the System.Xml namespace. That is used to represent an XML attribute when reading and writing XML, using XmlReader and XmlWriter. If you don’t use any annotations, XmlSerializer performs a case-insensitive match using the property name when deserializing. 