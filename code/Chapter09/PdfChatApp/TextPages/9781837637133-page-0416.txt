Chapter 9 383 { // Allow readers to reset the cache entry's lifetime. SlidingExpiration = TimeSpan.FromSeconds(5), // Set an absolute expiration time for the cache entry. AbsoluteExpirationRelativeToNow = TimeSpan.FromSeconds(20), }; byte[]? cachedValueBytes = JsonSerializer.SerializeToUtf8Bytes(cachedValue); _distributedCache.Set(DiscontinuedProductsKey, cachedValueBytes, cacheEntryOptions); return cachedValue; } 5. In ProductsController.cs, in the GetDiscontinuedProducts action method, add statements to try to get the cached discontinued products, and if not cached, get them from the database. If a byte array is found in the cache, try to deserialize it into products, but if that fails too, get the products from the database, as highlighted in the following code: // GET: api/products/discontinued [HttpGet] [Route("discontinued")] [Produces(typeof(Product[]))] public IEnumerable<Product> GetDiscontinuedProducts() { // Try to get the cached value. byte[]? cachedValueBytes = _distributedCache. Get(DiscontinuedProductsKey); Product[]? cachedValue = null; if (cachedValueBytes is null) { cachedValue = GetDiscontinuedProductsFromDatabase(); } else { cachedValue = JsonSerializer 