Querying and Manipulating Data Using LINQ 592 Letâ€™s continue working with the current project to explore sorting: 1. In the FilteringUsingWhere method, append a call to OrderBy to the end of the existing query, as shown in the following code: var query = names .Where(name => name.Length > 4) .OrderBy(name => name.Length); Good Practice: Format the LINQ statement so that each extension method call happens on its own line, to make it easier to read. 2. Run the code and note that the names are now sorted by shortest first, as shown in the fol- lowing output: Kevin Creed Dwight Angela Michael To put the longest name first, you would use OrderByDescending. Sorting by a subsequent property using ThenBy We might want to sort by more than one property, for example, to sort names of the same length in alphabetical order: 1. In the FilteringUsingWhere method, append a call to the ThenBy method at the end of the existing query, as highlighted in the following code: var query = names .Where(name => name.Length > 4) .OrderBy(name => name.Length) .ThenBy(name => name); 2. Run the code and note the slight difference in the following sort order. Within a group of names of the same length, the names are sorted alphabetically by the full value of the string, so Creed comes before Kevin, and Angela comes before Dwight, as shown in the following output: Creed Kevin Angela Dwight Michael 