Chapter 9 499 Good Practice: When using XmlSerializer, remember that only the public fields and properties are included, and the type must have a parameterless constructor. You can customize the output with attributes. Serializing with JSON One of the most popular .NET libraries to work with the JSON serialization format is Newtonsoft.Json, known as Json.NET. It is mature and powerful. Newtonsoft.Json is so popular that it overflowed the bounds of the 32-bit integer used for the download count in the NuGet package manager, as shown in the following tweet in Figure 9.5: Figure 9.5: Negative 2 billion downloads for Newtonsoft.Json in August 2022 Letâ€™s see it in action: 1. In the WorkingWithSerialization project, add a package reference for the latest version of Newtonsoft.Json, as shown in the following markup: <ItemGroup> <PackageReference Include="Newtonsoft.Json" Version="13.0.3" /> </ItemGroup> 2. Build the WorkingWithSerialization project to restore packages. Program.cs, add statements to create a text file, and then serialize the people into the file 3. In as JSON, as shown in the following code: SectionTitle("Serializing with JSON"); // Create a file to write to. string jsonPath = Combine(CurrentDirectory, "people.json"); 