Chapter 11 589 Figure 11.2: IntelliSense showing LINQ extension methods when System.Linq is imported Interestingly, as you can see in the screenshot of Visual Studio 2022 on my com- puter, GitHub Copilot is even suggesting autocompleting with a lambda expression very similar to the one that we will eventually end up writing. But there are some important intermediate steps you need to see before we get to that so do not press Tab, Tab to insert any GitHub Copilot suggestions if you have that feature enabled. 10. As you type the parentheses for the Where method, IntelliSense tells us that, to call Where, we must pass in an instance of a Func<string, bool> delegate. Func<string, bool> delegate, and for now 11. Enter an expression to create a new instance of a note that we have not yet supplied a method name because we will define it in the next step, as shown in the following code: var query = names.Where(new Func<string, bool>( )) 12. Leave the statement unfinished for now. The Func<string, bool> delegate tells us that for each string variable passed to the method, the method must return a bool value. If the method returns true, it indicates that we should include the string in the results, and if the method returns false, it indicates that we should exclude it. Targeting a named method Letâ€™s define a method that only includes names that are longer than four characters: 1. In Program.Functions.cs, add a method that will return true only for names longer than four characters, as shown in the following code: static bool NameLongerThanFour(string name) { // Returns true for a name longer than four characters. return name.Length > 4; } 