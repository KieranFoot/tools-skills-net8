Chapter 3 139 // Loop through the names. for (int i = 0; i < names.Length; i++) { // Output the item at index position i. WriteLine($"{names[i]} is at position {i}."); } 3. Run the code and note the result, as shown in the following output: Kate is at position 0. Jack is at position 1. Rebecca is at position 2. Tom is at position 3. Arrays are always of a fixed size at the time of memory allocation, so you need to decide how many items you want to store before instantiating them. An alternative to defining the array in three steps as above is to use array initializer syntax: 1. Before the for loop, add a statement to declare, allocate memory, and instantiate the values of a similar array, as shown in the following code: // Alternative syntax for creating and initializing an array. string[] names2 = { "Kate", "Jack", "Rebecca", "Tom" }; 2. Change the for loop to use names2, run the console app, and note that the results are the same. Working with multi-dimensional arrays Instead of a single-dimension array for storing a row of string values (or any other data type), what if we want to store a grid of values? Or a cube? Or even higher dimensions? We could visualize a two-dimensional array, aka grid, of string values like this: 0 1 2 3 0 Alpha Beta Gamma Delta 1 Anne Ben Charlie Doug 2 Aardvark Bear Cat Dog Table 3.2: Visualization of a two-dimensional array Letâ€™s look at how to use multi-dimensional arrays: 1. At the bottom of Program.cs, add statements to declare and instantiate a two-dimensional array of string values, as shown in the following code: string[,] grid1 = // Two dimensional array. { { "Alpha", "Beta", "Gamma", "Delta" }, 