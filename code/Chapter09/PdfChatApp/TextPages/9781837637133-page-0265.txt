Using Popular Third-Party Libraries 232 8. Note the test fails because the Total member of the Summary view model is unmapped, as shown in Figure 6.3: Figure 6.3: The test fails because the Total member is unmapped 9. In the MappingObjects.Mappers project, in the mapper configuration, after the mapping for the FullName member, add a mapping for the Total member, as shown highlighted in the following code: cfg.CreateMap<Cart, Summary>() // Map the first and last names formatted to the full name. .ForMember(dest => dest.FullName, opt => opt.MapFrom(src => string.Format("{0} {1}", src.Customer.FirstName, src.Customer.LastName) )) // We have removed a semi-colon from here. // Map the sum of items to the Total member. .ForMember(dest => dest.Total, opt => opt.MapFrom( src => src.Items.Sum(item => item.UnitPrice * item.Quantity))); }); 10. Run the test and note that, this time, it passes. Performing live mappings between models Now that we have validated the configuration of our mapping, we can use it in a live console app: 1. Use your preferred code editor to add a new Console App / console project named MappingObjects.Console to the Chapter06 solution. MappingObjects.Console project, treat warnings as errors, globally and statically im- 2. In the System.Console class, add a project reference for the two class libraries, and add a port the package reference for AutoMapper, as shown in the following markup: 