Chapter 15 751 Reviewing Blazor routing, layouts, and navigation Let’s review how routing is configured for a Blazor project, the layouts, and the navigation menu: 1. In the Northwind.Blazor project folder, in the Components folder, in App.razor, note that it defines basic HTML page markup that references a local copy of Bootstrap for styling, and a few Blazor-specific elements, as shown highlighted in the following markup and noted in the list after the markup: <!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8" /> <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" /> <base href="/" /> <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" /> <link rel="stylesheet" href="css/app.css" /> <link rel="stylesheet" href="Northwind.Blazor.styles.css" /> <link rel="icon" type="image/png" href="favicon.png" /> <HeadOutlet /> </head> <body> <Routes /> <script src="_framework/blazor.web.js"></script> </body> </html> While reviewing the preceding markup, note the following: • A <HeadOutlet /> Blazor component for injecting additional content into the <head> section. This is one of the built-in components available in all Blazor projects. <Routes /> Blazor component for defining the custom routes in this project. This • A component can be completely customized by the developer because it is part of the Routes.razor. current project in a file named blazor.web.js that manages communication back to the server for • A script block for Blazor’s dynamic features like downloading WebAssembly components in the back- ground and later switching from server-side to client-side component execution. 