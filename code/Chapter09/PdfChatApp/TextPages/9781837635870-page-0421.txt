Packaging and Distributing .NET Types 402 Good Practice: Debugging, disassembling, and decompiling someone else’s software is likely against its license agreement and illegal in many jurisdictions. Instead of trying to protect your intellectual property with a technical solution, the law is sometimes your only recourse. Packaging your libraries for NuGet distribution Before we learn how to create and package our own libraries, we will review how a project can use an existing package. Referencing a NuGet package Let’s say that you want to add a package created by a third-party developer, for example, Newtonsoft. , a popular package for working with the JavaScript Object Notation (JSON) serialization format: Json 1. In the AssembliesAndNamespaces project, add a reference to the Newtonsoft.Json NuGet package, either using the GUI for Visual Studio 2022 or the dotnet add package command for Visual Studio Code. AssembliesAndNamespaces.csproj file and note that a package reference has been 2. Open the added, as shown in the following markup: <ItemGroup> <PackageReference Include="Newtonsoft.Json" Version="13.0.3" /> </ItemGroup> If you have a more recent version of the Newtonsoft.Json package, then it has been updated since this chapter was written. Fixing dependencies To consistently restore packages and write reliable code, it’s important that you fix dependencies. Fixing dependencies means you are using the same family of packages released for a specific version of .NET, for example, SQLite for .NET 8, as shown highlighted in the following markup: <Project Sdk="Microsoft.NET.Sdk"> <PropertyGroup> <OutputType>Exe</OutputType> <TargetFramework>net8.0</TargetFramework> <Nullable>enable</Nullable> <ImplicitUsings>enable</ImplicitUsings> </PropertyGroup> <ItemGroup> <PackageReference Version="8.0.0" 