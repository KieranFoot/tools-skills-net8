Combining Data Sources Using GraphQL 524 Good Practice: The [UsePaging], [UseFiltering], and [UseSorting] attributes must be decorated onto a query method that returns IQueryable<T> , allowing GraphQL to dynamically configure the LINQ query before executing it against the data store. 2. Start the Northwind.GraphQL.Service project, using the https profile without debugging. 3. In Banana Cake Pop, click the + to open a new tab. products (without paging) and 4. Click the Schema Definition tab, and note the queries named productsWithPaging, which documents how to use the query to request a page of products, as shown in the following output: products: [Product!]! productsInCategory(categoryId: Int!): [Product!]! productsByUnitPrice(minimumUnitPrice: Decimal!): [Product!]! productsWithPaging( """ Returns the first _n_ elements from the list. """ first: Int """ Returns the elements in the list that come after the specified cursor. """ after: String """ Returns the last _n_ elements from the list. """ last: Int """ Returns the elements in the list that come before the specified cursor. """ before: String ): ProductsWithPagingConnection 5. Click the Operations tab, and write a named query to request the first page of 10 products, as shown in the following markup: query FirstTenProducts { productsWithPaging(first: 10) { pageInfo { 