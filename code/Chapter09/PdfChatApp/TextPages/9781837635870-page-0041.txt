Hello, C#! Welcome, .NET! 22 class Program { static void Main(string[] args) { Console.WriteLine("Hello, World!"); } } } During compilation with .NET SDK 6 or later, all the boilerplate code to define the Program class and its Main method is generated and wrapped around the statements you write. This uses a feature introduced in .NET 5 called top-level programs, but it was not until .NET 6 that Microsoft updated the project template for console apps to use top-level statements by default. Then in .NET 7 or later, Microsoft added options to use the older style if you prefer: • If you are using Visual Studio 2022, select the check box labeled Do not use top-level statements. • If you are using the dotnet CLI at the command prompt, add a switch: dotnet new console --use-program-main Warning! One functional difference is that the auto-generated code does not define a namespace, so the Program class is implicitly defined in an empty namespace with no name instead of a namespace that matches the name of the project. Requirements for top-level programs Key points to remember about top-level programs include the following: • There can be only one file like this in a project. using statements must be at the top of the file. • Any • If you declare any classes or other types, they must be at the bottom of the file. Main if you explicitly define it, the method is named • Although you should name the method <Main>$ when created by the compiler. Implicitly imported namespaces The using System; statement at the top of the file imports the System namespace. This enables the Console.WriteLine statement to work. Why do we not have to import it in our project? The trick is that we do still need to import the System namespace, but it is now done for us using a combination of features introduced in C# 10 and .NET 6. Let’s see how: 1. In Solution Explorer, expand the obj folder, expand the Debug folder, expand the net8.0 folder, and open the file named HelloCS.GlobalUsings.g.cs. 