Speaking C# 88 More Information: The sizeof operator requires an unsafe code block except for the commonly used types like int and byte. You can learn more about sizeof at the following link: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/ operators/sizeof. Unsafe code cannot have its safety verified. You can learn more about unsafe code blocks at the following link: https://learn.microsoft.com/en-us/ dotnet/csharp/language-reference/unsafe-code. Storing Booleans Booleans can only contain one of the two literal values true or false, as shown in the following code: bool happy = true; bool sad = false; They are most used to branch and loop. You donâ€™t need to fully understand them yet, as they are cov- ered more in Chapter 3, Controlling Flow, Converting Types, and Handling Exceptions. Storing any type of object There is a special type named object that can store any type of data, but its flexibility comes at the cost of messier code and possibly poor performance. Because of those two reasons, you should avoid it whenever possible. The following steps show you how to use object types if you need to use them because you must use a Microsoft or third-party library that uses them: 1. Use your preferred code editor to add a new Console App / console project named Variables to the Chapter02 solution. In Program.cs, delete the existing statements and then type statements to declare and use 2. some variables using the object type, as shown in the following code: object height = 1.88; // Storing a double in an object. object name = "Amir"; // Storing a string in an object. Console.WriteLine($"{name} is {height} metres tall."); int length1 = name.Length; // This gives a compile error! int length2 = ((string)name).Length; // Cast name to a string. Console.WriteLine($"{name} has {length2} characters."); 