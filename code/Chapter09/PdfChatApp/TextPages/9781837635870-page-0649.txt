Introducing Web Development Using ASP.NET Core 630 .cshtml Razor View (MVC) .cshtml Razor Layout _ViewStart .cshtml Razor View Start _ViewImports .cshtml Razor View Imports Table 12.1: Comparison of file types used in ASP.NET Core Directives like @page are added to the top of a fileâ€™s contents. If a file does not have a special filename, then it can be named anything. For example, you might create a Razor Component for use in a Blazor project named Customer.razor, or you might create a Razor _MobileLayout.cshtml. Layout for use in an MVC or Razor Pages project named The naming convention for shared Razor files like layouts and partial views is to prefix with an underscore _. For example, _ViewStart.cshtml, _Layout.cshtml, or _Product. cshtml (this might be a partial view for rendering a product). A Razor Layout file like _MyCustomLayout.cshtml is identical to a Razor View. What makes the file a layout is being set as the Layout property of another Razor file, as shown in the following code: @{ Layout = "_MyCustomLayout"; // File extension is not needed. } Warning! Be careful to use the correct file extension and directive at the top of the file or you will get unexpected behavior. Building websites using a content management system Most websites have a lot of content, and if developers had to be involved every time some content needed to be changed, that would not scale well. A Content Management System (CMS) enables developers to define content structure and templates to provide consistency and good design while making it easy for a non-technical content owner to manage the actual content. They can create new pages or blocks of content, and update existing con- tent, knowing it will look great for visitors with minimal effort. There are a multitude of CMSs available for all web platforms, like WordPress for PHP or Django CMS for Python. CMSs that support modern .NET include Optimizely Content Cloud, Umbraco, Piranha CMS, and Orchard Core. 