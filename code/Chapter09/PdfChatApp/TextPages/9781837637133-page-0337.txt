Handling Dates, Times, and Internationalization 304 Period period = Period.Between(start, end); WriteLine($"Period: {period}"); WriteLine($"Years: {period.Years}"); WriteLine($"Months: {period.Months}"); WriteLine($"Weeks: {period.Weeks}"); WriteLine($"Days: {period.Days}"); WriteLine($"Hours: {period.Hours}"); WriteLine(); Period p1 = Period.FromWeeks(2); Period p2 = Period.FromDays(14); WriteLine($"p1 (period of two weeks): {p1}"); WriteLine($"p2 (period of 14 days): {p2}"); WriteLine($"p1 == p2: {p1 == p2}"); WriteLine($"p1.Normalize() == p2: {p1.Normalize() == p2}"); 6. Run the console app and note the results, including that at the time of running the console app on 1 June 2023, the modern .NET era has lasted 6 years, 11 months, and 4 days, the serialization format for the Period type, and how two periods can be compared and should be normalized before the comparison, as shown in the following output: *** Working with periods Modern .NET era Start: 27/06/2016 17:00:00 End: 01/06/2023 09:21:05 Period: P6Y11M4DT16H21M5S889s9240t Years: 6 Months: 11 Weeks: 0 Days: 4 Hours: 16 p1 (period of two weeks): P2W p2 (period of 14 days): P14D p1 == p2: False p1.Normalize() == p2: True 