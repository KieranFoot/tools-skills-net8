Chapter 5 263 WriteLine(bob.OptionalParameters(3, number: 52.7, command: "Hide!")); WriteLine(bob.OptionalParameters(3, "Poke!", active: false)); Remember that if you name the arguments, then you can change their positions, for example: bob.OptionalParameters(number: 52.7, command: "Hide!", count: 3). 5. As you call the OptionalParameters method, note the tooltip that shows the one required, three optional parameters, and their default values in Visual Studio 2022, as shown in Figure 5.4: Figure 5.4: IntelliSense showing the required and optional parameters as you type code Controlling how parameters are passed When a parameter is passed into a method, it can be passed in one of several ways: • By value (this is the default): Think of these as being in-only. Although the value can be changed, this only affects the parameter in the method. out parameter: Think of these as being out-only. out parameters cannot have a default • As an value assigned in their declaration and cannot be left uninitialized. They must be set inside the method; otherwise, the compiler will give an error. By reference as a ref parameter: Think of these as being in-and-out. Like out parameters, • ref parameters also cannot have default values, but since they can already be set outside the method, they do not need to be set inside the method. in parameter: Think of these as being a reference parameter that is read-only. in param- • As an eters cannot have their value changed and the compiler will show an error if you try. Let’s see some examples of passing parameters in and out of a method: 1. In Person.cs, add statements to define a method with three parameters, one in parameter, one ref parameter, and one out parameter, as shown in the following method: public void PassingParameters(int w, in int x, ref int y, out int z) { // out parameters cannot have a default and they // must be initialized inside the method. 