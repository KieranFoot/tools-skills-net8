Working with Data Using Entity Framework Core 544 5. In Program.cs, comment out the two statements that create a Northwind instance and output the database provider name, and then call the ConfigureConsole and QueryingCategories methods, as shown in the following code: ConfigureConsole(); QueryingCategories(); 6. Run the code and view the result, as shown in the following partial output: Beverages has 12 products. Condiments has 12 products. Confections has 13 products. Dairy Products has 10 products. Grains/Cereals has 7 products. Meat/Poultry has 6 products. Produce has 5 products. Seafood has 12 products. Warning! If you see the following exception, the most likely problem is that the Northwind. db file is not being copied to the output directory: Unhandled exception. Microsoft. Data.Sqlite.SqliteException (0x80004005): SQLite Error 1: 'no such table: Categories'. Make sure that Copy to Output Directory is set, but even when it is, some code editors do not always copy the file when they should. You might need to manually copy the Northwind.db file to the appropriate directory. Filtering included entities EF Core 5 introduced filtered includes, which means you can specify a lambda expression in the Include method call to filter which entities are returned in the results: 1. In Program.Queries.cs, define a FilteredIncludes method, and add statements to do these tasks, as shown in the following code: • Create an instance of the Northwind class that will manage the database. • Prompt the user to enter a minimum value for units in stock. • Create a query for categories that have products with that minimum number of units in stock. Enumerate through the categories and products, outputting the name and units in • stock for each one: private static void FilteredIncludes() { using NorthwindDb db = new(); 