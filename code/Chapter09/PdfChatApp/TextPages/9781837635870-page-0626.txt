Chapter 11 607 }); WriteLine("Products that cost less than $10:"); WriteLine(projectedProducts.ToQueryString()); foreach (var p in projectedProducts) { 2. Hover your mouse over the new keyword in the Select method call, or the var keyword in the foreach statement, and note that it is an anonymous type, as shown in Figure 11.5: Figure 11.5: An anonymous type used during LINQ projection 3. Run the project and confirm that the output is the same as before and the generated SQL is more efficient, as shown in the following output: SELECT "p"."ProductId", "p"."ProductName", "p"."UnitPrice" FROM "Products" AS "p" WHERE "p"."UnitPrice" < 10.0 ORDER BY "p"."UnitPrice" DESC More Information: You can learn more about projection using the Select method at the following link: https://learn.microsoft.com/en-us/dotnet/csharp/ programming-guide/concepts/linq/projection-operations. Let’s continue to look at common LINQ queries by learning how to join, group, and perform lookups. Joining, grouping, and lookups There are three extension methods for joining, grouping, and creating grouped lookups: • Join: This method has four parameters: the sequence that you want to join with, the property or properties on the left sequence to match on, the property or properties on the right sequence to match on, and a projection. 