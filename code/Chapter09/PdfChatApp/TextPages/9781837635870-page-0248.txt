Chapter 4 229 // Successfully parsed the string into a Person. value = new Person() { ... }; return true; } More Information: Now that you’ve been introduced to the basics of exceptions, you can learn more about the details by reading the official documentation at the following link: https://learn.microsoft.com/en-us/dotnet/standard/exceptions/. Practicing and exploring Test your knowledge and understanding by answering some questions, getting some hands-on practice, and exploring, with deeper research, the topics covered in this chapter. Exercise 4.1 – Test your knowledge Answer the following questions. If you get stuck, try googling the answers, if necessary, while remem- bering that if you get totally stuck, the answers are in the Appendix: 1. What does the C# keyword void mean? 2. What are some differences between imperative and functional programming styles? 3. In Visual Studio Code or Visual Studio, what is the difference between pressing F5, Ctrl or Cmd + F5, Shift + F5, and Ctrl or Cmd + Shift + F5? Trace.WriteLine method write its output to? 4. Where does the 5. What are the five trace levels? Debug and Trace classes? 6. What is the difference between the 7. When writing a unit test, what are the three “A”s? When writing a unit test using xUnit, which attribute must you decorate the test methods with? 8. 9. What dotnet command executes xUnit tests? ex without losing the 10. What statement should you use to rethrow a caught exception named stack trace? Exercise 4.2 – Practice writing functions with debugging and unit testing Prime factors are the combination of the smallest prime numbers that, when multiplied together, will produce the original number. Consider the following examples: • Prime factors of 4 are 2 x 2 • Prime factor of 7 is 7 • Prime factors of 30 are 5 x 3 x 2 • Prime factors of 40 are 5 x 2 x 2 x 2 • Prime factors of 50 are 5 x 5 x 2 