Chapter 2 81 // An integer is a negative or positive whole number or 0. int integerNumber = -23; // A float is a single-precision floating-point number. // The F or f suffix makes the value a float literal. // The suffix is required to compile. float realNumber = 2.3f; // A double is a double-precision floating-point number. // double is the default for a number value with a decimal point. double anotherRealNumber = 2.3; // A double literal value. Storing whole numbers You might know that computers store everything as bits. The value of a bit is either 0 or 1. This is called a binary number system. Humans use a decimal number system. The decimal number system, also known as Base 10, has 10 as its base, meaning there are 10 digits, from 0 to 9. Although it is the number base most used by human civilizations, other number base systems are popular in science, engineering, and computing. The binary number system, also known as Base 2, has two as its base, meaning there are two digits, 0 and 1. The following image shows how computers store the decimal number 10. Take note of the bits with the value 1 in the 8 and 2 columns; 8 + 2 = 10: Figure 2.4: How computers store the decimal number 10 So, 10 in decimal is 00001010 in a binary byte (8 bits). Improving legibility by using digit separators Two of the improvements seen in C# 7 and later are the use of the underscore character _ as a digit separator and support for binary literals. You can insert underscores anywhere into the digits of a number literal, including decimal, binary, or hexadecimal notation, to improve legibility. For example, you could write the value for 1 million in decimal notation, that is, Base 10, as 1_000_000. You can even use the 2/3 grouping common in India: 10_00_000. Using binary or hexadecimal notation To use binary notation, that is, Base 2, using only 1s and 0s, start the number literal with 0b. To use hexadecimal notation, that is, Base 16, using 0 to 9 and A to F, start the number literal with 0x. 