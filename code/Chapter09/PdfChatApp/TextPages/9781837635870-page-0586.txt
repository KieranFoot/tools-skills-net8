Chapter 10 567 You will sometimes read blogs or LinkedIn posts that excitedly tell you that “no one knows this one amazing trick to dramatically improve your EF Core queries” by calling AsNoTracking. But if you run a query that returns thousands of entities, and then run the same query again within the same data context, you’ll now have thousands of duplicates! This wastes memory and negatively impacts perfor- AsNoTracking" to improve performance is not always true. mance, so the advice to “call Understand how the three tracking choices work and select the best for your data context or individual queries. Modifying data with EF Core Inserting, updating, and deleting entities using EF Core is an easy task to accomplish. This is often referred to as CRUD, an acronym that includes the following operations: • C for Create • R for Retrieve (or Read) • U for Update • D for Delete By default, DbContext maintains change tracking automatically, so the local entities can have multiple changes tracked, including adding new entities, modifying existing entities, and removing entities. When you are ready to send those changes to the underlying database, call the SaveChanges method. The number of entities successfully changed will be returned. Inserting entities Let’s start by looking at how to add a new row to a table: 1. In the WorkingWithEFCore project, add a new class file named Program.Modifications.cs. In Program.Modifications.cs, create a partial Program class with a method named 2. ListProducts that outputs the ID, name, cost, stock, and discontinued properties of each product, sorted with the costliest first, and highlights any that match an array of int values that can be optionally passed to the method, as shown in the following code: using Microsoft.EntityFrameworkCore; // To use ExecuteUpdate, ExecuteDelete. using Microsoft.EntityFrameworkCore.ChangeTracking; // To use EntityEntry<T>. using Northwind.EntityModels; // To use Northwind, Product. partial class Program { private static void ListProducts( int[]? productIdsToHighlight = null) { 