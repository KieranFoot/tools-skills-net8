Chapter 7 387 dotnet publish -c Release -r osx-x64 --self-contained dotnet publish -c Release -r osx.11.0-arm64 --self-contained dotnet publish -c Release -r linux-x64 --self-contained dotnet publish -c Release -r linux-arm64 --self-contained Good Practice: You could automate these commands by using a scripting lan- guage like PowerShell and execute the script file on any operating system using the cross-platform PowerShell Core. I have done this for you at the following link: https://github.com/markjprice/cs12dotnet8/tree/main/scripts/ publish-scripts. 5. Open Windows File Explorer or a macOS Finder window, navigate to DotNetEverywhere\bin\ Release\net8.0, and note the output folders for the five operating systems. win10-x64 folder, open the publish folder, and note all the supporting assemblies, like 6. In the Microsoft.CSharp.dll. DotNetEverywhere executable file, and note it is 154 KB, as shown in Figure 7.3: 7. Select the Figure 7.3: The DotNetEverywhere executable file for Windows 10 64-bit 8. If you are on Windows, then double-click to execute the program and note the result, as shown in the following output: I can run everywhere! OS Version is Microsoft Windows NT 10.0.22621.0. I am Windows 11. Press any key to stop me. 9. Press any key to close the console app and its window. publish folder and all its files is 68.3 MB. 10. Note that the total size of the osx.11.0-arm64 folder, select the publish folder, note all the supporting assemblies, 11. In the and then select the DotNetEverywhere executable file. Note that the executable is 125 KB, and the publish folder is about 73.9 MB. There is no .exe file extension for published applications on macOS, so the filename will not have an extension. 