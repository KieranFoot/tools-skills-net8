Managing Relational Data Using SQL Server 66 Outputting statistics An ADO.NET connection can track useful statistics during its lifetime, including those listed in Table 2.7: Key Description BuffersReceived, BuffersSent, Data is transmitted as bytes stored in buffers. BytesReceived, BytesSent CursorOpens Cursors are an expensive operation because they require state on the server, and should be avoided when possible. Prepares, PreparedExecs, Number of prepares (compilations), executions of UnpreparedExecs prepared commands, and executions of unprepared commands. SelectCount, SelectRows Number of SELECT statements and rows returned by SELECT statements. ServerRoundtrips, SumResultSets, Number of server round trips, result sets, and transactions. Transactions ConnectionTime, ExecutionTime, Time in milliseconds spent connected, executing NetworkServerTime commands, or due to the network. Table 2.7: Connection statistics that can be tracked Letâ€™s enable this and output some of those statistics: 1. In Program.Helpers.cs, import the namespaces for working with ADO.NET and common collections, as shown in the following code: using Microsoft.Data.SqlClient; // To use SqlConnection. using System.Collections; // To use IDictionary. 2. In Program.Helpers.cs, in the partial Program class, add a method to output statistics about the current connection, with an array of string values to control which of the dozen or more statistics we want to output, as shown in the following code: private static void OutputStatistics(SqlConnection connection) { // Remove all the string values to see all the statistics. string[] includeKeys = { "BytesSent", "BytesReceived", "ConnectionTime", "SelectRows" }; IDictionary statistics = connection.RetrieveStatistics(); foreach (object? key in statistics.Keys) { if (!includeKeys.Any() || includeKeys.Contains(key)) 