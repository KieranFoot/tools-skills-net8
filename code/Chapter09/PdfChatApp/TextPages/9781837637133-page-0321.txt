Handling Dates, Times, and Internationalization 288 If a resource file or individual entry is missing, the automatic culture fallback search path for resources goes from specific culture (language and region) to neutral culture (language only) to invariant culture (supposedly independent but, basically, US English). If the current thread culture is en-AU (Australian English), then it will search for the resource file in the following order: 1. Australian English: PacktResources.en-AU.resx 2. Neutral English: PacktResources.en.resx 3. Invariant: PacktResources.resx Defining and loading resources To load resources from these satellite assemblies, we use some standard .NET types named IStringLocalizer<T> and IStringLocalizerFactory. Implementations of these are loaded from the .NET generic host as dependency services: 1. In the WorkingWithCultures project, add package references to Microsoft extensions to work with generic hosting and localization, as shown in the following markup: <ItemGroup> <PackageReference Include="Microsoft.Extensions.Hosting" Version="8.0.0" /> <PackageReference Include="Microsoft.Extensions.Localization" Version="8.0.0" /> </ItemGroup> 2. Build the WorkingWithCultures project to restore packages. Resources. 3. In the project folder, create a new folder named Resources folder, add a new XML file named PacktResources.resx, and modify the 4. In the contents to contain default invariant language resources (usually equivalent to US English), as shown in the following markup: <?xml version="1.0" encoding="utf-8"?> <root> <data name="EnterYourDob" xml:space="preserve"> <value>Enter your date of birth: </value> </data> <data name="EnterYourName" xml:space="preserve"> <value>Enter your name: </value> </data> <data name="EnterYourSalary" xml:space="preserve"> <value>Enter your salary: </value> </data> <data name="PersonDetails" xml:space="preserve"> <value>{0} was born on a {1:dddd}. {0} is {2:N0} minutes old. {0} earns {3:C}.</value> 