Broadcasting Real-Time Communication Using SignalR 496 double currentPrice = 267.10; // Simulated initial price. for (int i = 0; i < 10; i++) { // Check the cancellation token regularly so that the server will stop // producing items if the client disconnects. cancellationToken.ThrowIfCancellationRequested(); // Increment or decrement the current price by a random amount. // The compiler does not need the extra parentheses but it // is clearer for humans if you put them in. currentPrice += (Random.Shared.NextDouble() * 10.0) - 5.0; StockPrice stockPrice = new(stock, currentPrice); Console.WriteLine("[{0}] {1} at {2:C}", DateTime.UtcNow, stockPrice.Stock, stockPrice.Price); yield return stockPrice; await Task.Delay(4000, cancellationToken); // milliseconds } } public async Task UploadStocks(IAsyncEnumerable<string> stocks) { await foreach (string stock in stocks) { Console.WriteLine($"Receiving {stock} from client..."); } } } 4. In the Northwind.SignalR.Service.Client.Mvc project, in Program.cs, register the stock price hub after the statement that registers the chat hub, as shown in the following code: app.MapHub<StockPriceHub>("/stockprice"); Creating a .NET console app client for streaming Now, we can create a simple client to download a stream of data from the SignalR hub and upload a stream of data to the SignalR hub: 