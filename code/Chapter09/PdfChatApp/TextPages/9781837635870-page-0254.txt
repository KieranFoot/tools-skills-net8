Chapter 5 235 If you define multiple types in the same code file, then they can be in different namespaces, since the types must be explicitly inside the curly braces for each namespace. If you use C# 10 or later, you can simplify your code by ending a namespace declaration with a semi- colon and removing the curly braces, so the type definitions do not need to be indented, as shown in the following code: // All types in this file will be defined in this file-scoped namespace. namespace Packt.Shared; public class Person { } This is known as a file-scoped namespace declaration. You can only have one file-scoped namespace per file. This feature is especially useful for book writers who have limited horizontal space. Good Practice: Put each type that you create in its own code file, or at least put types in the same namespace in the same code file so that you can use file-scoped namespace declarations. Defining a class in a namespace The next task is to define a class that will represent a person: 1. In the PacktLibraryNetStandard2 project, add a new class file named Person.cs. Person.cs, delete any existing statements, set the namespace to Packt.Shared, and for the 2. In Person class, set the access modifier to public, as shown in the following code: // All types in this file will be defined in this file-scoped namespace. namespace Packt.Shared; public class Person { } Good Practice: Weâ€™re doing this because it is important to put your classes in a logically named namespace. A better namespace name would be domain-specific, for example, System.Numerics for types related to advanced numbers. In this case, the types we will create are Person, BankAccount, and WondersOfTheWorld, and they do not have a typical domain, so we will use the more generic Packt.Shared. 