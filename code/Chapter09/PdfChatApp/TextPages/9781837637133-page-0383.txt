Building and Securing Web Services Using Minimal APIs 350 My guess is that .NET 9 will include support for ASP.NET Core MVC and some parts of EF Core, but it could take until .NET 10 before we can all confidently use most of .NET and know we can build our apps and services with native AOT to gain the benefits. The native AOT publishing process includes code analyzers to warn you if you use any features that are not supported, but not all packages have been annotated to work well with this yet. The most common annotation used to indicate that a type or member does not support AOT is the [RequiresDynamicCode] attribute. More Information: You can learn more about AOT warnings at the following link: https:// learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/fixing- warnings. Reflection and native AOT Reflection is frequently used for runtime inspection of type metadata, dynamic invocation of mem- bers, and code generation. Native AOT does allow some reflection features, but the trimming performed during the native AOT compilation process cannot statically determine when a type has members that might be only accessed via reflection. These members would be removed by AOT, which would then cause a runtime exception. Good Practice: Developers must annotate their types with [DynamicallyAccessedMembers] to indicate a member that is only dynamically accessed via reflection and should therefore be left untrimmed. Native AOT for ASP.NET Core .NET 7 only supported native AOT with console apps and class libraries on Windows or Linux. It did not support macOS or ASP.NET Core. .NET 8 is the first version to support macOS and parts of ASP.NET Core. The following ASP.NET Core features are fully supported: gRPC, CORS, HealthChecks, HttpLogging, Localization , OutputCaching , RateLimiting , RequestDecompression , ResponseCaching , ResponseCompression, Rewrite, StaticFiles, and WebSockets. The following ASP.NET Core features are partially supported: minimal APIs. The following ASP.NET Core features are not supported (yet): MVC, Blazor Server, SignalR, Authenti- cation (except JWT), Session, and SPA. As you have previously seen, you implement an ASP.NET Core Minimal APIs web service by mapping an HTTP request to a lambda expression, for example, as shown in the following code: app.MapGet("/", () => "Hello World!"); 