Chapter 6 239 • WithSeverity: Change the default severity from Error to Warning or some other level. WithErrorCode: Assign an error code that can be output in the message. • WithState: Add some state that can be used in the message. • WithMessage: Customize the format of the default message. • Defining a model and validator Let’s see an example of FluentValidation in action. You will create three projects: • A class library for a model to validate that represents an order made by a customer. • A class library for the validator for the model. • A console app to perform a live validation. Let’s start: Use your preferred code editor to add a new Class Library / classlib project named 1. FluentValidation.Models to the Chapter06 solution. FluentValidation.Models project, delete the file named Class1.cs. 2. In the FluentValidation.Models project, add a new class file named CustomerLevel.cs and 3. In the enum with three customer levels, Bronze, Silver, and Gold, modify its contents to define an as shown in the following code: namespace FluentValidation.Models; public enum CustomerLevel { Bronze, Silver, Gold } 4. In the FluentValidation.Models project, add a new class file named Order.cs and modify its contents, as shown in the following code: namespace FluentValidation.Models; public class Order { public long OrderId { get; set; } public string? CustomerName { get; set; } public string? CustomerEmail { get; set; } public CustomerLevel CustomerLevel { get; set; } public decimal Total { get; set; } public DateTime OrderDate { get; set; } public DateTime ShipDate { get; set; } } 