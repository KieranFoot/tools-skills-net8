Working with Common .NET Types 446 The trailing commas after the third item is added to the dictionary are optional and the compiler will not complain about them. This is convenient so that you can change the order of the three items without having to delete and add commas in the right places. 3. Run the code and view the result, as shown in the following output: Dictionary keys: int long float Dictionary values: 32-bit integer data type 64-bit integer data type Single precision floating point number Keywords and their definitions: int: 32-bit integer data type long: 64-bit integer data type float: Single precision floating point number The definition of long is 64-bit integer data type In Chapter 11, Querying and Manipulating Data Using LINQ, you will learn how to create dictionaries and lookups from existing data sources like tables in a database using LINQ methods like ToDictionary and ToLookup. This is much more common than manually adding items to a dictionary as shown in this section. Sets, stacks, and queues Sets are a good choice when you want to perform set operations between two collections. For example, you may have two collections of city names, and you want to know which names appear in both sets (known as the intersect between the sets). Items in a set must be unique. Common set methods are shown in Table 8.12: Method Description Add If the item does not already exist in the set, then it is added. Returns true if the item was added, and false if it was already in the set. ExceptWith Removes the items in the set passed as the parameter from the set. IntersectWith Removes the items not in the set passed as the parameter and in the set. 