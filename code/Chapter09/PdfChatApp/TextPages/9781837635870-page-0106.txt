Chapter 2 87 The float and double types have some useful special values: NaN represents not-a-number (for example, the result of dividing by zero), Epsilon represents the smallest positive number that can be stored in a float or double, and PositiveInfinity and NegativeInfinity represent infinitely large positive IsInfinity and negative values. They also have methods for checking for these special values like and IsNaN. New number types and unsafe code The System.Half type was introduced in .NET 5. Like float and double, it can store real numbers. It normally uses two bytes of memory. The System.Int128 and System.UInt128 types were introduced in .NET 7. Like int and uint, they can store signed (positive and negative) and unsigned (only zero and positive) integer values. They normally use 16 bytes of memory. For these new number types, the sizeof operator only works in an unsafe code block, and you must compile the project using an option to enable unsafe code. Letâ€™s explore how this works: 1. In Program.cs, at the bottom of the file, type statements to show the size of the Half and Int128 number data types, as shown in the following code: unsafe { Console.WriteLine($"Half uses {sizeof(Half)} bytes and can store numbers in the range {Half.MinValue:N0} to {Half.MaxValue:N0}."); Console.WriteLine($"Int128 uses {sizeof(Int128)} bytes and can store numbers in the range {Int128.MinValue:N0} to {Int128.MaxValue:N0}."); } 2. In Numbers.csproj, add an element to enable unsafe code, as shown highlighted in the fol- lowing markup: <PropertyGroup> <OutputType>Exe</OutputType> <TargetFramework>net8.0</TargetFramework> <ImplicitUsings>enable</ImplicitUsings> <Nullable>enable</Nullable> <AllowUnsafeBlocks>True</AllowUnsafeBlocks> </PropertyGroup> 3. Run the Numbers project and note the sizes of the two new number types, as shown in the following output: Half uses 2 bytes and can store numbers in the range -65,504 to 65,504. Int128 uses 16 bytes and can store numbers in the range -170,141,183,460, 469,231,731,687,303,715,884,105,728 to 170,141,183,460,469,231,731,687, 303,715,884,105,727. 