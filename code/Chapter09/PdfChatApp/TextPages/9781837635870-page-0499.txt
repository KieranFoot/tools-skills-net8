Working with Files, Streams, and Serialization 480 Helo Racetrack ------------------/ 10. Open the file that was created, and confirm that it contains the list of call signs, as well as a blank line because we are effectively calling WriteLine twice: once when we write the last call sign to the file, and again when we read the whole file and write it out to the console. Remember that if you run the project at the command prompt using dotnet run, then the path will be the project folder. It will not include bin\Debug\net8.0. Writing to XML streams There are two ways to write an XML element, as follows: • WriteStartElement and WriteEndElement: Use this pair when an element might have child elements. WriteElementString: Use this when an element does not have children. • Now, let’s try storing the Viper pilot call signs array of string values in an XML file: 1. At the top of Program.cs, import the System.Xml namespace, as shown in the following code: using System.Xml; // To use XmlWriter and so on. 2. At the bottom of Program.cs, add statements that enumerate the call signs, writing each one as an element in a single XML file, as shown in the following code: SectionTitle("Writing to XML streams"); // Define a file path to write to. string xmlFile = Combine(CurrentDirectory, "streams.xml"); // Declare variables for the filestream and XML writer. FileStream? xmlFileStream = null; XmlWriter? xml = null; try { xmlFileStream = File.Create(xmlFile); // Wrap the file stream in an XML writer helper and tell it // to automatically indent nested elements. 