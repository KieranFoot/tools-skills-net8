Chapter 7 271 2. In the TestingWithTimeProvider project, in TimeTests.cs, add statements to both tests to show how we could use the new TimeProvider and its System property (which would still have a dependency on the system clock!), as shown in the following code: // This would use the .NET 8 or later dependency service, // but its implementation is still the system clock. DiscountService service = new(TimeProvider.System); 3. In the TestingWithTimeProvider project, add a reference to Moq, a package to mock depen- dencies, as shown in the following markup: <!-- The newest version before the controversy. --> <PackageReference Include="Moq" Version="4.18.4" /> Moq 4.18.4 was the last version released before a controversy erupted when the developer added obfuscated code that executed during builds. You can read more about this at the following link: https://github.com/devlooped/moq/ issues/1370. I plan to keep an eye on the situation over the next few months and then decide whether I should switch to an alternative. 4. In TimeTests.cs, import the namespace to use the Mock.Of<T> extension method, as shown in the following code: using Moq; // To use Mock.Of<T> method. 5. In the TestDiscountDuringWorkdays method, comment out the statement that used the System provider, and replace it with statements to mock a time provider that always returns a fixed date and time during workdays, as highlighted in the following code: TimeProvider timeProvider = Mock.Of<TimeProvider>(); // Mock the time provider so it always returns the date of // 2023-11-07 09:30:00 UTC which is a Tuesday. Mock.Get(timeProvider).Setup(s => s.GetUtcNow()).Returns( new DateTimeOffset(year: 2023, month: 11, day: 7, hour: 9, minute: 30, second: 0, offset: TimeSpan.Zero)); DiscountService service = new(timeProvider); 6. In the TestDiscountDuringWeekends method, comment out the statement that used the System provider and replace it with statements to mock a time provider that always returns a fixed date and time at the weekend, as highlighted in the following code: TimeProvider timeProvider = Mock.Of<TimeProvider>(); // Mock the time provider so it always returns the date of 