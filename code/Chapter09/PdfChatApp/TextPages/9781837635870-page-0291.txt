Building Your Own Types with Object-Oriented Programming 272 public partial class Person { } 4. Build the PacktLibraryNetStandard2 project. If you see error: CS0260 Missing partial modifier on declaration of type 'Person'; another partial declaration of this , then make sure you have applied the partial keyword to both Person classes. type exists The rest of the code we write for this chapter will be written in the PersonAutoGen.cs file. Now that you’ve seen lots of examples of fields and methods, we will look at some specialized types of methods that can be used to access fields to provide control and improve the developer’s experience. Controlling access with properties and indexers Earlier, you created a method named GetOrigin that returned a string containing the name and ori- gin of the person. Languages such as Java do this a lot. C# has a better way, and it is called properties. A property is simply a method (or a pair of methods) that acts and looks like a field when you want to get or set a value, but it acts like a method, thereby simplifying the syntax and enabling functionality, like validation and calculation, when you set and get a value. A fundamental difference between a field and a property is that a field provides a memory address to data. You could pass that memory address to an external component, like a Windows API C-style function call, and it could then modify the data. A property does not provide a memory address to its data, which provides more control. All you can do is ask the property to get or set the data. The property then executes statements and can decide how to respond, including refusing the request! Defining read-only properties A readonly property only has a get implementation: 1. In PersonAutoGen.cs, in the Person class, add statements to define three properties: • The first property will perform the same role as the GetOrigin method, using the property syntax that works with all versions of C#. The second property will return a greeting message, using the lambda expression body • => syntax from C# 6 and later. • The third property will calculate the person’s age. Here’s the code: #region Properties: Methods to get and/or set data or state. // A readonly property defined using C# 1 to 5 syntax. public string Origin 