Querying and Manipulating Data Using LINQ 610 var queryGroup = db.Categories.AsEnumerable().GroupJoin( inner: db.Products, outerKeySelector: category => category.CategoryId, innerKeySelector: product => product.CategoryId, resultSelector: (c, matchingProducts) => new { c.CategoryName, Products = matchingProducts.OrderBy(p => p.ProductName) }); foreach (var c in queryGroup) { WriteLine($"{c.CategoryName} has {c.Products.Count()} products."); foreach (var product in c.Products) { WriteLine($" {product.ProductName}"); } } } If we had not called the AsEnumerable method, then a runtime exception would have been thrown, as shown in the following output: Unhandled exception. System.ArgumentException: Argument type 'System. Linq.IOrderedQueryable`1[Packt.Shared.Product]' does not match the corresponding member type 'System.Linq.IOrderedEnumerable`1[Packt.Shared. Product]' (Parameter 'arguments[1]') This is because not all LINQ extension methods can be converted from expression trees into some other query syntax like SQL. In these cases, we can convert from IQueryable<T> to IEnumerable<T> by calling the AsEnumerable method, which forces query processing to use LINQ to EF Core only to bring the data into the application, and then use LINQ to Objects to execute more complex processing in memory. But, often, this is less efficient. 2. In Program.cs, call the GroupJoinCategoriesAndProducts method. Run the code, view the results, and note that the products inside each category have been 3. sorted by their name, as defined in the query, and as shown in the following partial output: Beverages has 12 products. Chai Chang ... Condiments has 12 products. 