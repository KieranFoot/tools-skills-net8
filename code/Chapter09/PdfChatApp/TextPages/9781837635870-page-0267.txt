Building Your Own Types with Object-Oriented Programming 248 If we want to indicate that our bucket list includes the Hanging Gardens of Babylon and the Mausoleum at Halicarnassus ancient world wonders, then we would want the 16 and 2 bits set to 1. In other words, we would store the value 18, as shown in Table 5.2: 64 32 16 8 4 2 1 0 0 1 0 0 1 0 Table 5.2: Storing 18 as bits in an enum 2. In Person.cs, leave the existing field to store a single favorite ancient world wonder and add the following statement to your list of fields to store multiple ancient world wonders, as shown in the following code: public WondersOfTheAncientWorld BucketList; 3. In Program.cs, add statements to set the bucket list using the | operator (the bitwise logical OR) to combine the enum values. We could also set the value using the number 18 cast into the enum type, as shown in the comment, but we shouldnâ€™t because that would make the code harder to understand, as shown in the following code: bob.BucketList = WondersOfTheAncientWorld.HangingGardensOfBabylon | WondersOfTheAncientWorld.MausoleumAtHalicarnassus; // bob.BucketList = (WondersOfTheAncientWorld)18; WriteLine($"{bob.Name}'s bucket list is {bob.BucketList}."); 4. Run the PeopleApp project and view the result, as shown in the following output: Bob Smith's bucket list is HangingGardensOfBabylon, MausoleumAtHalicarnassus. Good Practice: Use the enum values to store combinations of discrete options. Derive an enum type from byte if there are up to eight options, from ushort if there are up to 16 op- tions, from uint if there are up to 32 options, and from ulong if there are up to 64 options. Now that we have decorated the enum with the [Flags] attribute, combinations of values can be stored in a single variable or field. Now a programmer could store a combination of values in the FavoriteAncientWonder too when it should only store one value. To enforce this, we should convert the field into a property that allows us to take control over how other programmers can get and set the value. You will see how to do this later in this chapter. 