Chapter 13 569 You can learn more about RPCs at the following link: https://en.wikipedia.org/wiki/ Remote_procedure_call. How gRPC works A gRPC service developer defines a service interface for the methods that can be called remotely, including defining the method parameters and return types. The service implements this interface and runs a gRPC server to handle client calls. On the client, a strongly typed gRPC client provides the same methods as on the server. Defining gRPC contracts with .proto files gRPC uses contract-first API development that supports language-agnostic implementations. A con- tract in this case is an agreement that a service will expose a defined list of methods with specified parameters and return types that implement a prescribed behavior. A client that wishes to call the service can be certain that the service will continue to conform to the contract over time. For example, although new methods might be added, existing ones will never change or be removed. You write the contracts using .proto files that have their own language syntax and then use tools to convert them into various languages like C#. The .proto files are used by both the server and client to exchange messages in the correct format. Hereâ€™s an example .proto file using proto3 syntax to define a message request that uses a custom enum: // Setting the syntax must be first non-comment line. syntax = "proto3"; // proto2 is the default. /* When this .proto file is used in a .NET project, it will use the following C# namespace for the auto-generated code files. */ option csharp_namespace = "Northwind.Grpc.Service"; enum SearchType { SEARCHTYPE_UNSPECIFIED = 0; SEARCHTYPE_STARTSWITH = 1; SEARCHTYPE_CONTAINS = 2; SEARCHTYPE_ENDSWITH = 3; } message SearchRequest { string query = 1; // Fields must have order numbers. SearchType search_type = 2; 