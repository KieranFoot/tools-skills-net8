Implementing Interfaces and Inheriting Classes 296 8. If you use Visual Studio 2022, configure the startup project for the solution as the current selection. PeopleApp project and note the result, as shown in the following output: 9. Run the Harry was born on a Sunday. Static methods and overloading operators This section is specifically about methods that apply to two instances of the same type. It is not about the more general case of methods that apply to zero, one, or more than two instances. I wanted to think of some methods that would apply to two Person instances that could also become binary operators, like + and *. What would adding two people together represent? What would multi- plying two people represent? The obvious answers are getting married and having babies. We will design our methods to enable us to model the story of Lamech and his two wives and their children, as described at the following link: https://www.kingjamesbibleonline. org/Genesis-4-19/. We might want two instances of Person to be able to marry and procreate. We can implement this by writing methods and overriding operators. Instance methods are actions that an object does to itself; static methods are actions the type does. Which you choose depends on what makes the most sense for the action. Good Practice: Having both static and instance methods to perform similar actions often makes sense. For example, string has both a Compare static method and a CompareTo instance method. This puts the choice of how to use the functionality in the hands of the programmers using your type, giving them more flexibility. Implementing functionality using methods Letâ€™s start by implementing some functionality by using both static and instance methods: 1. In Person.cs, add properties with private backing storage fields to indicate if that person is married and to whom, as shown in the following code: // Allow multiple spouses to be stored for a person. public List<Person> Spouses = new(); // A read-only property to show if a person is married to anyone. public bool Married => Spouses.Count > 0; 