Building Efficient Microservices Using gRPC 582 _logger.LogWarning($"Northwind.Grpc.Service is not responding."); model.ErrorMessage = ex.Message; } return View(model); } 16. In Views/Home, in Index.cshtml, after the Welcome heading, remove the existing <p> element and then add markup to render a form for the visitor to enter their name, and then if they submit and the gRPC service responds, to output the greeting, as shown highlighted in the following markup: @using Northwind.Grpc.Client.Mvc.Models @model HomeIndexViewModel @{ ViewData["Title"] = "Home Page"; } <div class="text-center"> <h1 class="display-4">Welcome</h1> <div class="alert alert-secondary"> <form> <input name="name" placeholder="Enter your name" /> <input type="submit" /> </form> </div> @if (Model.Greeting is not null) { <p class="alert alert-primary">@Model.Greeting</p> } @if (Model.ErrorMessage is not null) { <p class="alert alert-danger">@Model.ErrorMessage</p> } </div> If you clean a gRPC project, then you will lose the automatically generated types and see compile errors. To recreate them, simply make any change to a .proto file or close and reopen the project/solution. 