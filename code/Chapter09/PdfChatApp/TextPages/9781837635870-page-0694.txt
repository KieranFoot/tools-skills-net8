Chapter 13 675 For example, a typical TempData scenario is shown in Figure 13.7 and includes the following steps: 1. A browser makes a request for a page like the home page. Middleware or an MVC controller could store some information about the request in the 2. TempData dictionary and then respond with status code 307 to tell the browser to make a second request. 3. The browser makes a second request, for example, for the page of orders. TempData to process the request. 4. An MVC controller could read the data stored in TempData and render 5. A Razor Page, Razor View, or Razor Layout could read the data stored in it to HTML. Figure 13.7: Using TempData to share information across two requests Using code-behind files with Razor Pages Sometimes, it is better to separate the HTML markup from the data and executable code because it is more organized that way. Razor Pages allows you to do this by putting the C# code in code-behind .cshtml file but end with .cshtml.cs. class files. They have the same name as the You will now create a Razor Page that shows a list of suppliers. In this example, we are focusing on learning about code-behind files. In the next topic, we will load the list of suppliers from a database, but for now, we will simulate that with a hardcoded array of string values: 1. In the Pages folder, add a new Razor Page file named Suppliers.cshtml: • If you are using Visual Studio 2022 or JetBrains Rider, then the project item template is named Razor Page - Empty and it creates both a markup file and a code-behind file named Suppliers.cshtml and Suppliers.cshtml.cs respectively. • If you are using Visual Studio Code, then you will need to create two new files named Suppliers.cshtml and Suppliers.cshtml.cs manually, or you can use dotnet new in the Pages folder, as shown in the following command: dotnet new page -n Suppliers --namespace Northwind.Web.Pages 