Chapter 15 681 6. In the left-side navigation, click Products, and note the table of products. 7. Close the browser and shut down the web server. Building a component with server interactivity Next, we will add a component that requires some interactivity, so we will enable Blazer with SignalR to dynamically update the browser DOM live at runtime: 1. In the Components folder, add a new file named Counter.razor. Counter.razor, define a label to render the current value of the counter number, and a 2. In button to increment it, and a code block to store the current counter value with a click event handler, to increment the number, as shown in the following markup: <h3>Counter: @CounterValue</h3> <button id="buttonIncrement" @onclick="IncrementCounter" class="btn btn-outline-primary">Increment</button> @code { public int CounterValue { get; set; } = 0; public void IncrementCounter() { CounterValue++; } } Note that this component will not act as a page, so we do not decorate it with the @page directive or define a route to the component. It will only be used embedded in some other component. 3. In the Components\Pages folder, in Home.razor, at the bottom of the page, render the counter component, as shown in the following markup: <Counter /> 4. Start the Northwind.Blazor project, using its https profile without debugging. On the home page, click the button, and note that nothing happens. When you create a project 5. using the Blazor Web App template with the --interactivity None switch or the Interactive render mode set to None, no component interactivity is enabled in a Blazor Web App project. 6. Close the browser and shut down the web server. In Program.cs, at the end of the statement that adds Razor components, add a call to a method 7. to add interactive server components, as shown highlighted in the following code: builder.Services.AddRazorComponents() .AddInteractiveServerComponents(); 