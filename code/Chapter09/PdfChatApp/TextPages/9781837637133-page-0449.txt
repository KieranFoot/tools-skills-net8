Caching, Queuing, and Resilient Background Services 416 5. In Worker.cs, note that the Worker class inherits from BackgroundService and implements its ExecuteAsync method by looping until a cancellation is requested, logging the current date/ time, and then pausing for one second, as shown in the following code: namespace Northwind.Background.Workers { public class Worker : BackgroundService { private readonly ILogger<Worker> _logger; public Worker(ILogger<Worker> logger) { _logger = logger; } protected override async Task ExecuteAsync( CancellationToken stoppingToken) { while (!stoppingToken.IsCancellationRequested) { _logger.LogInformation("Worker running at: {time}", DateTimeOffset.Now); await Task.Delay(1000, stoppingToken); } } } } 6. Start the project without debugging, note the current time is output once per second, and then press Ctrl + C to shut down the worker service, as shown in the following output: info: Northwind.Queue.Worker.Worker[0] Worker running at: 06/12/2023 08:25:02 +01:00 info: Microsoft.Hosting.Lifetime[0] Application started. Press Ctrl+C to shut down. info: Microsoft.Hosting.Lifetime[0] Hosting environment: Development info: Microsoft.Hosting.Lifetime[0] Content root path: C:\apps-services-net8\Chapter09\Northwind.Queue. Worker info: Northwind.Queue.Worker.Worker[0] Worker running at: 06/12/2023 08:25:03 +01:00 