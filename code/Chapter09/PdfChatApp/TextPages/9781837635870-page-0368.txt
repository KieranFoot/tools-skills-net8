Chapter 6 349 public abstract class PartiallyImplemented // C# 1 and later. { public abstract void Gamma(); // Must be implemented by derived type. public virtual void Delta() // Can be overridden. { // Implementation. } } public class FullyImplemented : PartiallyImplemented, ISomeImplementation { public void Alpha() { // Implementation. } public override void Gamma() { // Implementation. } } // You can only instantiate the fully implemented class. FullyImplemented a = new(); // All the other types give compile errors. PartiallyImplemented b = new(); // Compile error! ISomeImplementation c = new(); // Compile error! INoImplementation d = new(); // Compile error! Choosing between an interface and an abstract class You have now seen examples of implementing the concept of abstraction using either an interface or an abstract class. Which should you pick? Now that an interface can have default implementations for its members, is the abstract keyword for a class obsolete? Well, letâ€™s think about a real example. Stream is an abstract class. Would or could the .NET team use an interface for that today? 