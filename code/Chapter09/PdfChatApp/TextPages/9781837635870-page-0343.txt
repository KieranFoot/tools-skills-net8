Implementing Interfaces and Inheriting Classes 324 Defining reference and value types There are three C# keywords that you can use to define object types: class, record, and struct. All can have the same members, such as fields and methods. One difference between them is how mem- ory is allocated: • When you define a type using record or class, you define a reference type. This means that the memory for the object itself is allocated on the heap, and only the memory address of the object (and a little overhead) is stored on the stack. Reference types always use a little stack memory. record struct or struct, you define a value type. This means • When you define a type using that the memory for the object itself is allocated to the stack. If a struct uses field types that are not of the struct type, then those fields will be stored on the heap, meaning the data for that object is stored in both the stack and the heap. These are the most common struct types: • Number System types: byte, sbyte, short, ushort, int, uint, long, ulong, float, double, and decimal • Other System types: char, DateTime, DateOnly, TimeOnly, and bool • System.Drawing types: Color, Point, PointF, Size, SizeF, Rectangle, and RectangleF Almost all the other types are class types, including string aka System.String and object aka System.Object. Apart from the difference in terms of where in memory the data for a type is stored, the other major differences are that you cannot inherit from a struct, and struct objects are compared for equality using values instead of memory addresses. How reference and value types are stored in memory Imagine that you have a console app that calls some method that uses some reference and value type variables, as shown in the following code: void SomeMethod() { int number1 = 49; long number2 = 12; System.Drawing.Point location = new(x: 4, y: 5); Person kevin = new() { Name = "Kevin", Born = new(1988, 9, 23, 0, 0, 0, TimeSpace.Zero) }; Person sally; } 