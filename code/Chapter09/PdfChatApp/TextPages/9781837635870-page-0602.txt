Chapter 11 583 When programmers are first introduced to LINQ, they often believe that LINQ query comprehension syntax is LINQ but, ironically, that is one of the parts of LINQ that is optional! Building LINQ expressions with the Enumerable class The LINQ extension methods, such as Where and Select, are appended by the Enumerable static class IEnumerable<T>. A sequence contains zero, one, to any type, known as a sequence, that implements or more items. For example, an array of any type implements the IEnumerable<T> class, where T is the type of item in the array. This means that all arrays support LINQ to query and manipulate them. All generic collections, such as List<T>, Dictionary<TKey, TValue>, Stack<T>, and Queue<T>, im- plement IEnumerable<T>, so they can be queried and manipulated with LINQ too. Enumerable defines more than 50 extension methods, as summarized in Table 11.1: This table will be useful for you for future reference, but for now, you might want to brief- ly scan it to get a feel for what extension methods exist and come back later to review it properly. An online version of this table is available at the following link: https://github. com/markjprice/cs12dotnet8/blob/main/docs/ch11-linq-methods.md. Method(s) Description Get the first or last item in the sequence or throw an exception, or First, FirstOrDefault, Last, return the default value for the type, for example, 0 for an int and LastOrDefault null for a reference type, if there is not a first or last item. Where Return a sequence of items that match a specified filter. Return an item that matches a specific filter or throw an exception, Single, SingleOrDefault or return the default value for the type if there is not exactly one match. Return an item at a specified index position or throw an exception, or return the default value for the type if there is not an item at that ElementAt, position. Introduced in .NET 6 are overloads that can be passed an ElementAtOrDefault Index instead of an int, which is more efficient when working with Span<T> sequences. Project items into a different shape, that is, a different type, and Select, SelectMany flatten a nested hierarchy of items. OrderBy, OrderByDescending, Sort items by a specified field or property. ThenBy, ThenByDescending Order, OrderDescending Sort items by the item itself. Reverse Reverse the order of the items. GroupBy, GroupJoin, Join Group and/or join two sequences. 