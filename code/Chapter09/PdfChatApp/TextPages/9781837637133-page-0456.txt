Chapter 9 423 Hangfire has persistent storage and can be configured to use: • SQL Server • Redis • In-memory • Community-developed storage Let’s set up an empty ASP.NET Core project to host Hangfire: 1. Use your preferred code editor to create a new Web API controller-based project, as defined in the following list: web • Project template: ASP.NET Core Empty / • Solution file and folder: Chapter09 • Project file and folder: Northwind.Background.Hangfire • Configure for HTTPS: Selected. • Enable Docker: Cleared. • Do not use top-level statements: Cleared. 2. In the project file, treat warnings as errors, and add package references to work with Hangfire and persist its data to SQL Server, as shown in the following markup: <ItemGroup> <PackageReference Include="Hangfire.Core" Version="1.8.6" /> <PackageReference Include="Hangfire.SqlServer" Version="1.8.6" /> <PackageReference Include="Hangfire.AspNetCore" Version="1.8.6" /> <PackageReference Include="Microsoft.Data.SqlClient" Version="5.1.2" /> </ItemGroup> 3. Build the project to restore packages. Properties folder, in launchSettings.json, modify the applicationUrl of the profile 4. In the named https to use port 5095 for https and port 5096 for http, as highlighted in the following configuration: "profiles": { ... "https": { "commandName": "Project", "dotnetRunMessages": true, "launchBrowser": true, "launchUrl": "swagger", "applicationUrl": "https://localhost:5095;http://localhost:5096", "environmentVariables": { "ASPNETCORE_ENVIRONMENT": "Development" } 