Chapter 3 119 WriteLine($"e is {e}, f is {f}"); WriteLine($"e + f = {e + f}"); WriteLine($"e - f = {e - f}"); WriteLine($"e * f = {e * f}"); WriteLine($"e / f = {e / f}"); WriteLine($"e % f = {e % f}"); 2. Run the code and note the result, as shown in the following output: e is 11, f is 3 e + f = 14 e - f = 8 e * f = 33 e / f = 3 e % f = 2 To understand the divide / and modulo % operators when applied to integers, you need to think back to primary school. Imagine you have eleven sweets and three friends. How can you divide the sweets between your friends? You can give three sweets to each of your friends, and there will be two left over. Those two sweets are the modulus, also known as the remainder after dividing. If you had twelve sweets, then each friend would get four of them, and there would be none left over, so the remainder would be 0. 3. Add statements to declare and assign a value to a double variable named g to show the dif- ference between whole-number and real-number divisions, as shown in the following code: double g = 11.0; WriteLine($"g is {g:N1}, f is {f}"); WriteLine($"g / f = {g / f}"); 4. Run the code and note the result, as shown in the following output: g is 11.0, f is 3 g / f = 3.6666666666666665 If the first operand is a floating-point number, such as g with the value 11.0, then the divide operator 3.6666666666665, rather than a whole number. returns a floating-point value, such as Assignment operators You have already been using the most common assignment operator, =. To make your code more concise, you can combine the assignment operator with other operators like arithmetic operators, as shown in the following code: int p = 6; p += 3; // Equivalent to: p = p + 3; 