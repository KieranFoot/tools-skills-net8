Using Popular Third-Party Libraries 236 string city = "London"; string expectedCity = "London"; city.Should().StartWith("Lo") .And.EndWith("on") .And.Contain("do") .And.HaveLength(6); city.Should().NotBeNull() .And.Be("London") .And.BeSameAs(expectedCity) .And.BeOfType<string>(); city.Length.Should().Be(6); } } 6. Run the test: • In Visual Studio 2022, navigate to Test | Run All Tests. dotnet test. • In Visual Studio Code, in Terminal, enter 7. Note the test passes. TestString method, for the city variable, delete the last n in London. 8. In the 9. Run the test and note it fails, as shown in the following output: Expected city "Londo" to end with "on". 10. Add the n back in London. 11. Run the test again to confirm the fix. Making assertions about collections and arrays Now let’s continue by making assertions about collections and arrays: 1. In FluentExamples.cs, add a test method to explore collection assertions, as shown in the following code: [Fact] public void TestCollections() { string[] names = { "Alice", "Bob", "Charlie" }; names.Should().HaveCountLessThan(4, "because the maximum items should be 3 or fewer"); 