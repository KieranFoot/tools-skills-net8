Chapter 11 587 // Answer returned as a list of strings containing Pam and Jim. List<string> result2 = query2.ToList(); // Answer returned as we enumerate over the results. foreach (string name in query1) { WriteLine(name); // outputs Pam names[2] = "Jimmy"; // Change Jim to Jimmy. // On the second iteration Jimmy does not // end with an "m" so it does not get output. } 9. Run the console app and note the result, as shown in the following output: *** Deferred execution *** Pam Due to deferred execution, after outputting the first result, Pam, if the original array values change, then by the time we loop back around, there are no more matches because Jim has become Jimmy and does not end with an m, so only Pam is output. Before we get too deep into the weeds, let’s slow down and look at some common LINQ extension methods and how to use them, one at a time. Filtering entities using Where The most common reason for using LINQ is to filter items in a sequence using the Where extension method. Let’s explore filtering by defining a sequence of names and then applying LINQ operations to it: 1. In the project file, add an element to remove the System.Linq namespace from automatically being imported globally, as shown highlighted in the following markup: <ItemGroup> <Using Include="System.Console" Static="true" /> <Using Remove="System.Linq" /> </ItemGroup> 2. In Program.Functions.cs, add a new method named FilteringUsingWhere, as shown in the following code: private static void FilteringUsingWhere(string[] names) { } 3. If you are using Visual Studio 2022, navigate to Tools | Options, in the Options dialog box, nav- igate to Text Editor | C# | IntelliSense, clear the Show items from unimported namespaces check box, and then click OK. 