Chapter 5 249 Storing multiple values using collections Let’s now add a field to store a person’s children. This is an example of aggregation because children are instances of a class that is related to the current person, but they are not part of the person itself. We will use a generic List<T> collection type that can store an ordered collection of any type. You will learn more about collections in Chapter 8, Working with Common .NET Types. For now, just follow along: • In Person.cs, declare a new field to store multiple Person instances that represent the children of this person, as shown in the following code: public List<Person> Children = new(); List<Person> is read aloud as “list of Person,” for example, “the type of the property named Children is a list of Person instances.” We must ensure the collection is initialized to a new instance before we can add items to it; otherwise, the field will be null and throw runtime exceptions when we try to use any of its members, like Add. Understanding generic collections The angle brackets in the List<T> type is a feature of C# called generics that was introduced in 2005 with C# 2. It’s a fancy term for making a collection strongly typed, that is, the compiler knows spe- cifically what type of object can be stored in the collection. Generics improve the performance and correctness of your code. Strongly typed has a different meaning than statically typed. The old System.Collection types are statically typed to contain weakly typed System.Object items. The newer System.Collection.Generic types are statically typed to contain strongly typed <T> instances. Ironically, the term generics means we can use a more specific static type! 1. In Program.cs, add statements to add three children for Bob, and then show how many children he has and what their names are, as shown in the following code: // Works with all versions of C#. Person alfred = new Person(); alfred.Name = "Alfred"; bob.Children.Add(alfred); // Works with C# 3 and later. bob.Children.Add(new Person { Name = "Bella" }); // Works with C# 9 and later. bob.Children.Add(new() { Name = "Zoe" }); WriteLine($"{bob.Name} has {bob.Children.Count} children:"); 