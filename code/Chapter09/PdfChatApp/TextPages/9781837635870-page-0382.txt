Chapter 6 363 // ": IAlpha" means Gamma promises to implement all members of IAlpha. struct Gamma : IAlpha { void M1() { /* implementation */ } } // A type (a class in this case) implementing two interfaces. class Delta : IAlpha, IBeta { void M1() { /* implementation */ } void M2() { /* implementation */ } } // A sub class inheriting from a base aka super class. // ": Delta" means inherit all members from Delta. class Episilon : Delta { // This can be empty because this inherits M1 and M2 from Delta. // You could also add new members here. } // A class with one inheritable method and one abstract method // that must be implemented in sub classes. A class with at least // one abstract member must be decorated with the abstract keyword // to prevent instantiation. abstract class Zeta { // An implemented method would be inherited. void M3() { /* implementation */ } // A method that must be implemented in any type that inherits // this abstract class. abstract void M4(); } // A class inheriting the M3 method from Zeta but it must provide // an implementation for M4. 