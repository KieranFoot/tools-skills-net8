Handling Dates, Times, and Internationalization 270 { public DateTimeOffset UtcNow { return DateTimeOffset.UtcNow; } } } Finally, with .NET 8, the core .NET team has introduced a proper equivalent of the preceding code with an implementation that uses the system clock. Unfortunately, they do not define an interface. TimeProvider. Instead, they define an abstract class named Letâ€™s use it: 1. In the TimeFunctionsLib project, in DiscountService.cs, comment out the use of the UtcNow property, and add a statement to add a constructor-injected service, as highlighted in the following code: namespace Northwind.Services; public class DiscountService { private TimeProvider _timeProvider; public DiscountService(TimeProvider timeProvider) { _timeProvider = timeProvider; } public decimal GetDiscount() { // This has a dependency on the current time provided by the system. // var now = DateTime.UtcNow; var now = _timeProvider.GetUtcNow(); // This has a dependency on the current time provided by the system. return now.DayOfWeek switch { DayOfWeek.Saturday or DayOfWeek.Sunday => 0.2M, _ => 0M }; } } 