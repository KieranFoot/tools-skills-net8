Chapter 8 349 You can learn about the ASP.NET Core rate limiter at the following link: https://learn. microsoft.com/en-us/aspnet/core/performance/rate-limit. Protecting your web services from attacks is important. What about improving the performance of your web service? Is there anything we can do about that? Improving startup time and resources using native AOT Native AOT produces apps and services that are: • Self-contained, meaning they can run on systems that do not have the .NET runtime installed. Ahead-of-time (AOT) compiled to native code, meaning a faster startup time and a potentially • smaller memory footprint. This can have a positive impact when you have lots of instances (for example, when deploying massively scalable microservices) that are frequently stopped and restarted. Native AOT compiles intermediate code (IL) to native code at the time of publishing, rather than at runtime using the Just-In-Time (JIT) compiler. But native AOT apps and services must target a specific runtime environment like Windows x64 or Linux ARM. Since native AOT happens at publish time, while debugging and working live on a project in your code editor, it uses the runtime JIT compiler, not native AOT, even if you have AOT enabled in the project! But some features that are incompatible with native AOT will be disabled or throw exceptions, and a source analyzer is enabled to show warnings about potential code incompatibilities. Limitations of native AOT Native AOT has limitations, some of which are shown in the following list: • No dynamic loading of assemblies. System.Reflection.Emit. • No runtime code generation, for example, using • It requires trimming, which has its own limitations. • The assembly must be self-contained, so they must embed any libraries they call, which in- creases their size. Although your own apps and services might not use the features listed above, major parts of .NET itself do. For example, ASP.NET Core MVC (including Web API services that use controllers) and EF Core do runtime code generation to implement their functionality. The .NET teams are hard at work making as much of .NET compatible with native AOT as possible, as soon as possible. But .NET 8 only includes basic support for ASP.NET Core if you use minimal APIs, and no support for EF Core. 