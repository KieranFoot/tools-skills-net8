Working with Files, Streams, and Serialization 470 2. Run the code, view the result, and use your favorite file management tool to confirm that the directory has been created before pressing Enter to delete it, as shown in the following output: Working with: C:\Users\markj\OneDrive\Documents\NewFolder Does it exist? False Creating it... Does it exist? True Confirm the directory exists, and then press any key. Deleting it... Does it exist? False Managing files When working with files, you can statically import the file type, just as we did for the directory type. However, for the next example, we will not do so because it has some of the same methods as the directory type, and they would conflict. The file type has a short enough name not to matter in this case. The steps are as follows: 1. In Program.cs, write statements to do the following: a. Check for the existence of a file. b. Create a text file. c. Write a line of text to the file. d. Close the file to release system resources and file locks (this would normally be done try-finally statement block to ensure that the file is closed even if an excep- inside a tion occurs when writing to it). e. Copy the file to a backup. f. Delete the original file. g. Read the backup fileâ€™s contents and then close it: SectionTitle("Managing files"); // Define a directory path to output files starting // in the user's folder. string dir = Combine( GetFolderPath(SpecialFolder.Personal), "OutputFiles"); CreateDirectory(dir); // Define file paths. string textFile = Combine(dir, "Dummy.txt"); string backupFile = Combine(dir, "Dummy.bak"); WriteLine($"Working with: {textFile}"); 