Working with Files, Streams, and Serialization 482 3. Optionally, right-click in the Close method of xmlFileStream, select Go To Implementation, and note the implementations of the Dispose, Close, and Dispose(bool) methods, as shown in the following code: public void Dispose() => Close(); public virtual void Close() { // When initially designed, Stream required that all cleanup logic // went into Close(), but this was thought up before IDisposable // was added and never revisited. All subclasses // should put their cleanup now in Dispose(bool). Dispose(true); GC.SuppressFinalize(this); } protected virtual void Dispose(bool disposing) { // Note: Never change this to call other virtual methods on Stream // like Write, since the state on subclasses has already been // torn down. This is the last code to run on cleanup for a stream. } The Close and Dispose(bool) methods are virtual in the Stream class because they are designed to be overridden in a derived class, like FileStream, to do the work of releasing unmanaged resources. 4. Run the code and view the result, as shown in the following output: **** File Info **** The XML writer's unmanaged resources have been disposed. The file stream's unmanaged resources have been disposed. File: streams.xml Path: C:\cs12dotnet8\Chapter09\WorkingWithStreams\bin\Debug\net8.0 Size: 320 bytes. /------------------ <?xml version="1.0" encoding="utf-8"?> <callsigns> <callsign>Husker</callsign> <callsign>Starbuck</callsign> <callsign>Apollo</callsign> 