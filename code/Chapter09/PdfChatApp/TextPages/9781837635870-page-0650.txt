Chapter 12 631 The key benefit of using a CMS is that it provides a friendly content management user interface. Con- tent owners log in to the website and manage the content themselves. The content is then rendered and returned to visitors using ASP.NET Core MVC controllers and views, or via web service endpoints, known as a headless CMS, to provide that content to “heads” implemented as mobile or desktop apps, in-store touchpoints, or clients built with JavaScript frameworks or Blazor. This book does not cover .NET CMSs, so I have included links where you can learn more about them in the GitHub repository: https://github.com/markjprice/cs12dotnet8/blob/main/docs/book- links.md#net-content-management-systems. Building web applications using SPA frameworks Web applications are often built using technologies known as Single-Page Application (SPA) frame- works, such as Blazor, Angular, React, Vue, or a proprietary JavaScript library. They can make requests to a backend web service to get more data when needed and post updated data using common seri- alization formats such as XML and JSON. The canonical examples are Google web apps like Gmail, Maps, and Docs. With a web application, the client side uses JavaScript frameworks or Blazor to implement sophisticated user interactions, but most of the important processing and data access still happens on the server side, because the web browser has limited access to local system resources. JavaScript is loosely typed and is not designed for complex projects, so most JavaScript libraries these days use TypeScript, which adds strong typing to JavaScript and is designed with many modern lan- guage features for handling complex implementations. .NET SDK has project templates for JavaScript and TypeScript-based SPAs, but we will not spend any time learning how to build JavaScript and TypeScript-based SPAs in this book. Even though these SPAs are commonly used with ASP.NET Core as the backend, the focus of this book is on C# and not on other languages. In summary, C# and .NET can be used on both the server side and the client side to build websites, as shown in Figure 12.1: Figure 12.1: The use of C# and .NET to build websites on both the server and client side 