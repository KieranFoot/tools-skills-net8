Caching, Queuing, and Resilient Background Services 406 11. Define a class to represent the information that needs to be displayed in a view for sending a message including a couple of properties for showing message to the visitor when a message is successfully sent and when an error occurs, as shown in the following code: using Northwind.Queue.Models; // To use ProductQueueMessage. namespace Northwind.WebApi.Client.Mvc.Models; public class HomeSendMessageViewModel { public string? Info { get; set; } public string? Error { get; set; } public ProductQueueMessage? Message { get; set; } } 12. In Views\Home, in Index.cshtml, add a link to a page that will let the visitor send a message to a queue, as shown in the following markup: <p><a href="home/sendmessage">Send a message</a></p> 13. In HomeControllers.cs, import namespaces to work with RabbitMQ and serialize JSON, as shown in the following code: using RabbitMQ.Client; // To use ConnectionFactory and so on. using System.Text.Json; // To use JsonSerializer. 14. In HomeControllers.cs, add statements to define an action method that responds to a GET request by showing a web form to send a message, as shown in the following code: public IActionResult SendMessage() { return View(); } 15. In HomeControllers.cs, add statements to define an action method that responds to a POST request by sending a message from information in the form, as shown in the following code: // POST: home/sendmessage // Body: message=Hello&productId=1 [HttpPost] public async Task<IActionResult> SendMessage( string? message, int? productId) { HomeSendMessageViewModel model = new(); model.Message = new(); 