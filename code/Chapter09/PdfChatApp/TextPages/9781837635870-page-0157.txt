Controlling Flow, Converting Types, and Handling Exceptions 138 Due to the use of an iterator and its read-only Current property, the variable declared in a foreach statement cannot be used to modify the value of the current item. Storing multiple values in an array When you need to store multiple values of the same type, you can declare an array. For example, you may do this when you need to store four names in a string array. Working with single-dimensional arrays The code that you will write next will allocate memory for an array for storing four string values. It will then store string values at index positions 0 to 3 (arrays usually have a lower bound of zero, so the index of the last item is one less than the length of the array). We could visualize the array like this: 0 1 2 3 Kate Jack Rebecca Tom Table 3.1: Visualization of an array of four string values Good Practice: Do not assume that all arrays count from zero. The most common type of array in .NET is an szArray, a single-dimension zero-indexed array, and these use the normal [] syntax. But .NET also has mdArray, a multi-dimensional array, and they do not have to have a lower bound of zero. These are rarely used, but you should know they exist. Finally, it will loop through each item in the array using a for statement. Letâ€™s look at how to use an array: 1. Use your preferred code editor to add a new Console App / console project named Arrays to Chapter03 solution. the Program.cs, delete the existing statements and then type statements to declare and use an 2. In string values, as shown in the following code: array of string[] names; // This can reference any size array of strings. // Allocate memory for four strings in an array. names = new string[4]; // Store items at these index positions. names[0] = "Kate"; names[1] = "Jack"; names[2] = "Rebecca"; names[3] = "Tom"; 