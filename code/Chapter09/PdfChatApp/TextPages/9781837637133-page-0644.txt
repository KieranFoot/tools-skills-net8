Chapter 13 611 public ClientLoggingInterceptor(ILoggerFactory loggerFactory) { _logger = loggerFactory.CreateLogger<ClientLoggingInterceptor>(); } public override AsyncUnaryCall<TResponse> AsyncUnaryCall<TRequest, TResponse>(TRequest request, ClientInterceptorContext<TRequest, TResponse> context, AsyncUnaryCallContinuation<TRequest, TResponse> continuation) { _logger.LogWarning("Starting call. Type: {0}. Method: {1}.", context.Method.Type, context.Method.Name); return continuation(request, context); } } Interceptors form a pipeline, so in your interceptor, you must call the next inter- ceptor in the pipeline, represented by the continuation delegate, and pass it the request and context. 3. In the Northwind.Grpc.Client.Mvc project, in Program.cs, before any of the calls to add gRPC services, add a call to register the interceptor as a singleton service, as shown in the following code: // Register the interceptor before attaching it to a gRPC client. builder.Services.AddSingleton<ClientLoggingInterceptor>(); 4. In Program.cs, at the end of the statement to register the product client, add the interceptor, as shown highlighted in the following code: builder.Services.AddGrpcClient<Product.ProductClient>("Product", options => { options.Address = new Uri("https://localhost:5131"); }) .AddInterceptor<ClientLoggingInterceptor>(); You can attach the logging interceptor to as many clients as you want. 