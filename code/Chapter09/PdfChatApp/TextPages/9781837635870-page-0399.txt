Packaging and Distributing .NET Types 380 7. Use your preferred code editor to open the global.json file and review its contents, as shown in the following markup: { "sdk": { "version": "6.0.314" } } For example, to open it with Visual Studio Code, enter the command code global. json. 8. In the ControlSDK folder, at the command prompt or terminal, enter a command to create a class library project, as shown in the following command: dotnet new classlib 9. If you do not have the .NET 6 SDK installed, then you will see an error, as shown in the fol- lowing output: Could not execute because the application was not found or a compatible .NET SDK is not installed. 10. If you do have the .NET 6 SDK installed, then a class library project will be created that targets .NET 6 by default, as shown highlighted in the following markup: <Project Sdk="Microsoft.NET.Sdk"> <PropertyGroup> <TargetFramework>net6.0</TargetFramework> <ImplicitUsings>enable</ImplicitUsings> <Nullable>enable</Nullable> </PropertyGroup> </Project> Mixing SDKs and framework targets Many organizations decide to target a long-term support version of .NET to get up to three years of support from Microsoft. Doing this does not mean you lose the benefits of improvements to the C# language during the lifetime of the .NET runtime that you need to target. You can easily continue to target the .NET 8 runtime while installing and using future C# compilers, as shown in Figure 7.2 and illustrated in the following list: 