Handling Dates, Times, and Internationalization 268 2. In the TimeFunctionsLib project, rename Class1.cs to DiscountService.cs. DiscountService.cs, define a function to perform the calculation, as shown in the follow- 3. In ing code: namespace Northwind.Services; public class DiscountService { public decimal GetDiscount() { // This has a dependency on the current time provided by the system. var now = DateTime.UtcNow; return now.DayOfWeek switch { DayOfWeek.Saturday or DayOfWeek.Sunday => 0.2M, _ => 0M }; } } 4. In the Chapter07 solution, add a new xUnit Test Project/xunit project named TestingWithTimeProvider. TestingWithTimeProvider project, add a reference to the TimeFunctionsLib project, 5. In the as shown in the following markup: <ItemGroup> <ProjectReference Include= "..\TimeFunctionsLib\TimeFunctionsLib.csproj" /> </ItemGroup> 6. Build the TestingWithTimeProvider project. TestingWithTimeProvider project, rename Test1.cs to TimeTests.cs. 7. In the In TimeTests.cs, modify the statements to import the namespace for the discount service, and 8. then define two tests, one for workdays and one for weekends, as shown in the following code: using Northwind.Services; // To use DiscountService. namespace TestingWithTimeProvider; public class TimeTests { [Fact] 