Building Your Own Types with Object-Oriented Programming 262 2. Run the PeopleApp project and view the result, as shown in the following output: command is Hide!, number is 52.7, active is True You can even use named parameters to skip over optional parameters. 3. In Program.cs, add a statement to pass a string value for the command parameter using po- sitional order, skip the number parameter, and use the named active parameter, as shown in the following code: WriteLine(bob.OptionalParameters("Poke!", active: false)); 4. Run the PeopleApp project and view the result, as shown in the following output: command is Poke!, number is 0, active is False Good Practice: Although you can mix named and positional parameter values, most de- velopers prefer to read code that uses one or the other within the same method call. Mixing optional and required parameters At the moment, all the parameters in the OptionalParameters method are optional. What if one of them is required? 1. In Person.cs, add a fourth parameter without a default value to the OptionalParameters method, as highlighted in the following code: public string OptionalParameters(string command = "Run!", double number = 0.0, bool active = true, int count) 2. Build the project and note the compiler error: Error CS1737 Optional parameters must appear after all required parameters. 3. In the OptionalParameters method, move the count parameter before the optional parameters, as shown in the following code: public string OptionalParameters(int count, string command = "Run!", double number = 0.0, bool active = true) 4. In Program.cs, modify all the calls to the OptionalParameters method to pass an int value as the first argument, for example, as shown in the following code: WriteLine(bob.OptionalParameters(3)); WriteLine(bob.OptionalParameters(3, "Jump!", 98.5)); 