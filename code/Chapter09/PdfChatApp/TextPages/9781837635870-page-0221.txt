Writing, Debugging, and Testing Functions 202 End users are notoriously bad at remembering, admitting to, and then accurately describing what they were doing when an error occurred. You should not rely on them providing useful information to reproduce the problem so that you can understand what caused the problem and then fix it. Instead, you can instrument your code, which means logging events of interest and other data like timings. Good Practice: Add code throughout your application to log what is happening, especially when exceptions occur, so that you can review the logs and use them to trace the issue and fix the problem. Although we will see logging again in Chapter 10, Working with Data Using Entity Framework Core, and in the online section, Building Websites Using the Model-View-Con- troller Pattern, logging is a huge topic, so we can only cover the basics in this book. Understanding logging options .NET includes some built-in ways to instrument your code by adding logging capabilities. We will cover the basics in this book. But logging is an area where third parties have created a rich ecosystem of powerful solutions that extend what Microsoft provides. I cannot make specific recommendations because the best logging framework depends on your needs. But I include some common ones in the following list: • Apache log4net • NLog • Serilog I introduce structured logging using the third-party logging system Serilog in my com- panion book, Apps and Services with .NET 8, because the Serilog packages have the most downloads on https://www.nuget.org. Good Practice: When interviewing for a developer position, the logging system used by an organization is a good thing to ask about to show that you understand the importance of logging and you know that the specifics of the implementation are likely to be different depending on the organization. Instrumenting with Debug and Trace You have seen the use of the Console type and its WriteLine method writing out to the console window. There is also a pair of types named Debug and Trace that have more flexibility in where they write out to: • The Debug class is used to add logging that gets written only during development. Trace class is used to add logging that gets written during both development and runtime. • The 