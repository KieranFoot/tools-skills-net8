Building Websites Using ASP.NET Core Razor Pages 684 return RedirectToPage("/suppliers"); } else { return Page(); // Return to original page. } } While reviewing the preceding code, note the following: • We added a property named Supplier that is decorated with the [BindProperty] attribute so that we can easily connect HTML elements on the web page to properties in the Supplier class. • We added a method that responds to HTTP POST requests. It checks that all property val- ues conform to validation rules on the Supplier class entity model (such as [Required] and [StringLength]) and then adds the supplier to the existing table and saves the changes to the database context. This will generate a SQL statement to perform the insert into the database. Then, it redirects to the Suppliers page so that the visitor sees the newly added supplier. Defining a form to insert a new supplier Next, you will modify the Razor Page to define a form that a visitor can fill in and submit to insert a new supplier: 1. In Suppliers.cshtml, after the @model declaration, add Microsoft common tag helpers so that we can use the tag helper asp-for on this Razor Page, as shown in the following markup: @addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers 2. At the bottom of the file, add a form to insert a new supplier, and use the asp-for tag helper to bind the CompanyName, Country, and Phone properties of the Supplier class to the input box, as shown in the following markup: <div class="row"> <p>Enter details for a new supplier:</p> <form method="POST"> <div><input asp-for="Supplier.CompanyName" placeholder="Company Name" /></div> <div><input asp-for="Supplier.Country" placeholder="Country" /></div> <div><input asp-for="Supplier.Phone" placeholder="Phone" /></div> <input type="submit" /> </form> </div> 