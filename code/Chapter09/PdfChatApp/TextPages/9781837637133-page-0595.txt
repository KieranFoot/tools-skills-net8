Combining Data Sources Using GraphQL 562 NewUnitPrice = input.UnitPrice }; await eventSender.SendAsync(topicName: nameof(Subscription.OnProductDiscounted), message: productDiscount); } product.UnitPrice = input.UnitPrice; affectedRows = await db.SaveChangesAsync(); } return new UpdateProductPayload(product, updated: affectedRows == 1); } 6. In Program.cs, configure the GraphQL service to register the Subscription class and to store active subscriptions in-memory, as highlighted in the following code: builder.Services .AddGraphQLServer() .AddFiltering() .AddSorting() .AddSubscriptionType<Subscription>() .AddInMemorySubscriptions() .RegisterDbContext<NorthwindContext>() .AddQueryType<Query>() .AddMutationType<Mutation>(); As well as in-memory, you can use Redis and other data stores to keep track of active subscriptions. 7. Optionally, after building the app, configure the use of WebSockets, as shown in the following code: app.UseWebSockets(); // For subscriptions. This is optional because the GraphQL service can fall back to using SSE over https. 