Building and Securing Web Services Using Minimal APIs 318 await db.SaveChangesAsync(); return Results.NoContent(); } return Results.NotFound(); }).WithOpenApi() .Produces(StatusCodes.Status404NotFound) .Produces(StatusCodes.Status204NoContent); return app; } 13. In Program.cs, import the namespace to use the extension methods you just defined, as shown in the following code: using Packt.Extensions; // To use MapGets and so on. 14. In Program.cs, before the call to app.Run(), call your custom extension methods to map GET, POST, PUT, and DELETE requests, noting that you can override the default page size of 10 entities when requesting all products, as shown in the following code: app.MapGets() // Default pageSize: 10. .MapPosts() .MapPuts() .MapDeletes(); 15. In Program.cs, make sure the last statement in the file runs the web app, as shown in the following code: app.Run(); Testing web services using Swagger Now we can start the web service, see its documentation using Swagger, and perform basic manual testing: 1. If your database server is not running (for example, because you are hosting it in Docker, a virtual machine, or in the cloud), then make sure to start it. https profile: 2. Start the web service project using the • If you are using Visual Studio 2022, then select the https profile in the drop-down list and then navigate to Debug | Start Without Debugging or press Ctrl + F5. A web browser should navigate to the Swagger documentation web page automatically. dotnet run --launch- • If you are using Visual Studio Code, then enter the command , manually start a web browser, and navigate to the Swagger documen- profile https tation web page: https://localhost:5081/swagger. 