Managing NoSQL Data Using Azure Cosmos DB 136 Data storage design With relational databases, the schemas are rigid and inflexible. The Northwind database’s products are all food-related, so the schema might not change much. But if you are building a commerce system for a company that sells everything from clothes to electronic equipment to books, then a semi-structured data store like the following would be better: • Clothing: Sizes like S, M L, XL; brand; color. • Shoes: Sizes like 7, 8, 9; brand; color. • Televisions: Sizes like 40”, 52”; screen technology like OLED, LCD; brand. • Books: Number of pages; author; publisher. Being schema-less, Azure Cosmos DB can add new types of products with different structures and properties simply by adding a new product with that structure to a container. You will see examples of this in the code that you write later in this chapter. Migrating data to Cosmos DB The open-source Azure Cosmos DB Data Migration Tool can import data into Azure Cosmos DB from many different sources, including Azure Table Storage, SQL databases, MongoDB, text files in JSON and CSV formats, HBase, and more. We will not use this migration tool in this book, so if you think it will be useful to you, then you can learn how to use it at the following link: https://github.com/Azure/azure- documentdb-datamigrationtool. That’s quite enough theory. Now, let’s look at something more practical, how to create Cosmos DB resources so we can work with them in code. Creating Cosmos DB resources To see Azure Cosmos DB in action, first, we must create Cosmos DB resources. We can manually create them in the cloud using the Azure portal or programmatically create them using the Azure Cosmos DB .NET SDK. Azure Cosmos DB resources created in the cloud have a cost unless you use a trial or free account. You can also create Azure Cosmos DB resources locally using an emulator, which will cost you nothing. At the time of writing, the Azure Cosmos DB Emulator only supports Windows. If you want to use Linux or macOS, then you can try to use the Linux Emulator, which is currently in preview, or you could host the emulator in a Windows virtual machine. Using an emulator on Windows to create Azure Cosmos DB resources If you do not have a Windows computer, then just read through this section without completing the steps yourself, and then in the next section, you will use the Azure portal to create Azure Cosmos DB resources. 