Introducing Apps and Services with .NET 12 In 2012, Microsoft released Windows 8 with its Windows Store apps that run in a protected sandbox. In 2015, Microsoft released Windows 10 with an updated Windows Store app concept named Universal Windows Platform (UWP). UWP apps can be built using C++ and DirectX UI, JavaScript and HTML, or C# using a custom fork of modern .NET that is not cross-platform but provides full access to the underlying WinRT APIs. UWP apps can only execute on the Windows 10 or Windows 11 platforms, not earlier versions of Win- dows, but UWP apps can run on Xbox and Windows Mixed Reality headsets with motion controllers. Many Windows developers rejected Windows Store and UWP apps because they have limited access to the underlying system. Microsoft recently created Project Reunion and WinUI 3, which work together to allow Windows developers to bring some of the benefits of modern Windows development to their existing WPF apps and allow them to have the same benefits and system integrations that UWP apps have. This initiative is now known as Windows App SDK. More Information: This book does not cover Windows App SDK because it is not cross-plat- form. If you would like to learn more, you can start at the following link: https://learn. microsoft.com/en-us/windows/apps/windows-app-sdk/. Understanding modern .NET support for legacy Windows platforms The on-disk size of the .NET SDKs for Linux and macOS is about 330 MB. The on-disk size of the .NET SDK for Windows is about 440 MB. This is because it includes .NET Desktop Runtime, which allows the legacy Windows application platforms Windows Forms and WPF to be run on modern .NET. There are many enterprise applications built using Windows Forms and WPF that need to be main- tained or enhanced with new features, but until recently they were stuck on .NET Framework, which is now a legacy platform. With modern .NET and its .NET Desktop Runtime, these apps can now use the full modern capabilities of .NET. Windows desktop app developers can also optionally install the Windows Compatibility Pack. You can learn more about this at the following link: https://learn. microsoft.com/en-us/dotnet/core/porting/windows-compat-pack. Building cross-platform mobile and desktop apps There are two major mobile platforms, Apple’s iOS and Google’s Android, each with its own program- ming languages and platform APIs. There are also two major desktop platforms, Apple’s macOS and Microsoft’s Windows, each with its own programming languages and platform APIs, as shown in the following list: • iOS: Objective-C or Swift and UIkit • Android: Java or Kotlin and Android API • macOS: Objective-C or Swift and AppKit or Catalyst • Windows: C, C++, or many other languages and Win32 API or Windows App SDK Cross-platform mobile and desktop apps can be built once for the .NET Multi-platform App UI (MAUI) platform and then can run on many mobile and desktop platforms. 