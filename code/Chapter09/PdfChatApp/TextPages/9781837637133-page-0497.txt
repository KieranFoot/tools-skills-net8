Building Serverless Nanoservices Using Azure Functions 464 public class CheckGeneratorFunction { private readonly ILogger _logger; public CheckGeneratorFunction(ILoggerFactory loggerFactory) { _logger = loggerFactory.CreateLogger<NumbersToWordsFunction>(); } [Function(nameof(CheckGeneratorFunction))] [BlobOutput("checks-blob-container/check.png")] public byte[] Run( [QueueTrigger("checksQueue")] string message) { _logger.LogInformation("C# Queue trigger function executed."); _logger.LogInformation($"Body: {message}."); // Create a new blank image with a white background. using (Image<Rgba32> image = new(width: 1200, height: 600, backgroundColor: new Rgba32(r: 255, g: 255, b: 255, a: 100))) { // Load the font file and create a large font. FontCollection collection = new(); FontFamily family = collection.Add( @"fonts\Caveat\static\Caveat-Regular.ttf"); Font font = family.CreateFont(72); string amount = message.Body.ToString(); DrawingOptions options = new() { GraphicsOptions = new() { ColorBlendingMode = PixelColorBlendingMode.Multiply } }; // Define some pens and brushes. Pen blackPen = Pens.Solid(Color.Black, 2); 