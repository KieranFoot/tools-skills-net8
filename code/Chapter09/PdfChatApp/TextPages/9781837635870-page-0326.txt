Chapter 6 307 Just because it is good practice to use generic collection types in preference to non-generic collection types does not mean the more general case is also true. Non-generic non-collection types and other types that do not need the flexibility to work with any type are used all the time. Collection types just happen to be the most common type that benefits from generics. Raising and handling events Methods are often described as actions that an object can perform, either on itself or on related objects. List<T> can add an item to itself or clear itself, and File can create or delete a file in For example, the filesystem. Events are often described as actions that happen to an object. For example, in a user interface, Button has a Click event, a click being something that happens to a button, and FileSystemWatcher listens Created and Deleted, which are trig- to the filesystem for change notifications and raises events like gered when a directory or file changes. Another way to think of events is that they provide a way of exchanging messages between objects. Events are built on delegates, so letâ€™s start by having a look at what delegates are and how they work. Calling methods using delegates You have already seen the most common way to call or execute a method: using the . operator to access the method using its name. For example, Console.WriteLine tells the Console type to call its WriteLine method. The other way to call or execute a method is to use a delegate. If you have used languages that support function pointers, then think of a delegate as being a type-safe method pointer. In other words, a delegate contains the memory address of a method that must match the same sig- nature as the delegate, enabling it to be called safely with the correct parameter types. The code in this section is illustrative and not meant to be typed into a project. You will explore code like this in the next section, so for now just read the code and try to under- stand its meaning. For example, imagine there is a method in the Person class that must have a string type passed as its only parameter, and it returns an int type, as shown in the following code: public class Person { public int MethodIWantToCall(string input) { return input.Length; // It doesn't matter what the method does. } 