Chapter 8 427 Some of the preceding methods are static methods. This means that the method can only be called from the type, not from a variable instance. In the preceding table, I indicated the static methods by prefixing them with string., as in string.Format. Let’s explore some of these methods: 1. Add statements to take an array of string values and combine them back together into a sin- gle string variable with separators using the Join method, as shown in the following code: string recombined = string.Join(" => ", citiesArray); WriteLine(recombined); 2. Run the code and view the result, as shown in the following output: Paris => Tehran => Chennai => Sydney => New York => Medellín 3. Add statements to use positioned parameters and interpolated string formatting syntax to output the same three variables twice, as shown in the following code: string fruit = "Apples"; decimal price = 0.39M; DateTime when = DateTime.Today; WriteLine($"Interpolated: {fruit} cost {price:C} on {when:dddd}."); WriteLine(string.Format("string.Format: {0} cost {1:C} on {2:dddd}.", arg0: fruit, arg1: price, arg2: when)); Some code editors like JetBrains Rider will warn you about boxing operations. These are slow but not a problem in this scenario. To avoid boxing, call ToString on price and when. 4. Run the code and view the result, as shown in the following output: Interpolated: Apples cost $0.39 on Friday. string.Format: Apples cost $0.39 on Friday. Note that we could have simplified the second statement because Console.WriteLine supports the same format code as string.Format, as shown in the following code: WriteLine("WriteLine: {0} cost {1:C} on {2:dddd}.", arg0: fruit, arg1: price, arg2: when); 