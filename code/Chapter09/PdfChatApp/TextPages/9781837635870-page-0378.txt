Chapter 6 359 Figure 6.6: Extension methods appear in IntelliSense alongside instance methods 4. Run the PeopleApp project and view the result, which will be the same as before. Good Practice: Extension methods cannot replace or override existing instance methods. You cannot, for example, redefine the Insert method. The extension method will appear as an overload in IntelliSense, but an instance method will be called in preference to an extension method with the same name and signature. Although extension methods might not seem to give a big benefit, in Chapter 11, Querying and Manip- ulating Data Using LINQ, you will see some extremely powerful uses of extension methods. Summarizing custom type choices Now that we have covered OOP and the C# features that enable you to define your own types, let’s summarize what you’ve learned. Categories of custom types and their capabilities Categories of custom types and their capabilities are summarized in the following table: Type Instantiation Inheritance Equality Memory class Yes Single Reference Heap sealed class Yes None Reference Heap abstract class No Single Reference Heap record or record class Yes Single Value Heap struct or record struct Yes None Value Stack interface No Multiple Reference Heap It is best to think about these differences by starting with the “normal” case and then spotting the differences in other cases. For example, a “normal” class can be instantiated with new, it supports single inheritance, it uses memory reference equality, and its state is stored in heap memory. 