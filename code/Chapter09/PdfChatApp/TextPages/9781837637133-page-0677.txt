Building Web User Interfaces Using ASP.NET Core 644 The Accept-Language header uses commas as separators between culture codes. Each culture code can be neutral (just a language) or specific (language and region), and each can have a quality value (q) between 0.0 and 1.0 (default). The preceding Accept-Language header example should therefore be read as follows: • en-US: English language in the United States ranked highest at 1.0 (if q not explicitly set). en;q=0.9: English language anywhere in the world ranked at 0.9. • fr-FR;q=0.8: French language in France ranked at 0.8. • fr;q=0.7: French language anywhere in the world ranked at 0.7. • en-GB;q=0.6: English language in United Kingdom ranked lowest at 0.6. • Defining web user interfaces with Tag Helpers Tag Helpers make it easier to make HTML elements dynamic. The markup is cleaner and easier to read, edit, and maintain than if you use HTML Helpers. However, Tag Helpers do not completely replace HTML Helpers because there are some things that can only be achieved with HTML Helpers, like rendering output that contains multiple nested tags. Tag Helpers also cannot be used in Razor components. So, you must learn HTML Helpers and treat Tag Helpers as an optional choice that is better in some scenarios. Tag Helpers are especially useful for Front End (FE) developers who primarily work with HTML, CSS, and JavaScript because the FE developer does not have to learn C# syntax. Tag Helpers just use what look like normal HTML attributes on elements. The attribute names and values can also be selected from IntelliSense if your code editor supports that; both Visual Studio 2022 and Visual Studio Code do. Comparing HTML Helpers and Tag Helpers For example, to render a linkable hyperlink to a controller action, you could use an HTML Helper method, as shown in the following markup: @Html.ActionLink("View our privacy policy.", "Privacy", "Index") To make it clearer how it works, you could use named parameters, as shown in the following code: @Html.ActionLink(linkText: "View our privacy policy.", action: "Privacy", controller: "Index") But using a Tag Helper would be even clearer and cleaner for someone who works more with HTML than C#, as shown in the following markup: <a asp-action="Privacy" asp-controller="Home">View our privacy policy.</a> All three examples above generate the same rendered HTML element, as shown in the following markup: <a href="/home/privacy">View our privacy policy.</a> 