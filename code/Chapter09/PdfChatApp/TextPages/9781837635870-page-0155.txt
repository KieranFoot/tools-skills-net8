Controlling Flow, Converting Types, and Handling Exceptions 136 Enter your password: Pa$$w0rd Correct! 3. As an optional challenge, add statements so that the user can only make three attempts before an error message is displayed. 4. At this point, you might want to comment out the code for this section so you do not have to keep entering a password every time you run the console app! Looping with the for statement The for statement is like while, except that it is more succinct. It combines: • An optional initializer expression, which executes once at the start of the loop. • An optional conditional expression, which executes on every iteration at the start of the loop true or it is missing, to check whether the looping should continue. If the expression returns the loop will execute again. • An optional iterator expression, which executes on every loop at the bottom of the statement. This is often used to increment a counter variable. for statement is commonly used with an integer counter. Let’s explore some code: The 1. Type a for statement to output the numbers 1 to 10, as shown in the following code: for (int y = 1; y <= 10; y++) { WriteLine(y); } 2. Run the code to view the result, which should be the numbers 1 to 10. for statement to output the numbers 0 to 10, incrementing by 3, as shown in the 3. Add another following code: for (int y = 0; y <= 10; y += 3) { WriteLine(y); } 4. Run the code to view the result, which should be the numbers 0, 3, 6, and 9. 5. Optionally, experiment with changing the initializer expression, conditional expression, or iterator expression to see their effects. Only change one thing at a time so that you can clearly see the effect produced. Looping with the foreach statement The foreach statement is a bit different from the previous three iteration statements. 