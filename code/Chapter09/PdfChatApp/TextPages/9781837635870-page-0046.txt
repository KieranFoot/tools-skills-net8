Chapter 1 27 If you never want to try Visual Studio Code or the dotnet command-line tool, then please feel free to skip this section, and then continue with the Making good use of the GitHub repository for this book section. Both the instructions and screenshots in this section are for Windows, but the same actions will work with Visual Studio Code on the macOS and Linux variants. The main differences will be native command-line actions such as deleting a file: both the command and the path are likely to be different on Windows or macOS and Linux. Luckily, the dotnet CLI tool itself and its commands are identical on all platforms. Writing code using Visual Studio Code Letâ€™s get started writing code! 1. Start your favorite tool for working with the filesystem, for example, File Explorer on Windows or Finder on Mac. C: drive on Windows, your user folder on macOS or Linux (mine are named 2. Navigate to your markjprice and home/markjprice), or any directory or drive in which you want to save your projects. cs12dotnet8. (If you completed the section for Visual Studio 2022, 3. Create a new folder named then this folder will already exist.) cs12dotnet8 folder, create a new folder named Chapter01-vscode. 4. In the If you did not complete the section for Visual Studio 2022, then you could name this folder Chapter01, but I will assume you will want to complete both sections and therefore need to use a non-conflicting name. 5. In the Chapter01-vscode folder, open the command prompt or terminal. For example, on Windows, right-click on the folder and then select Open in Terminal. At the command prompt or terminal, use the dotnet CLI to create a new solution named 6. Chapter01, as shown in the following command: dotnet new sln --name Chapter01 You can use either -n or --name as the switch to specify a name. The default would match the name of the folder, for example, Chapter01-vscode. 7. Note the result, as shown in the following output: The template "Solution File" was created successfully. 