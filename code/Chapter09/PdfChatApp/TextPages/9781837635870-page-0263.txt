Building Your Own Types with Object-Oriented Programming 244 There are four member access modifier keywords, and two combinations of access modifier keywords that you can apply to a class member, like a field or method. Member access modifiers apply to an individual member. They are similar to but separate from type access modifiers that apply to the whole type. The six possible combinations are shown in Table 5.1: Member Access Description Modifier private The member is accessible inside the type only. This is the default. internal The member is accessible inside the type and any type in the same assembly. protected The member is accessible inside the type and any type that inherits from the type. public The member is accessible everywhere. The member is accessible inside the type, any type in the same assembly, and any internal type that inherits from the type. Equivalent to a fictional access modifier named protected internal_or_protected. The member is accessible inside the type and any type that inherits from the private type and is in the same assembly. Equivalent to a fictional access modifier named protected internal_and_protected. This combination is only available with C# 7.2 or later. Table 5.1: Six member access modifiers Good Practice: Explicitly apply one of the access modifiers to all type members, even if you want to use the implicit access modifier for members, which is private. Addition- ally, fields should usually be private or protected, and you should then create public properties to get or set the field values. This is because the property then controls access. You will do this later in the chapter. Setting and outputting field values Now we will use those fields in your code: 1. In Program.cs, after instantiating bob, add statements to set his name and date and time of birth, and then output those fields formatted nicely, as shown in the following code: bob.Name = "Bob Smith"; bob.Born = new DateTimeOffset( year: 1965, month: 12, day: 22, hour: 16, minute: 28, second: 0, offset: TimeSpan.FromHours(-5)); // US Eastern Standard Time. WriteLine(format: "{0} was born on {1:D}.", // Long date. arg0: bob.Name, arg1: bob.Born); 