Controlling Flow, Converting Types, and Handling Exceptions 146 Arrays are useful for temporarily storing multiple items, but collections are a more flexible option when adding and removing items dynamically. You don’t need to worry about collections right now, as we will cover them in Chapter 8, Working with Common .NET Types. ToArray extension method, which we You can convert any sequence of items into an array using the will cover in Chapter 11, Querying and Manipulating Data Using LINQ. Good Practice: If you do not need to dynamically add and remove items, then you should use an array instead of a collection like List<T> because arrays are more efficient in memory use and the items are stored contiguously, which can improve performance. Casting and converting between types You will often need to convert values of variables between different types. For example, data input is often entered as text in the console, so it is initially stored in a variable of the string type, but it then needs to be converted into a date/time, number, or some other data type, depending on how it should be stored and processed. Sometimes you will need to convert between number types, like between an integer and a floating point, before performing calculations. Converting is also known as casting, and it has two varieties: implicit and explicit. Implicit casting happens automatically, and it is safe, meaning that you will not lose any information. Explicit casting must be performed manually because it may lose information, for example, the precision of a number. By explicitly casting, you are telling the C# compiler that you understand and accept the risk. Casting numbers implicitly and explicitly Implicitly casting an int variable into a double variable is safe because no information can be lost, as the following shows: 1. Use your preferred coding tool to add a new Console App / console project named CastingConverting to the Chapter03 solution. Program.cs, delete the existing statements, then type statements to declare and assign an 2. In int variable and a double variable, and then implicitly cast the integer’s value when assigning it to the double variable, as shown in the following code: int a = 10; double b = a; // An int can be safely cast into a double. WriteLine($"a is {a}, b is {b}"); 3. Type statements to declare and assign a double variable and an int variable, and then implicitly cast the double value when assigning it to the int variable, as shown in the following code: double c = 9.8; int d = c; // Compiler gives an error if you do not explicitly cast. WriteLine($"c is {c}, d is {d}"); 