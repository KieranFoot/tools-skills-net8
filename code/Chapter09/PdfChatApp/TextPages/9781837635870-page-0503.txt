Working with Files, Streams, and Serialization 484 You can even simplify the code further by not explicitly specifying the braces and indentation for the using statements, as shown in the following code: using FileStream file2 = File.OpenWrite( Path.Combine(path, "file2.txt")); using StreamWriter writer2 = new(file2); try { writer2.WriteLine("Welcome, .NET!"); } catch(Exception ex) { WriteLine($"{ex.GetType()} says {ex.Message}"); } Compressing streams XML is relatively verbose, so it takes up more space in bytes than plain text. Let’s see how we can squeeze the XML using a common compression algorithm known as GZIP. In .NET Core 2.1, Microsoft introduced an implementation of the Brotli compression algorithm. In performance, Brotli is like the algorithm used in DEFLATE and GZIP, but the output is about 20% denser. Let’s compare the two compression algorithms: 1. Add a new class file named Program.Compress.cs. In Program.Compress.cs, write statements to use instances of GZipStream or BrotliStream to 2. create a compressed file containing the same XML elements as before, and then decompress it while reading it and outputting to the console, as shown in the following code: using Packt.Shared; // To use Viper. using System.IO.Compression; // To use BrotliStream, GZipStream. using System.Xml; // To use XmlWriter, XmlReader. partial class Program { private static void Compress(string algorithm = "gzip") { // Define a file path using the algorithm as file extension. string filePath = Combine( CurrentDirectory, $"streams.{algorithm}"); FileStream file = File.Create(filePath); 