Querying and Manipulating Data Using LINQ 584 Skip, SkipWhile Skip a number of items; or skip when an expression is true. Take a number of items, or take items while an expression is true. Introduced in .NET 6 is an overload that can be passed a Range, for Take, TakeWhile example, Take(range: 3..^5), meaning take a subset starting 3 items in from the start and ending 5 items in from the end, or instead of Skip(4) you could use Take(4..). Aggregate, Average, Count, Calculate aggregate values. LongCount, Max, Min, Sum Count() checks if a Count property is implemented on the sequence and returns its value, or it enumerates the entire TryGetNonEnumeratedCount sequence to count its items. Introduced in .NET 6, this method only checks for Count; if it is missing, it returns false and sets the out parameter to 0 to avoid a potentially poor-performing operation. Return true if all or any of the items match the filter, or if the All, Any, Contains sequence contains a specified item. Cast items into a specified type. It is useful to convert non-generic Cast<T> objects in to a generic type in scenarios where the compiler would otherwise complain. OfType<T> Remove items that do not match a specified type. Distinct Remove duplicate items. Perform operations that return sets. Sets cannot have duplicate Except, Intersect, Union items. Although the inputs can be any sequence and so the inputs can have duplicates, the result is always a set. Allow the comparison to be performed on a subset of the items DistinctBy, ExceptBy, rather than all the items. For example, instead of removing IntersectBy, UnionBy, MinBy, duplicates with Distinct by comparing an entire Person object, MaxBy you could remove duplicates with DistinctBy by comparing just their LastName and DateOfBirth. Divide a sequence into sized batches. The size parameter specified Chunk the number of items in each chunk. The last chunk will contain the remaining items and could be less than size. Append, Concat, Prepend Perform sequence-combining operations. Perform a match operation on two or three sequences based on Zip the position of items, for example, the item at position 1 in the first sequence matches the item at position 1 in the second sequence. Convert the sequence into an array or collection. These are the only ToArray, ToList, extension methods that force the execution of a LINQ expression ToDictionary, ToHashSet, immediately rather than wait for deferred execution, which you will ToLookup learn about shortly. Table 11.1: LINQ extension methods 