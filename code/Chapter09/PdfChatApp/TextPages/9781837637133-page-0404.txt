Chapter 9 371 This is why caching is so important. Caching is about temporarily storing data as close to where it will be needed as possible. Caching with ASP.NET Core Caching can enable our systems to copy some data from a remote data center to a local data center, or from a server or disk to memory. Caches store data as key-value pairs. However, one of the hardest parts of caching is getting the balance right between storing enough data and keeping it fresh. The more data we copy, the more resources we use. And we need to consider how we will keep the copies synchronized with the original data. General caching guidelines Caching works best with data that costs a lot to generate and does not change often. Follow these guidelines when caching: • Your code should never depend on cached data. It should always be able to get the data from the original source when the data is not found in the cache. • Wherever you cache data (in-memory or in a database) it is a limited resource, so deliberately limit the amount of data cached and for how long by implementing expirations and size limits. You should monitor cache hits (when data is successfully found in the cache) to obtain the right balance for your specific scenarios. In the coding tasks in this section, you will implement all of these guidelines. Let’s start by reviewing the caching technologies built-in to ASP.NET Core. Building a controller-based Web API service To explore various caching technologies, let’s build a basic web service: 1. Use your preferred code editor to create a new Web API controller-based project, as defined in the following list: • Project template: ASP.NET Core Web API / webapi --use-controllers • Solution file and folder: Chapter09 • Project file and folder: Northwind.WebApi.Service • Authentication type: None • Configure for HTTPS: Selected • Enable Docker: Cleared • Use controllers: Selected • Enable OpenAPI support: Selected • Do not use top-level statements: Cleared 