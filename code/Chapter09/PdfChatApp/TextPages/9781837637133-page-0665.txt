Building Web User Interfaces Using ASP.NET Core 632 Prototyping with Bootstrap Bootstrap is the world’s most popular framework for building responsive, mobile-first websites. It combines CSS stylesheets with JavaScript libraries to implement its functionality. It is a good choice for prototyping a website user interface, although before going public you might want to hire a web designer to build a custom Bootstrap theme or replace it with a completely custom set of CSS stylesheets to give your website a distinct brand. Bootstrap is like Marmite. Some developers love it; some hate it. Good reasons to use Bootstrap include: • It saves time. • It is customizable. • It is open-source. • It is well documented officially and has lots of answers about it on sites like Stack Overflow. But implementing Bootstrap without care has the following negatives: • Your website will look generic. • Bootstrap themes do not work well with the default views built-in with ASP.NET Core Identity. • It is heavy compared to a hand-crafted solution. In the previous edition of this book, I included about five pages reviewing some of the features of Bootstrap that are most used. But Bootstrap is not .NET, and the second edition is already crammed with content, so I have moved the Bootstrap content to an online-only resource section. You can read it at the following link: https://github.com/markjprice/apps-services-net8/blob/main/docs/ ch14-bootstrap.md. Good Practice: As well as defining your own styles, base your styles on a common library, such as Bootstrap, that implements responsive design. However, if you are building a website that needs a distinct identity or brand, make sure you use Bootstrap’s theming support. Do not just accept the defaults. Understanding Razor syntax and expressions Before we customize the home page view, let’s review an example Razor file. The file has an initial Razor code block that instantiates an order with price and quantity and then outputs information about the order on the web page, as shown in the following markup: @{ Order order = new() { OrderId = 123, Product = "Sushi", Price = 8.49M, Quantity = 3 