Multitasking and Concurrency 186 5. Add a new class file named Program.Methods.cs. In Program.Methods.cs, delete any existing statements and then define two methods that both 6. loop five times, waiting for a random interval of up to two seconds and appending either A or B to the shared message resource, as shown in the following code: partial class Program { private static void MethodA() { for (int i = 0; i < 5; i++) { // Simulate two seconds of work on the current thread. Thread.Sleep(Random.Shared.Next(2000)); // Concatenate the letter "A" to the shared message. SharedObjects.Message += "A"; // Show some activity in the console output. Write("."); } } private static void MethodB() { for (int i = 0; i < 5; i++) { Thread.Sleep(Random.Shared.Next(2000)); SharedObjects.Message += "B"; Write("."); } } } 7. In Program.cs, delete the existing statements. Add statements to import the namespace for Stopwatch, and statements to execute both methods on separate threads diagnostic types like using a pair of tasks, and wait for them to complete before outputting the elapsed milliseconds, as shown in the following code: using System.Diagnostics; // To use Stopwatch. WriteLine("Please wait for the tasks to complete."); 