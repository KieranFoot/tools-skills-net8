Working with Data Using Entity Framework Core 552 ORDER BY "c"."CategoryId" Beverages has 12 products. Condiments has 12 products. Confections has 13 products. Dairy Products has 10 products. Grains/Cereals has 7 products. Meat/Poultry has 6 products. Produce has 5 products. Seafood has 12 products. Logging with query tags When logging LINQ queries, it can be tricky to correlate log messages in complex scenarios. EF Core 2.2 introduced the query tags feature to help by allowing you to add SQL comments to the log. You can annotate a LINQ query using the TagWith method, as shown in the following code: IQueryable<Product>? products = db.Products? .TagWith("Products filtered by price and sorted.") .Where(product => product.Cost > price) .OrderByDescending(product => product.Cost); This will add a SQL comment to the log, as shown in the following output: -- Products filtered by price and sorted. Getting a single entity There are two LINQ methods to get a single entity: First and Single. It is important to understand the difference between them when using an EF Core database provider. Let’s see an example: 1. In Program.Queries.cs, define a GettingOneProduct method, and add statements to do the following, as shown in the following code: • Create an instance of the Northwind class that will manage the database. • Prompt the user for a product ID. First and Single methods. • Create a query for products with that product ID using the • Write an SQL statement for each query to the console: private static void GettingOneProduct() { using NorthwindDb db = new(); SectionTitle("Getting a single product"); string? input; 