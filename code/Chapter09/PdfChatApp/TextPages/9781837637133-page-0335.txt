Handling Dates, Times, and Internationalization 302 3. In Program.cs, delete the existing statements, add statements to get the current instant in time, and convert it to various Noda Time types, including UTC, a couple of time zones, and local time, as shown in the following code: using NodaTime; // To use SystemClock, Instant and so on. SectionTitle("Converting Noda Time types"); // Get the current instant in time. Instant now = SystemClock.Instance.GetCurrentInstant(); WriteLine($"Now (Instant): {now}"); WriteLine(); ZonedDateTime nowInUtc = now.InUtc(); WriteLine($"Now (DateTimeZone): {nowInUtc.Zone}"); WriteLine($"Now (ZonedDateTime): {nowInUtc}"); WriteLine($"Now (DST): {nowInUtc.IsDaylightSavingTime()}"); WriteLine(); // Use the Tzdb provider to get the time zone for US Pacific. // To use .NET compatible time zones, use the Bcl provider. DateTimeZone zonePT = DateTimeZoneProviders.Tzdb["US/Pacific"]; ZonedDateTime nowInPT = now.InZone(zonePT); WriteLine($"Now (DateTimeZone): {nowInPT.Zone}"); WriteLine($"Now (ZonedDateTime): {nowInPT}"); WriteLine($"Now (DST): {nowInPT.IsDaylightSavingTime()}"); WriteLine(); DateTimeZone zoneUK = DateTimeZoneProviders.Tzdb["Europe/London"]; ZonedDateTime nowInUK = now.InZone(zoneUK); WriteLine($"Now (DateTimeZone): {nowInUK.Zone}"); WriteLine($"Now (ZonedDateTime): {nowInUK}"); WriteLine($"Now (DST): {nowInUK.IsDaylightSavingTime()}"); WriteLine(); LocalDateTime nowInLocal = nowInUtc.LocalDateTime; 