Multitasking and Concurrency 174 In this chapter, we will use the Task type to manage threads at a higher abstraction level. Threads may have to compete for and wait for access to shared resources, such as variables, files, and database objects. There are types for managing this that you will see in action later in this chapter. Depending on the task, doubling the number of threads (workers) to perform a task does not halve the number of seconds that it will take to complete that task. In fact, it can increase the duration of the task due to resource contention, as shown in Figure 5.1: Figure 5.1: A tweet about tasks in the real world Good Practice: Never assume that more threads will improve performance! Run perfor- mance tests on a baseline code implementation without multiple threads, and then again on a code implementation with multiple threads. You should also perform performance tests in a staging environment that is as close as possible to the production environment. Running tasks asynchronously To understand how multiple tasks can be run simultaneously (at the same time), we will create a console app that needs to execute three methods. There will be three methods that need to be executed: the first takes 3 seconds, the second takes 2 seconds, and the third takes 1 second. To simulate that work, we can use the Thread class to tell the current thread to go to sleep for a specified number of milliseconds. 