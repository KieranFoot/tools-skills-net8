Introducing Apps and Services with .NET 8 Building websites and apps using ASP.NET Core Websites are made up of multiple web pages loaded statically from the filesystem or generated dy- namically by a server-side technology such as ASP.NET Core. A web browser makes GET requests using Unique Resource Locators (URLs), which identify each page and can manipulate data stored on the server using POST, PUT, and DELETE requests. With many websites, the web browser is treated as a presentation layer, with almost all the processing performed on the server side. Some JavaScript might be used on the client side to implement some presentation features, such as carousels, or to perform data validation. ASP.NET Core provides multiple technologies for building websites: • ASP.NET Core Razor Pages can dynamically generate HTML for simple websites. • ASP.NET Core MVC is an implementation of the Model-View-Controller (MVC) design pattern, which is popular for developing complex websites. You will learn about using it to build user interfaces in Chapter 14, Building Web User Interfaces Using ASP.NET Core. Razor class libraries provide a way to package reusable functionality for ASP.NET Core projects • including user interface components. Blazor lets you build user interface components using C# and .NET and then run them in a web • browser or embedded web component instead of a JavaScript-based UI framework like Angular, React, and Vue. You will learn about Blazor in detail in Chapter 15, Building Web Components Using Blazor, and an online-only section titled Leveraging Open-Source Blazor Component Libraries. Blazor is not just for building websites; it can also be used to create hybrid mobile and desktop apps when combined with .NET MAUI. This book assumes that you are already familiar with the fundamentals of ASP.NET Core development, so although the book reviews the basics, it quickly moves on to intermediate topics. Building web and other services There are no formal definitions, but services are sometimes described based on their complexity: • Service: All functionality needed by a client app in one monolithic service. • Microservice: Multiple services that each focus on a smaller set of functionalities. The guid- ing principle for what the boundary of functionality should be for a microservice is that each microservice should own its own data. Only that microservice should read/write to that data. If you have a data store that multiple services access, then they are not microservices. • Nanoservice: A single function provided as a service. Unlike services and microservices that are hosted 24/7/365, nanoservices are often inactive until called upon to reduce resources and costs. For this reason, they are also known as serverless services. 