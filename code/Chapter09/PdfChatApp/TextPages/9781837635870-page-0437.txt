Working with Common .NET Types 418 .NET 6 and earlier used a different default format for complex numbers: (4, 2) added to (3, 7) is (7, 9). In .NET 7 and later, the default format was changed to use angle brackets and semi-colons because some cultures use round brackets to indicate negative numbers and use commas for decimal numbers. At the time of writing, the official documentation has not been updated to use the new format, as shown at the following link: https://learn.microsoft.com/en-us/dotnet/ api/system.numerics.complex.tostring. Generating random numbers for games and similar apps In scenarios that don’t need truly random numbers like games, you can create an instance of the Random class, as shown in the following code example: Random r = new(); Random has a constructor with a parameter for specifying a seed value used to initialize its pseudo-ran- dom number generator, as shown in the following code: Random r = new(Seed: 46378); As you learned in Chapter 2, Speaking C#, parameter names should use camel case. The developer who defined the constructor for the Random class broke this convention. The parameter name should be seed, not Seed. Good Practice: Shared seed values act as a secret key, so if you use the same random number generation algorithm with the same seed value in two applications, then they can generate the same “random” sequences of numbers. Sometimes this is necessary, for example, when synchronizing a GPS receiver with a satellite, or when a game needs to randomly generate the same level. But usually, you want to keep your seed secret. To avoid allocating more memory than necessary, .NET 6 introduced a shared static instance of Random that you can access instead of creating your own. The Random class has commonly used methods for generating random numbers, as described in the following list: • Next: This method returns a random int (whole number) and it takes two parameters, minValue and maxValue, but maxValue is not the maximum value that the method returns! It is an exclu- sive upper bound, meaning maxValue is one more than the maximum value returned. Use the NextInt64 method to return a long integer. NextDouble: This method returns a number that is greater than or equal to 0.0 and less than • and never equal to 1.0. Use the NextSingle method to return a float. NextBytes: This method populates an array of any size with random byte (0 to 255) values. It • is common to format byte values as hexadecimal, for example, 00 to FF. 