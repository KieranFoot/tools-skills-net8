Chapter 6 329 Good Practice: Alternatively, use a record class because one of its benefits is that it implements this equality behavior for you. Defining struct types Let’s explore defining your own value types: 1. In the PacktLibrary project, add a file named DisplacementVector.cs. 2. Modify the file, as shown in the following code, and note the following: struct instead of class. • The type is declared using It has two int properties, named X and Y, that will auto-generate two private fields with • the same data type, which will be allocated on the stack. X and Y. • It has a constructor to set initial values for It has an operator to add two instances together that returns a new instance of the type, • with X added to X, and Y added to Y: namespace Packt.Shared; public struct DisplacementVector { public int X { get; set; } public int Y { get; set; } public DisplacementVector(int initialX, int initialY) { X = initialX; Y = initialY; } public static DisplacementVector operator +( DisplacementVector vector1, DisplacementVector vector2) { return new( vector1.X + vector2.X, vector1.Y + vector2.Y); } } 