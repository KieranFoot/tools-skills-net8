Hello, C#! Welcome, .NET! 4 This book, C# 12 and .NET 8 – Modern Cross-Platform Development Fundamentals, is best read linearly, chapter by chapter, because it builds up fundamental skills and knowledge. The companion book, Apps and Services with .NET 8, can be read more like a cookbook, so if you are especially interested in building gRPC services, then you could read that chapter without the preceding chapters about minimal API services. To see a list of all books I have published with Packt, you can use the following link: https://subscription.packtpub.com/search?query=mark+j.+price A similar list is available on Amazon: https://www.amazon.com/Mark-J-Price/e/B071DW3QGN/ You can search other book-selling sites for my books too. Setting up your development environment Before you start programming, you’ll need a code editor for C#. Microsoft has a family of code editors and Integrated Development Environments (IDEs), which include: • Visual Studio 2022 for Windows • Visual Studio Code for Windows, Mac, or Linux • Visual Studio Code for the Web or GitHub Codespaces Third parties have created their own C# code editors, for example, JetBrains Rider, which is available for Windows, Mac, or Linux but does have a license cost. JetBrains Rider is popular with more expe- rienced .NET developers. Warning! Although JetBrains is a fantastic company with great products, both Rider and the ReSharper extension for Visual Studio are software, and all software has bugs and quirky behavior. For example, they might show errors like “Cannot resolve symbol” in your Razor Pages, Razor views, and Blazor components. Yet you can build and run those files because there is no actual problem. If you have installed the Unity Support plugin then it will complain about boxing operations (which are a genuine problem for Unity game developers), but in projects that are not Unity so the warning does not apply. Choosing the appropriate tool and application type for learning What is the best tool and application type for learning C# and .NET? When learning, the best tool is one that helps you write code and configuration but does not hide what is really happening. IDEs provide graphical user interfaces that are friendly to use, but what are they doing for you underneath? A more basic code editor that is closer to the action while providing help to write your code can be better while you are learning. 