Building and Securing Web Services Using Minimal APIs 348 19. Note the console app will now sensibly wait for the suggested number of seconds before making its next call to the service, as shown in the following output: Enter a client name: X-Client-Id will be: console-client-add7613f-51a9-4c4a-8ec7-0244203d2e19 07:45:01: Chai, Chang, Aniseed Syrup, Chef Anton's Cajun Seasoning, Grandma's Boysenberry Spread, Uncle Bob's Organic Dried Pears, Northwoods Cranberry Sauce, Ikura, Queso Cabrales, Queso Manchego La Pastora, 07:45:02: Chai, Chang, Aniseed Syrup, Chef Anton's Cajun Seasoning, Grandma's Boysenberry Spread, Uncle Bob's Organic Dried Pears, Northwoods Cranberry Sauce, Ikura, Queso Cabrales, Queso Manchego La Pastora, 07:45:03: 429: API calls quota exceeded! maximum admitted 2 per 10s. I will retry after 8 seconds. 07:45:11: Chai, Chang, Aniseed Syrup, Chef Anton's Cajun Seasoning, Grandma's Boysenberry Spread, Uncle Bob's Organic Dried Pears, Northwoods Cranberry Sauce, Ikura, Queso Cabrales, Queso Manchego La Pastora, 07:45:12: Chai, Chang, Aniseed Syrup, Chef Anton's Cajun Seasoning, Grandma's Boysenberry Spread, Uncle Bob's Organic Dried Pears, Northwoods Cranberry Sauce, Ikura, Queso Cabrales, Queso Manchego La Pastora, 07:45:13: 429: API calls quota exceeded! maximum admitted 2 per 10s. I will retry after 8 seconds. 20. Stop and restart the Northwind.WebApi.Client.Console project without debugging. In the console app, enter the name dev-id-1, and note that the rate limit does not apply to this 21. console app client. This could be a special account for internal developers. Northwind.WebApi.Client.Console project without debugging. 22. Stop and restart the console-client-abc123, and note that the rate limit is 23. In the console app, enter the name different for this console app client ID, as shown in the following output: info: AspNetCoreRateLimit.ClientRateLimitMiddleware[0] Request get:/api/products from ClientId console-client-abc123 has been blocked, quota 5/10s exceeded by 1. Blocked by rule *, TraceIdentifier 0HMIKGS1TPSHJ:00000006. MonitorMode: False Rate limiting using ASP.NET Core middleware ASP.NET Core 7 introduced its own basic rate-limiting middleware, initially distributed as a separate NuGet package but now included with ASP.NET Core. It has a dependency on another Microsoft package, System.Threading.RateLimiting. It is not as feature-rich as the third-party package and we will not cover it in this book, although I have written an online-only section at the following link: https://github.com/markjprice/apps-services-net8/blob/main/docs/ch08-rate-limiting.md 