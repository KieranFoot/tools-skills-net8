Working with Files, Streams, and Serialization 502 Good Practice: Choose Json.NET for developer productivity and a large feature set, or System.Text.Json for performance. You can review a list of the differences at the follow- ing link: https://learn.microsoft.com/en-us/dotnet/standard/serialization/ system-text-json-migrate-from-newtonsoft-how-to#table-of-differences- between-newtonsoftjson-and-systemtextjson. Controlling JSON processing There are many options to take control of how JSON is processed, as shown in the following list: • Including and excluding fields. • Setting a casing policy. • Selecting a case-sensitivity policy. • Choosing between compact and prettified whitespace. Let’s see some in action: Use your preferred code editor to add a new Console App / console project named 1. ControllingJson to the Chapter09 solution. System.Console, System. 2. In the project file, add elements to statically and globally import the , and System.IO.Path classes. Environment ControllingJson project, add a new class file named Book.cs. 3. In the Book.cs, define a class named Book, as shown in the following code: 4. In using System.Text.Json.Serialization; // To use [JsonInclude]. namespace Packt.Shared; public class Book { // Constructor to set non-nullable property. public Book(string title) { Title = title; } // Properties. public string Title { get; set; } public string? Author { get; set; } // Fields. [JsonInclude] // Include this field. public DateTime PublishDate; 