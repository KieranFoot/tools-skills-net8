Multitasking and Concurrency 194 4. You would have had to add the async keyword to the Main method and change its return type to Task. With .NET 6 and later, the console app project template uses the top-level program feature to automatically define the Program class with an asynchronous <Main>$ method for you. 5. Run the code and view the result, which is likely to have a different number of bytes since Apple changes its home page frequently, as shown in the following output: Apple's home page has 40,252 bytes. Working with async streams With .NET Core 3, Microsoft introduced the asynchronous processing of streams. You can complete a tutorial about async streams at the following link: https:// learn.microsoft.com/en-us/dotnet/csharp/tutorials/generate-consume- asynchronous-stream. Before C# 8 and .NET Core 3, the await keyword only worked with tasks that return scalar values. Async stream support in .NET Standard 2.1 allows an async method to return one value after another asynchronously. Letâ€™s see a simulated example that returns three random integers as an async stream: 1. Use your preferred code editor to add a new Console App / console project to the Chapter05 solution named AsyncEnumerable. System.Console class and treat warnings as errors. 2. Globally and statically import the Program.Methods.cs. 3. Add a new file named Program.Methods.cs, delete any existing statements and then define a method that uses 4. In the yield keyword to return a random sequence of three numbers asynchronously, as shown in the following code: partial class Program { private static async IAsyncEnumerable<int> GetNumbersAsync() { Random r = Random.Shared; // Simulate some work that takes 1.5 to 3 seconds. await Task.Delay(r.Next(1500, 3000)); // Return a random number between 1 and 1000. yield return r.Next(1, 1001); await Task.Delay(r.Next(1500, 3000)); 