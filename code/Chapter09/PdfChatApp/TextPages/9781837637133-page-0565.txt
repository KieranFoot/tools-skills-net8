Combining Data Sources Using GraphQL 532 "operationName": "...", "variables": { "variable1": "value1", ... } } We will use the application/json media format so that we can pass variables and their values. Understanding the GraphQL response format A GraphQL service should return a JSON document containing the expected data object and maybe some errors in an array, with the following structure: { "data": { ... }, "errors": [ ... ] } The errors array should only be in the document if there are errors. Using REST Client as a GraphQL client Before we write code as a client to the GraphQL service, it would be good to test it with your code editorâ€™s .http file support. This is so that if our .NET client app does not work, we know the problem is in our client code rather than the service: 1. If you are using Visual Studio Code and have not already installed REST Client by Huachao Mao (humao.rest-client), then install it now. In your preferred code editor, start the Northwind.GraphQL.Service project web service, using 2. the https profile without debugging, and leave it running. HttpRequests folder, create a file named graphql-queries.http, 3. In your code editor, in the and modify its contents to contain a request to get products in the seafood category, as shown in the following code: ### Configure a variable for the GraphQL service base address. @base_address = https://localhost:5121/graphql ### Get all products in the specified category. POST {{base_address}} Content-Type: application/json { "query" : "{productsInCategory(categoryId:8){productId productName unitsInStock}}" } 