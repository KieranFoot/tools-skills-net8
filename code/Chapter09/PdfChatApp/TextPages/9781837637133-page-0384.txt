Chapter 8 351 At runtime, ASP.NET Core uses the RequestDelegateFactory (RDF) class to convert your MapX calls into RequestDelegate instances. But this is dynamic code so is not compatible with native AOT. In ASP.NET Core 8, when native AOT is enabled, the runtime use of RDF is replaced with a source generator named Request Delegate Generator (RDG) that performs similar work but at compile time. This makes sure the code generated is statically analyzable by the native AOT publish process. More Information: You can learn how to create your own source generator at the follow- ing link: https://github.com/markjprice/apps-services-net8/blob/main/docs/ ch01-dynamic-code.md#creating-source-generators. Requirements for native AOT There are additional requirements for different operating systems: • On Windows, you must install the Visual Studio 2022 Desktop development with C++ workload with all default components. • On Linux, you must install the compiler toolchain and developer packages for libraries that sudo apt-get install the .NET runtime depends on. For example, for Ubuntu 18.04 or later: . clang zlib1g-dev Warning! Cross-platform native AOT publishing is not supported. This means that you must run the publish on the operating system that you will deploy to. For example, you cannot publish a native AOT project on Linux to later run on Windows. Enabling native AOT for a project To enable native AOT publishing in a project, add the <PublishAot> element to the project file, as shown highlighted in the following markup: <PropertyGroup> <TargetFramework>net8.0</TargetFramework> <PublishAot>true</PublishAot> Enabling JSON serialization with native AOT JSON serialization with native AOT requires the use of the System.Text.Json source generator. All model types passed as parameters or return values must be registered with a JsonSerializerContext, as shown in the following code: [JsonSerializable(typeof(Product)] // A single Product. [JsonSerializable(typeof(Product[]))] // An array of Products. public partial class MyJsonSerializerContext : JsonSerializerContext { } 