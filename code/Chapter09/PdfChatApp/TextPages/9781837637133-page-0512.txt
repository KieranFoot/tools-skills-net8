Chapter 11 479 • Solution file and folder: Chapter11 • Project file and folder: Northwind.Common 2. In the Northwind.Common project, rename the Class1.cs file to UserModel.cs. Modify its contents to define a model for registering a user’s name, unique connection ID, and 3. the groups that they belong to, as shown in the following code: namespace Northwind.Chat.Models; public class UserModel { public string Name { get; set; } = null!; public string ConnectionId { get; set; } = null!; public string? Groups { get; set; } // comma-separated list } Good Practice: In a real-world app, you would want to use a collection of string values for the Groups property, but this coding task is not about how to provide a web user experience for editing multiple string values. We will provide a simple text box instead and focus on learning SignalR. 4. In the Northwind.Common project, add a class file named MessageModel.cs. Modify its contents to define a message model with properties for whom the message is sent to and who the mes- sage was sent from, and the message body, as shown in the following code: namespace Northwind.Chat.Models; public class MessageModel { public string From { get; set; } = null!; public string To { get; set; } = null!; public string? Body { get; set; } } Enabling a server-side SignalR hub Next, we will enable a SignalR hub on the server side in an ASP.NET Core MVC project: 1. Use your preferred code editor to add a new project, as defined in the following list: • Project template: ASP.NET Core Web App (Model-View-Controller) / mvc • Solution file and folder: Chapter11 • Project file and folder: Northwind.SignalR.Service.Client.Mvc • Authentication type: None. 