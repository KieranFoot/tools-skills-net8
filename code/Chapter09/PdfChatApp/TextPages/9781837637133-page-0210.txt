Chapter 5 177 7. In Program.cs, delete the existing statements and then add statements to call the helper method to output information about the thread, define and start a stopwatch, call the three simulated work methods, and then output the milliseconds elapsed, as shown in the following code: using System.Diagnostics; // To use Stopwatch. OutputThreadInfo(); Stopwatch timer = Stopwatch.StartNew(); SectionTitle("Running methods synchronously on one thread."); MethodA(); MethodB(); MethodC(); WriteLine($"{timer.ElapsedMilliseconds:#,##0}ms elapsed."); 8. Run the code, wait for all three methods to finish executing, and then review the result, noting that when there is only one unnamed foreground thread doing the work, the total time required is just over 6 seconds, as shown in the following output: Thread Id: 1, Priority: Normal, Background: False, Name: null *** Running methods synchronously on one thread. Starting Method A... Thread Id: 1, Priority: Normal, Background: False, Name: null Finished Method A. Starting Method B... Thread Id: 1, Priority: Normal, Background: False, Name: null Finished Method B. Starting Method C... Thread Id: 1, Priority: Normal, Background: False, Name: null Finished Method C. 6,028ms elapsed. Running multiple actions asynchronously using tasks The Thread class has been available since the first version of .NET in 2002 and can be used to create new threads and manage them, but it can be tricky to work with directly. .NET Framework 4.0 introduced the Task class in 2010, which represents an asynchronous operation. A task is a high-level abstraction around the operating system thread that performs the operation, and the Task class enables easier creation and management of any underlying threads. Managing multiple threads wrapped in tasks will allow our code to execute at the same time, aka asynchronously. Each Task has a Status property and a CreationOptions property. A Task has a ContinueWith method that can be customized with the TaskContinuationOptions enum, and it can be managed with the TaskFactory class. 