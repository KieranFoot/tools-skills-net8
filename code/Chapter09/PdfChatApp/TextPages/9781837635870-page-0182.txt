Chapter 3 163 4. Run the code and view the result that shows the overflow being checked and causing an ex- ception to be thrown, as shown in the following output: Initial value: 2147483646 After incrementing: 2147483647 Unhandled Exception: System.OverflowException: Arithmetic operation resulted in an overflow. 5. Just like any other exception, we should wrap these statements in a try statement block and display a nicer error message for the user, as shown in the following code: try { // previous code goes here } catch (OverflowException) { WriteLine("The code overflowed but I caught the exception."); } 6. Run the code and view the result, as shown in the following output: Initial value: 2147483646 After incrementing: 2147483647 The code overflowed but I caught the exception. Disabling compiler overflow checks with the unchecked statement The previous section was about the default overflow behavior at runtime and how to use the checked statement to change that behavior. This section is about compile-time overflow behavior and how to unchecked statement to change that behavior. use the A related keyword is unchecked. This keyword switches off overflow checks performed by the compiler within a block of code. Letâ€™s see how to do this: 1. Type the following statement at the end of the previous statements. The compiler will not compile this statement because it knows it would overflow: int y = int.MaxValue + 1; 