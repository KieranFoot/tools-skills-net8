Chapter 6 227 Good Practice: Disable logging when it is not needed. Logging can get costly fast. For example, one organization was spending $10,000 per month on cloud resources, much more than predicted, and they didn’t know why. It turned out they were logging every SQL statement executed in production. By “flipping a switch” to stop that logging they saved $8,500 per month! You can read Milan Jovanović’s story at the following link: https://www. linkedin.com/posts/milan-jovanovic_i-helped-a-team-save-100k-in-azure- cloud-activity-7109887614664474625-YDiU/. Mapping between objects One of the most boring parts of being a programmer is mapping between objects. It is common to need to integrate systems or components that have conceptually similar objects but with different structures. Models for data are different for different parts of an application. Models that represent data in storage are often called entity models. Models that represent data that must be passed between layers are often called data transfer objects (DTOs). Models that represent only the data that must be presented to a user are often called view models. All these models are likely to have commonalities but different structures. AutoMapper is a popular package for mapping objects because it has conventions that make the work as easy as possible. For example, if you have a source member called CompanyName, it will be mapped CompanyName. to a destination member with the name AutoMapper’s creator, Jimmy Bogard, has written an article about its design philoso- phy that is worth reading, available at the following link: https://jimmybogard.com/ automappers-design-philosophy/. Let’s see an example of AutoMapper in action. You will create four projects: • A class library for the entity and view models. • A class library to create mapper configurations for reuse in unit tests and actual projects. • A unit test project to test the mappings. • A console app to perform a live mapping. We will construct an example object model that represents an e-commerce website customer and their shopping cart with a couple of items, and then map it to a summary view model to present to the user. Defining models for an AutoMapper configuration To test the mapping, we will define some record types. As a reminder, a record (or record class) is a reference type that has value-based equality. A class is a reference type that has memory address-based equality (except for string, which overrides this behavior). 