Chapter 13 681 Configuring Entity Framework Core as a service Functionality, such as Entity Framework Core database contexts, that is needed by an ASP.NET Core project should be registered as a dependency service during website startup. The code in the GitHub repository solution and below uses SQLite, but you can easily use SQL Server if you prefer. Letâ€™s see how: 1. In the Northwind.Web project, add a project reference to the Northwind.DataContext project for either SQLite or SQL Server, as shown in the following markup: <!-- Change Sqlite to SqlServer if you prefer. --> <ItemGroup> <ProjectReference Include="..\Northwind.DataContext.Sqlite\ Northwind.DataContext.Sqlite.csproj" /> </ItemGroup> Warning! The project reference must go all on one line with no line break. 2. Build the Northwind.Web project. Program.cs, import the namespace to work with your entity model types, as shown in the 3. In following code: using Northwind.EntityModels; // To use AddNorthwindContext method. 4. In Program.cs, after the statement that adds Razor Pages to the registered services, add a statement to register the Northwind database context class, as shown in the following code: builder.Services.AddNorthwindContext(); 5. In the Pages folder, in Suppliers.cshtml.cs, import the namespace for our database context, as shown in the following code: using Northwind.EntityModels; // To use NorthwindContext. 6. In the SuppliersModel class, add a private field to store the Northwind database context and a constructor to set it, as shown in the following code: private NorthwindContext _db; public SuppliersModel(NorthwindContext db) { _db = db; } 