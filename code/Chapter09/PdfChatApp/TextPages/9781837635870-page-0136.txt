Chapter 3 117 result = "Greater than 3"; } else { result = "Less than or equal to 3"; } More experienced C# developers adopt ternary operators as much as possible because they are concise and can result in cleaner code once you are used to reading them. Exploring unary operators Two common unary operators are used to increment, ++, and decrement, --, a number. Let us write some example code to show how they work: 1. If you’ve completed the previous chapters, then you will already have a cs12dotnet8 folder. If not, then you’ll need to create it. Use your preferred coding tool to create a new solution and project, as defined in the following 2. list: • Project template: Console App / console • Project file and folder: Operators • Solution file and folder: Chapter03 • Do not use top-level statements: Cleared • Enable native AOT publish: Cleared In Operators.csproj, add a new <ItemGroup> section to statically import System.Console for 3. all C# files using the implicit usings .NET SDK feature, as shown in the following markup: <ItemGroup> <Using Include="System.Console" Static="true" /> </ItemGroup> 4. In Program.cs, delete the existing statements and then declare two integer variables named a and b, set a to 3, increment a while assigning the result to b, and then output their values, as shown in the following code: #region Exploring unary operators int a = 3; int b = a++; WriteLine($"a is {a}, b is {b}"); #endregion 