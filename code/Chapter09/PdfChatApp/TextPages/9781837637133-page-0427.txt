Caching, Queuing, and Resilient Background Services 394 public string? NameContains { get; set; } public Uri? BaseAddress { get; set; } public IEnumerable<Product>? Products { get; set; } public string? ErrorMessage { get; set; } } 9. In the Controllers folder, in HomeController.cs, import the namespace for the entity models, as shown in the following code: using Northwind.EntityModels; // To use Product. 10. In HomeController.cs, add statements to store the registered HTTP client factory in a private readonly field, as shown highlighted in the following code: private readonly ILogger<HomeController> _logger; private readonly IHttpClientFactory _httpClientFactory; public HomeController(ILogger<HomeController> logger, IHttpClientFactory httpClientFactory) { _logger = logger; _httpClientFactory = httpClientFactory; } 11. In HomeController.cs, add an asynchronous action method named Products, which will use the HTTP factory to request products whose name contains a value entered as an optional name parameter, in a custom MVC route, as shown in the following code: [Route("home/products/{name?}")] public async Task<IActionResult> Products(string? name = "cha") { HomeProductsViewModel model = new(); HttpClient client = _httpClientFactory.CreateClient( name: "Northwind.WebApi.Service"); model.NameContains = name; model.BaseAddress = client.BaseAddress; HttpRequestMessage request = new( method: HttpMethod.Get, requestUri: $"api/products/{name}"); HttpResponseMessage response = await client.SendAsync(request); 