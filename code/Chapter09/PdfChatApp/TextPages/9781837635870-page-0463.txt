Working with Common .NET Types 444 IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable { TValue this[TKey key] { get; set; } ICollection<TKey> Keys { get; } ICollection<TValue> Values { get; } void Add(TKey key, TValue value); bool ContainsKey(TKey key); bool Remove(TKey key); bool TryGetValue(TKey key, [MaybeNullWhen(false)] out TValue value); } Items in a dictionary are instances of the struct, aka the value type, KeyValuePair<TKey, TValue>, TKey is the type of the key and TValue is the type of the value, as shown in the following code: where namespace System.Collections.Generic; public readonly struct KeyValuePair<TKey, TValue> { public KeyValuePair(TKey key, TValue value); public TKey Key { get; } public TValue Value { get; } [EditorBrowsable(EditorBrowsableState.Never)] public void Deconstruct(out TKey key, out TValue value); public override string ToString(); } An example Dictionary<string, Person> uses a string as the key and a Person instance as the value. Dictionary<string, string> uses string values for both, as shown in Table 8.11: Key Value BSA Bob Smith MW Max Williams BSB Bob Smith AM Amir Mohammed Table 8.11: Dictionary with keys and values Letâ€™s explore dictionaries: 1. At the top of Program.cs, define an alias for the Dictionary<TKey, TValue> class where TKey and TValue are both string, as shown in the following code: // Define an alias for a dictionary with string key and string value. using StringDictionary = System.Collections.Generic.Dictionary<string, string>; 