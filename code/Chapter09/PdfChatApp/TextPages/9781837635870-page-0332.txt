Chapter 6 313 Harry is this angry: 3. Stop it! Harry is this angry: 4. Stop it! That’s it for events. Now let’s look at interfaces. Implementing interfaces Interfaces are a way to implement standard functionality and connect different types to make new things. Think of them like the studs on top of LEGO™ bricks, which allow them to “stick” together, or electrical standards for plugs and sockets. If a type implements an interface, then it makes a promise to the rest of .NET that it supports specific functionality. Therefore, they are sometimes described as contracts. Common interfaces Table 6.1 shows some common interfaces that your types might implement: Interface Method(s) Description This defines a comparison method that IComparable CompareTo(other) a type implements to order or sort its instances. This defines a comparison method that a IComparer Compare(first, second) secondary type implements to order or sort instances of a primary type. This defines a disposal method to release unmanaged resources more efficiently than IDisposable Dispose() waiting for a finalizer. See the Releasing unmanaged resources section later in this chapter for more details. This defines a culture-aware method to ToString(format, IFormattable format the value of an object into a string culture) representation. Serialize(stream, This defines methods to convert an object object) IFormatter to and from a stream of bytes for storage or transfer. Deserialize(stream) This defines a method to format inputs based IFormatProvider GetFormat(type) on a language and region. Table 6.1: Some common interfaces that your types might implement 