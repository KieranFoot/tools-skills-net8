Querying and Manipulating Data Using LINQ 620 currentPage = currentPage == 0 ? totalPages : currentPage - 1; else if (key == ConsoleKey.RightArrow) currentPage = currentPage == totalPages ? 0 : currentPage + 1; else break; // Break out of the while loop. WriteLine(); } } 4. In Program.cs, comment out any other methods and then call the PagingProducts method. 5. Run the code and view the result, as shown in the following output: ------------------------------------------------------------------------- ID Product Name Unit Price Discontinued ------------------------------------------------------------------------- 1 Chai £18.00 False 2 Chang £19.00 False 3 Aniseed Syrup £10.00 False 4 Chef Anton's Cajun Seasoning £22.00 False 5 Chef Anton's Gumbo Mix £21.35 True 6 Grandma's Boysenberry Spread £25.00 False 7 Uncle Bob's Organic Dried Pears £30.00 False 8 Northwoods Cranberry Sauce £40.00 False 9 Mishi Kobe Niku £97.00 True 10 Ikura £31.00 False ------------------------------ Page 1 of 8 ------------------------------ Press <- to page back, press -> to page forward. The preceding output excludes the SQL statement used to efficiently get the page of products by using ORDER BY, LIMIT, and OFFSET, as shown in the following code: .param set @__p_1 10 .param set @__p_0 0 SELECT "p"."ProductId", "p"."CategoryId", "p"."Discontinued", "p"."ProductName", "p"."QuantityPerUnit", "p"."ReorderLevel", "p"."SupplierId", "p"."UnitPrice", "p"."UnitsInStock", "p"."UnitsOnOrder" FROM "Products" AS "p" ORDER BY "p"."ProductId" LIMIT @__p_1 OFFSET @__p_0 