Chapter 5 287 { name = Name; species = Species; } } The properties, constructor, and deconstructor can be generated for you: 1. In Records.cs, add statements to define another record using simplified syntax, known as positional records, as shown in the following code: // Simpler syntax to define a record that auto-generates the // properties, constructor, and deconstructor. public record ImmutableAnimal(string Name, string Species); 2. In Program.cs, add statements to construct and deconstruct immutable animals, as shown in the following code: ImmutableAnimal oscar = new("Oscar", "Labrador"); var (who, what) = oscar; // Calls the Deconstruct method. WriteLine($"{who} is a {what}."); 3. Run the PeopleApp project and view the results, as shown in the following output: Oscar is a Labrador. You will see records again when we look at C# 10 support to create struct records in Chapter 6, Imple- menting Interfaces and Inheriting Classes. More Information: There are many more ways to use records in your projects. I recom- mend that you review the official documentation at the following link: https://learn. microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/records. Defining a primary constructor for a class Introduced with C# 12, you can define one constructor as part of the class definition. This is called the primary constructor. The syntax is the same as for positional data members in records, but the behavior is slightly different. Traditionally, we separate the class definition from any constructors, as shown in the following code: public class Headset // Class definition. { // Constructor. public Headset(string manufacturer, string productName) { // You can reference manufacturer and productName parameters in 