Building Entity Models for SQL Server Using EF Core 86 5. If necessary, follow any OS-specific instructions to add the dotnet tools directory to your PATH environment variable, as described in the output of installing the dotnet-ef tool. If you want to install a preview version, you can specify a version wildcard, for example, for EF Core 9 previews, as shown in the following command: dotnet tool install --global dotnet-ef --version 9-* 6. Instead of uninstalling and then installing, you can update using the following command: dotnet tool update --global dotnet-ef Defining EF Core models EF Core uses a combination of conventions, annotation attributes, and Fluent API statements to build an entity model at runtime so that any actions performed on the classes can later be automatically translated into actions performed on the actual database. An entity class represents the structure of a table, and an instance of the class represents a row in that table. First, we will review the three ways to define a model, with code examples, and then we will create some classes that implement those techniques. Using EF Core conventions to define the model The code we will write will use the following conventions: • The name of a table is assumed to match the name of a DbSet<T> property in the DbContext Products. class, for example, • The names of the columns are assumed to match the names of properties in the entity model ProductId. class, for example, string .NET type is assumed to be an nvarchar type in the database. • The int .NET type is assumed to be an int type in the database. • The The primary key is assumed to be a property that is named Id or ID. Or, when the entity • model class is named Product, then the property can be named ProductId or ProductID. If this property is of an integer type or the Guid type, then it is also assumed to be an IDENTITY column (a column type that automatically assigns a value when inserting). Good Practice: There are many other conventions that you should know, and you can even define your own, but that is beyond the scope of this book. You can read about them at the following link: https://learn.microsoft.com/en-us/ef/core/modeling/. Using EF Core annotation attributes to define the model Conventions often aren’t enough to completely map the classes to the database objects. For example, some databases like SQLite use dynamic column types so the tool has to guess about what property types its columns should map to, based on the current data values in that column. 