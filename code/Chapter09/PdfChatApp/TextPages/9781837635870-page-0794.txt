Chapter 15 775 customer = await _service.GetCustomerAsync(CustomerId); } private async Task Delete() { if (customer is not null) { await _service.DeleteCustomerAsync(CustomerId); } _navigation.NavigateTo("customers"); } } Enabling server-side interactions In our Blazor project, neither server-side nor client-side interactions are enabled. We will enable server-side interactions first so that when we attempt to add a new customer, the validation will run and show error messages: 1. In Program.cs, at the end of the statement that adds Razor components, add a call to a method to enable server-side interactivity, as shown highlighted in the following code: builder.Services.AddRazorComponents() .AddInteractiveServerComponents(); 2. In Program.cs, at the end of the statement that maps Razor components, add a call to a method to enable server-side interactivity, as shown highlighted in the following code: app.MapRazorComponents<App>() .AddInteractiveServerRenderMode(); 3. In the Components\Pages folder, in CreateCustomer.razor, at the top of the file, add a decla- ration to enable server-side rendering, as shown in the following code: @rendermode RenderMode.InteractiveServer 4. In the Components\Pages folder, in EditCustomer.razor, at the top of the file, add a declaration to enable server-side rendering, as shown in the following code: @rendermode RenderMode.InteractiveServer 5. In the Components\Pages folder, in DeleteCustomer.razor, at the top of the file, add a decla- ration to enable server-side rendering, as shown in the following code: @rendermode RenderMode.InteractiveServer 