Building and Securing Web Services Using Minimal APIs 342 7. In IServiceCollection.Extensions.cs, in the call to configure HTTP logging, add a statement to allow two rate-limiting headers to not be redacted, as shown highlighted in the following code: services.AddHttpLogging(options => { // Add the Origin header so it will not be redacted. options.RequestHeaders.Add("Origin"); // Add the rate limiting headers so they will not be redacted. options.RequestHeaders.Add("X-Client-Id"); options.ResponseHeaders.Add("Retry-After"); // By default, the response body is not included. options.LoggingFields = HttpLoggingFields.All; }); 8. In WebApplication.Extensions.cs, import the namespace for working with rate-limiting policy stores, as shown in the following code: using AspNetCoreRateLimit; // To use IClientPolicyStore and so on. 9. In WebApplication.Extensions.cs, add statements to define an extension method to seed the client policy store, which just means loading the policies from the configuration, and then use client rate limits, as shown in the following code: public static async Task UseCustomClientRateLimiting(this WebApplication app) { using (IServiceScope scope = app.Services.CreateScope()) { IClientPolicyStore clientPolicyStore = scope.ServiceProvider .GetRequiredService<IClientPolicyStore>(); await clientPolicyStore.SeedAsync(); } app.UseClientRateLimiting(); } 10. In Program.cs, after calling UseHttpLogging, add a call to use client rate limiting, as shown in the following code: await app.UseCustomClientRateLimiting(); 