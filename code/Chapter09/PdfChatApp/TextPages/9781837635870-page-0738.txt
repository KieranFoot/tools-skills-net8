Chapter 14 719 if (addedCustomer == null) { return BadRequest("Repository failed to create customer."); } else { return CreatedAtRoute( // 201 Created. routeName: nameof(GetCustomer), routeValues: new { id = addedCustomer.CustomerId.ToLower() }, value: addedCustomer); } } 8. In CustomersController.cs, add statements to define an action method that responds to HTTP PUT requests, as shown in the following code: // PUT: api/customers/[id] // BODY: Customer (JSON, XML) [HttpPut("{id}")] [ProducesResponseType(204)] [ProducesResponseType(400)] [ProducesResponseType(404)] public async Task<IActionResult> Update( string id, [FromBody] Customer c) { id = id.ToUpper(); c.CustomerId = c.CustomerId.ToUpper(); if (c == null || c.CustomerId != id) { return BadRequest(); // 400 Bad request. } Customer? existing = await _repo.RetrieveAsync(id); if (existing == null) { return NotFound(); // 404 Resource not found. } await _repo.UpdateAsync(c); return new NoContentResult(); // 204 No content. } 