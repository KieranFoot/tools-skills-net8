Writing, Debugging, and Testing Functions 218 â€¢ Assert: This part will make one or more assertions about the output. An assertion is a belief that, if not true, indicates a failed test. For example, when adding 2 and 2, we would expect the result to be 4. Now, we will write some unit tests for the Calculator class: 1. Rename the file UnitTest1.cs to CalculatorUnitTests.cs and then open it. CalculatorUnitTests. (Visual Studio prompts you 2. In Visual Studio Code, rename the class to to rename the class when you rename the file.) In CalculatorUnitTests, import the CalculatorLib namespace, and then modify the 3. CalculatorUnitTests class to have two test methods, one for adding 2 and 2, and another for adding 2 and 3, as shown in the following code: using CalculatorLib; // To use Calculator. namespace CalculatorLibUnitTests; public class CalculatorUnitTests { [Fact] public void TestAdding2And2() { // Arrange: Set up the inputs and the unit under test. double a = 2; double b = 2; double expected = 4; Calculator calc = new(); // Act: Execute the function to test. double actual = calc.Add(a, b); // Assert: Make assertions to compare expected to actual results. Assert.Equal(expected, actual); } [Fact] public void TestAdding2And3() { double a = 2; double b = 3; double expected = 5; Calculator calc = new(); 