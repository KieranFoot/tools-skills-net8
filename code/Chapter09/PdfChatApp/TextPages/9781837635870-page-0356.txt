Chapter 6 337 Understanding nullable reference types The use of the null value is so common, in so many languages, that many experienced programmers never question the need for its existence. However, there are many scenarios where we could write better, simpler code if a variable is not allowed to have a null value. The most significant change to the C# 8 language compiler was the introduction of checks and warn- ings for nullable and non-nullable reference types. “But wait!”, you are probably thinking, “Reference types are already nullable!” And you would be right, but in C# 8 and later, reference types can be configured to warn you about null values by setting a file- or project-level option, enabling this useful new feature. Since this is a big change for C#, Microsoft decided to make the feature an opt-in. It will take several years for this new C# language compiler feature to make an impact, since thousands of existing library packages and apps will expect the old behavior. Even Microsoft did not have time to fully implement this new feature in all the main .NET packages until .NET 6. Important libraries like Microsoft.Extensions for logging, dependency injections, and configuration were not annotated until .NET 7. During the transition, you can choose between several approaches for your own projects: • Default: For projects created using .NET 5 or earlier, no changes are needed. Non-nullable reference types are not checked. For projects created using .NET 6 or later, nullability checks <Nullable> entry in the are enabled by default, but this can be disabled by either deleting the project file or setting it to disable. • Opt-in project and opt-out files: Enable the feature at the project level, and for any files that need to remain compatible with old behavior, opt out. This was the approach Microsoft used internally while it updated its own packages to use this new feature. • Opt-in files: Only enable the NRT feature for individual files. Warning! This NRT feature does not prevent null values – it just warns you about them, and the warnings can be disabled, so you still need to be careful! string firstName; // Allows null but gives warning when potentially null. string? lastName; // Allows null and does not give warning if null. Controlling the nullability warning check feature To enable the nullability warning check feature at the project level, have the <Nullable> element set to enable in your project file, as highlighted in the following markup: <PropertyGroup> ... <Nullable>enable</Nullable> </PropertyGroup> 