Caching, Queuing, and Resilient Background Services 432 5. What data types can be stored in (a) an in-memory cache, and (b) a distributed cache? 6. What are the differences between the Retry and Circuit Breaker patterns? 7. When using the RabbitMQ default direct exchange, what must the routing key be for a queue product? named 8. What is the difference between a fanout and a topic exchange? 9. What port does RabbitMQ listen on by default? BackgroundService class, what method must you override that is 10. When inheriting from the called automatically by the host to run your service? Exercise 9.2 – Explore topics Use the links on the following page to learn more details about the topics covered in this chapter: https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter- 9---caching-queuing-and-resilient-background-services Exercise 9.3 – Replace the Distributed Memory Cache with another distributed cache implementation In this chapter, we used the Distributed Memory Cache implementation to explore how to use a dis- tributed cache. As an optional exercise, register for an Azure account if you have not already, create an Azure Cache for Redis resource, and change your web service project configuration to use it. In the Northwind.WebApi.Service, you will need to reference the Redis package, comment out the previously registered distributed cache implementation, and then call the extension method to register Redis as the distributed cache implementation: // builder.Services.AddDistributedMemoryCache(); builder.Services.AddStackExchangeRedisCache(options => { options.Configuration = builder.Configuration .GetConnectionString("MyRedisConStr"); options.InstanceName = "SampleInstance"; }); Read more at the following links: • Azure Cache for Redis: https://azure.microsoft.com/en-us/products/cache/. https://www.nuget.org/packages/Microsoft.Extensions.Caching. • Redis NuGet package: . StackExchangeRedis Redis with .NET: https://docs.redis.com/latest/rs/references/client_references/ • client_csharp. 