Chapter 15 669 Route constraints for parameters Route constraints validate that the data type is correct for a passed parameter. If a potential request with a parameter value violates the constraint, then a match for that route is not made, and other routes will be evaluated instead. If no routes match, then a 404 status code is returned. If you do not set constraints, then any value is acceptable as a route match, but a data type conversion exception may result when the value is converted into the C# methodâ€™s expected data type. Some route constraint examples are shown in Table 15.1: Constraint example Description {isanimated:bool} The IsAnimated property must be set to a valid Boolean value, for example, TRUE or true. {hiredate:datetime} The HireDate property must be a valid date/time value. {price:decimal} The UnitPrice property must be a valid decimal value. {shipweight:double} The ShipWeight property must be a valid double value. {shipwidth:float} The ShipWidth property must be a valid float value. {orderid:guid} The OrderId property must be a valid Guid value. {categoryid:int} The CategoryId property must be a valid int value. {nanoseconds:long} The Nanoseconds property must be a valid long value. Table 15.1: Route constraint examples Good Practice: Route constraints assume invariant culture, so your URLs must not be localized. For example, always use invariant culture formats to pass date and time pa- rameter values. Base component classes The OnParametersSet method is defined by the base class that components inherit from by default, ComponentBase, as shown in the following code: named using Microsoft.AspNetCore.Components; public abstract class ComponentBase : IComponent, IHandleAfterRender, IHandleEvent { // members not shown } 