15 Building Web Components Using Blazor This chapter is about building web components using Blazor. These can be rich and interactive user interfaces that render as HTML and CSS to provide cross-platform browser support. There are many advantages to using .NET for client-side web development. You can write 99% of your code using C# instead of JavaScript and interop with JavaScript modules for the other 1%. You can share business logic between the server and the client. Blazor implements .NET Standard as well as the latest .NET 8 libraries, so you can use the extensive older .NET libraries, both from Microsoft and third parties. In the previous edition of this book, this chapter covered Blazor WebAssembly, a hosting model where the entire Blazor app and the .NET runtime were downloaded to the browser and executed there. One of the problems with Blazor WebAssembly is a slow initial startup experience for the visitor because a lot needs to be downloaded and executed on the client. Many .NET developers were frustrated with having to choose between different technologies to build web apps, because none of them are perfect and all have pros and cons. In this edition of the book, this chapter covers the new unified Blazor Full Stack model introduced with .NET 8. This enables you to mix the best of all worlds in a single project, including the following: • Blazor components that execute on the client-side using WebAssembly. This replaces what is possible with a Blazor WebAssembly project. • Blazor components that execute on the server-side and communicate live with the Document Object Model (DOM) in the browser, using SignalR to perform updates. This replaces what is possible with a Blazor Server project. • Blazor components that provide static server rendering (SSR) and return an HTTP response, with static content that does not interact live with the server. This replaces what is possible with Razor Pages or Razor Views used in traditional ASP.NET Core websites. • Blazor components that provide server-side streaming so that some content is shown to the visitor as soon as possible, while the rest streams to the browser in the background. This is a brand-new feature. 