Chapter 4 217 return a * b; } } 4. Compile your class library project: • In Visual Studio 2022, navigate to Build | Build CalculatorLib. In Visual Studio Code, in a TERMINAL window for the CalculatorLib folder, enter the • command dotnet build. (You could also run this command in the Chapter04 folder but that would build the whole solution, which is unnecessary in this scenario.) 5. Use your preferred coding tool to add a new xUnit Test Project [C#] / xunit project named CalculatorLibUnitTests to the Chapter04 solution. For example, at the command prompt or terminal in the Chapter04 folder, enter the following commands: dotnet new xunit -o CalculatorLibUnitTests dotnet sln add CalculatorLibUnitTests 6. In the CalculatorLibUnitTests project, add a project reference to the CalculatorLib project: • If you are using Visual Studio 2022, in Solution Explorer, select the CalculatorLibUnitTests project, navigate to Project | Add Project Reference…, check the box to select the CalculatorLib project, and then click OK. dotnet add reference command, or in • If you are using Visual Studio Code, use the CalculatorLibUnitTests.csproj, modify the configuration to add an the file named item group with a project reference to the CalculatorLib project, as shown highlighted in the following markup: <ItemGroup> <ProjectReference Include="..\CalculatorLib\CalculatorLib.csproj" /> </ItemGroup> The path for a project reference can use either forward / or back slashes \ be- cause the paths are processed by the .NET SDK and changed if necessary for the current operating system. 7. Build the CalculatorLibUnitTests project. Writing unit tests A well-written unit test will have three parts: • Arrange: This part will declare and instantiate variables for input and output. • Act: This part will execute the unit that you are testing. In our case, that means calling the method that we want to test. 