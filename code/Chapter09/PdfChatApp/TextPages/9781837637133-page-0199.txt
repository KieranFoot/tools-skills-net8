Managing NoSQL Data Using Azure Cosmos DB 166 4. In the toolbar, click Save. 5. Create a new SQL query and enter SQL text to return the unit price and sales tax for products that cost more than 100, as shown in the following query: SELECT p.unitPrice cost, udf.salesTax(p.unitPrice) AS tax FROM Items p WHERE p.unitPrice > 100 Note that AS to alias an expression is optional. I prefer to specify AS for improved legibility. 6. Click the Save Query button. If you are using cloud resources instead of the emulator, then for compliance reasons, Microsoft saves queries in a container in your Azure Cosmos account in a separate database called ___Cosmos. The estimated additional cost is $0.77 daily. 7. Execute the query and note the results, as shown in the following output: [ { "cost": 123.79, "tax": 24.758000000000003 }, { "cost": 263.5, "tax": 52.7 } ] Implementing stored procedures Stored procedures are the only way to ensure ACID (Atomic, Consistent, Isolated, Durable) transactions that combine multiple discrete activities into a single action that can be committed or rolled back. You cannot use client-side code to implement transactions. Server-side programming also provides improved performance since the code executes where the data is stored. We have just seen that you can define a UDF using the Data Explorer. We could define a stored proce- dure in a similar way, but letâ€™s see how we would do it using code: 1. In Program.Methods.cs, import the namespace for working with server-side programming objects, as shown in the following code: 