Speaking C# 90 // Storing an int in a dynamic object. // int does not have a Length property. something = 12; // Storing a string in a dynamic object. // string has a Length property. something = "Ahmed"; // This compiles but might throw an exception at run-time. Console.WriteLine($"The length of something is {something.Length}"); // Output the type of the something variable. Console.WriteLine($"something is a {something.GetType()}"); You will learn about arrays in Chapter 3, Controlling Flow, Converting Types, and Handling Exceptions. 2. Run the code and note it works because the last value assigned to something was a string value which does have a Length property, as shown in the following output: The length of something is 5 something is a System.String 3. Comment out the statement that assigns a string value to the something variable by prefixing the statement with two slashes //. something is an 4. Run the code and note the runtime error because the last value assigned to int that does not have a Length property, as shown in the following output: Unhandled exception. Microsoft.CSharp.RuntimeBinder. RuntimeBinderException: 'int' does not contain a definition for 'Length' 5. Comment out the statement that assigns an int to the something variable. int values does have a Length 6. Run the code and note the output because an array of three property, as shown in the following output: The length of something is 3 something is a System.Int32[] One limitation of dynamic is that code editors cannot show IntelliSense to help you write the code. This is because the compiler cannot check what the type is during build time. Instead, the CLR checks for the member at runtime and throws an exception if it is missing. 