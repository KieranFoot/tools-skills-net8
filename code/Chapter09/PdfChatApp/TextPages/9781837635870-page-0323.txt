Implementing Interfaces and Inheriting Classes 304 Jabal was born on 05/07/2023 15:27:30 +01:00 Adah has 2 children. Zillah has 2 children. Lamech has 4 children: Lamech's child #0 is named "Jabal". Lamech's child #1 is named "Tubalcain". Lamech's child #2 is named "Jubal". Lamech's child #3 is named "Naamah". More Information: To learn more about operator overloading, you can read the documen- tation at the following link: https://learn.microsoft.com/en-us/dotnet/csharp/ language-reference/operators/operator-overloading. Making types safely reusable with generics In 2005, with C# 2 and .NET Framework 2, Microsoft introduced a feature named generics, which en- ables your types to be more safely reusable and more efficient. It does this by allowing a programmer to pass types as parameters, like how you can pass objects as parameters. This topic is only about types that need to provide flexibility for the types they work with. For example, collection types need to be able to store multiple instances of any type. That flexibility can be provided either by using the System.Object type or generics. For other scenarios that do not need type flexibility, the use of non-generic types is good practice. Working with non-generic types First, let’s look at an example of working with a non-generic type so that you can understand the problems that generics are designed to solve, such as weakly typed parameters and values, and per- formance problems caused by using System.Object. System.Collections.Hashtable can be used to store multiple key-value pairs, each with a unique key that can later be used to quickly look up its value. Both the key and value can be any object because they are declared as System.Object. Although this provides flexibility, it is slow, and bugs are easier to introduce because no type checks are made when adding items. Let’s write some code: 1. In Program.cs, create an instance of the non-generic collection, System.Collections. Hashtable, and then add four items to it, as shown in the following code: // Non-generic lookup collection. System.Collections.Hashtable lookupObject = new(); lookupObject.Add(key: 1, value: "Alpha"); lookupObject.Add(key: 2, value: "Beta"); lookupObject.Add(key: 3, value: "Gamma"); lookupObject.Add(key: harry, value: "Delta"); 