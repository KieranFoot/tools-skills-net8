Managing NoSQL Data Using Azure Cosmos DB 130 They are designed for massive scalability and high performance, and to make programming easier by providing maximum flexibility and allowing schema changes at any time because they do not enforce a structure. Cosmos DB and its APIs Azure Cosmos DB is a NoSQL data store that supports multiple APIs. Its native API is SQL-based. It also supports alternative APIs like MongoDB, Cassandra, and Gremlin. Azure Cosmos DB stores data in atom-record-sequence (ARS) format. You interact with this data via an API that you choose when you create the database: • The API for MongoDB supports recent MongoDB wire protocol versions, which allow existing clients to work with the data as if they are interacting with an actual MongoDB database. Tools like mongodump and mongorestore can be used to move any existing data into Azure Cosmos DB. You can check the latest MongoDB support at the following link: https://learn.microsoft. . com/en-us/azure/cosmos-db/mongodb/mongodb-introduction#how-the-api-works • The API for Cassandra supports the Cassandra Query Language (CQL) wire protocol version 4, which allows existing clients to work with the data as if they are interacting with an actual Cassandra database. • For a new project, sometimes known as a “green field” project, Microsoft recommends the Core (SQL) API. • For existing projects that use alternative APIs, you could choose to use the appropriate API so that your clients and tools do not need to be updated while gaining the benefits of data stored in Azure Cosmos DB. This reduces migration costs. • If the relationships between data items have metadata that needs analyzing, then using the Gremlin API for Cosmos DB to treat Cosmos DB as a graph data store is a good choice. Good Practice: If you are unsure which API to choose, select Core (SQL) as the default. In this book, we will first use the native Core (SQL) API for Cosmos DB. This allows the developer to query JSON documents using a language like SQL. The Core (SQL) API uses JSON’s type system and JavaScript’s function system. Document modeling A typical JSON document representing a product from the Northwind database, the example database that we used in Chapter 2, Managing Relational Data Using SQL Server, when stored in Azure Cosmos DB might look like the following: { "id": "1", "productId": "1", 