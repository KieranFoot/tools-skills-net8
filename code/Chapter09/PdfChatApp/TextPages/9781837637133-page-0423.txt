Caching, Queuing, and Resilient Background Services 390 The Circuit Breaker pattern prevents calls when a threshold of faults is reached. In effect, it is a way for a service to detect if a fault is not transient, or not transient enough to keep retrying. More Information: There is a nice summary table of resilience policies for Polly on its GitHub repository: https://github.com/App-vNext/Polly#resilience-policies. Defining and executing policies In any type of .NET project that calls any unreliable code, you can reference the Polly package and Policy class. Polly is not used in the unreliable code or service itself. It then define a policy using the is used by any clients that call the code or service. For example, you might need to call two methods that might throw arithmetic or custom exceptions, and you want to automatically retry up to three times, so you define a policy to handle this, as shown in the following code: RetryPolicy policy = Policy .Handle<CustomException>().Or<ArithmeticException>() .Retry(3); Then, you can use that policy to execute the methods, as shown in the following code: policy.Execute(() => GetProducts()); policy.Execute(() => GetCustomers()); Each call to Execute gets its own counter for retries, so if the call to GetProducts needs two retries, GetCustomers still has a full three retries of its own. the call to For unlimited retries, you can call the RetryForever method, but this is not recommended. For asynchronous methods, there are matching asynchronous methods; for example, instead of Retry, use RetryAsync. To execute some statements when a retry occurs, for example, to log information, the Retry method can have a callback, as shown in the following code: RetryPolicy policy = Policy .Handle<CustomException>().Or<ArithmeticException>() .Retry(3, onRetry: (exception, retryCount) => { // Log the current retry count and exception information. }); Defining wait intervals between retries Instead of immediately retrying after a fault, it is good practice to wait a moment before retrying. 