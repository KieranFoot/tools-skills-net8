Querying and Manipulating Data Using LINQ 616 Checking for an empty sequence There are multiple ways to check if a sequence is empty or it contains any items: • Call the LINQ Count() method and see if it is greater than zero. This is sometimes the worst way if it must enumerate the whole sequence to count the items. You will see more about this in the next section. But as we saw when we used ILSpy to decompile the Count method implementation, it is smart enough to check if the sequence implements ICollection or ICollection<T> and therefore has a more efficient Count property. Any() method and see if it returns true. This is better than Count() but not as • Call the LINQ good as either of the next two options. Get the sequence’s Count property (if it has one) and see if it is greater than zero. Any sequence • that implements ICollection or ICollection<T> will have a Count property. Length property (if it has one) and see if it is greater than zero. Any array • Get the sequence’s will have a Length property. Be careful with Count! Amichai Mantinband is a software engineer at Microsoft, and he does a great job of highlighting in- teresting parts of the C# and .NET developer stack. In 2022, he posted a code teaser on Twitter, LinkedIn, and YouTube, with a poll to find out what de- velopers thought the code would do. Here’s the code: IEnumerable<Task> tasks = Enumerable.Range(0, 2) .Select(_ => Task.Run(() => Console.WriteLine("*"))); await Task.WhenAll(tasks); Console.WriteLine($"{tasks.Count()} stars!"); Which of the following four will the output be? **2 stars! **2 stars!** ****2 stars! Something else Most got it wrong, as shown in Figure 11.6: 