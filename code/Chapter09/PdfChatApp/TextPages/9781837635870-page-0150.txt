Chapter 3 131 Pattern matching with the switch statement Like the if statement, the switch statement supports pattern matching in C# 7 and later. The case values no longer need to be literal values; they can be patterns. In C# 7 and later, your code can more concisely branch, based on the subtype of a class, and you can declare and assign a local variable to safely use it. Additionally, case statements can include a when keyword to perform more specific pattern matching. Let’s see an example of pattern matching with the switch statement using a custom class hierarchy of animals with different properties: You will learn more details about defining classes in Chapter 5, Building Your Own Types with Object-Oriented Programming. For now, you should be able to get the idea from reading the code. 1. In the SelectionStatements project, add a new class file named Animals.cs: • In Visual Studio 2022, navigate to Project | Add New Item… or press Ctrl + Shift + A, type the name, and then click Add. • In Visual Studio Code, click the New File… button and type the name. • In JetBrains Rider, right-click on the project and select Add | Class/Interface…. In Animals.cs, delete any existing statements, and then define three classes, a base class, 2. Animal, and two inherited classes, Cat and Spider, as shown in the following code: class Animal // This is the base type for all animals. { public string? Name; public DateTime Born; public byte Legs; } class Cat : Animal // This is a subtype of animal. { public bool IsDomestic; } class Spider : Animal // This is another subtype of animal. { public bool IsPoisonous; } 