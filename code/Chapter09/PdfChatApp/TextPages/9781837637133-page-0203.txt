Managing NoSQL Data Using Azure Cosmos DB 170 6. In Program.cs, comment out the statement to create the stored procedure, add a statement to execute the stored procedure, and then list products with a productId of 78, as shown in the following code: //await CreateInsertProductStoredProcedure(); await ExecuteInsertProductStoredProcedure(); await ListProductItems("SELECT p.id, p.productName, p.unitPrice FROM Items p WHERE p.productId = '78'"); 7. Run the console app and note the results, which should be the successful execution of the stored procedure, as shown in the following output: * * Executing the insertProduct stored procedure * Status code: OK, Request charge: 10.23 RUs. * * Listing product items * Running query: SELECT p.id, p.productName, p.unitPrice FROM Items p WHERE p.productId = '78' Status code: OK, Request charge: 2.83 RUs. 1 products found. id: 78, productName: Barista's Chilli Jam, unitPrice: €12.00 Cleaning up Azure resources When you are done with an Azure Cosmos DB account, you must clean up the resources used, or you will incur costs for as long as those resources exist. You can delete resources individually or delete the resource group to delete the entire set of resources. If you delete an Azure Cosmos DB account, then all the databases and containers within it are also deleted: 1. In the Azure portal, navigate to All Resources. apps-services-book resource group, click your Azure Cosmos DB account. 2. In your 3. Click Overview, and then in the toolbar, click Delete Account. 4. In the Confirm the Account Name box, enter your account name. 5. Click the Delete button. Practicing and exploring Test your knowledge and understanding by answering some questions, getting some hands-on practice, and exploring this chapter’s topics with deeper research. Exercise 4.1 – Test your knowledge Answer the following questions: 