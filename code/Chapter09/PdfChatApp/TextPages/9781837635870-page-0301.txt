Building Your Own Types with Object-Oriented Programming 282 • To pattern match on a type only, you can use _ to discard the local variable, for example, FirstClassPassenger _ means that you match on the type but you don’t care what values any of its properties have, so a named variable like p is not needed. In a moment, you will see how we can improve the code even more. _ to represent its default branch. • The switch expression also uses 5. Run the PeopleApp project and view the result, as shown in the following output: Flight costs $2,000.00 for First Class with 1,419 air miles: Suman Flight costs $1,750.00 for First Class with 16,562 air miles: Lucy Flight costs $1,000.00 for Business Class: Janice Flight costs $650.00 for Coach Class with 25.70 KG carry on: Dave Flight costs $500.00 for Coach Class with 0.00 KG carry on: Amit Enhancements to pattern matching in C# 9 or later The previous examples worked with C# 8. Now we will look at some enhancements in C# 9 and later. First, you no longer need to use the underscore to discard the local variable when doing type matching: 1. In Program.cs, comment out the C# 8 syntax, and add C# 9 and later syntax to modify the branches for first-class passengers to use a nested switch expression and the new support for conditionals, like >, as highlighted in the following code: decimal flightCost = passenger switch { /* C# 8 syntax FirstClassPassenger p when p.AirMiles > 35_000 => 1_500M, FirstClassPassenger p when p.AirMiles > 15_000 => 1_750M, FirstClassPassenger _ => 2_000M, */ // C# 9 or later syntax FirstClassPassenger p => p.AirMiles switch { > 35_000 => 1_500M, > 15_000 => 1_750M, _ => 2_000M }, BusinessClassPassenger => 1_000M, CoachClassPassenger p when p.CarryOnKG < 10.0 => 500M, CoachClassPassenger => 650M, _ => 800M }; 2. Run the PeopleApp project to view the results, and note that they are the same as before. 