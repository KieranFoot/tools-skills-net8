Building Websites Using ASP.NET Core Razor Pages 666 <hr /> <h2>This is a static HTML page.</h2> <p>Our customers include restaurants, hotels, and cruise lines.</p> <p> <a class="btn btn-primary" href="https://www.asp.net/">Learn more</a> </p> </div> </div> </body> </html> Good Practice: Check the latest version at the following link: https://getbootstrap. com/docs/versions/. Click the latest version to go to its Get started with Bootstrap page. Scroll down the page to Step 2 to find the latest <link> and <script> elements, which you can then copy and paste. Enabling static and default files If you were to start the website now and enter http://localhost:5130/index.html or https:// localhost:5131/index.html in the address box, the website would return a 404 Not Found error saying no web page was found. To enable the website to return static files such as index.html, we must explicitly configure that feature. Even if we enable static files, if you were to start the website and enter http://localhost:5130/ or https://localhost:5131/ in the address box, the website would still return a 404 Not Found error because the web server does not know what to return by default if no named file is requested. You will now enable static files, explicitly configure default files, and change the URL path registered that returns the plain text response: 1. In Program.cs, add statements after enabling HTTPS redirection to enable static files and default files. Also, modify the statement that maps a GET request to return the plain text re- sponse containing the environment name to only respond to the URL path /hello, as shown highlighted in the following code: app.UseDefaultFiles(); // index.html, default.html, and so on. app.UseStaticFiles(); app.MapGet("/hello", () => $"Environment is {app.Environment.EnvironmentName}"); 