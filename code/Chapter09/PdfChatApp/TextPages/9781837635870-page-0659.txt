Introducing Web Development Using ASP.NET Core 640 modelBuilder.Entity<Order>(entity => { entity.Property(e => e.Freight).HasDefaultValueSql("0"); }); modelBuilder.Entity<OrderDetail>(entity => { entity.Property(e => e.Quantity).HasDefaultValueSql("1"); entity.Property(e => e.UnitPrice).HasDefaultValueSql("0"); entity.HasOne(d => d.Order).WithMany(p => p.OrderDetails).OnDelete(DeleteBehavior.ClientSetNull); entity.HasOne(d => d.Product).WithMany(p => p.OrderDetails).OnDelete(DeleteBehavior.ClientSetNull); }); modelBuilder.Entity<Product>(entity => { entity.Property(e => e.Discontinued).HasDefaultValueSql("0"); entity.Property(e => e.ReorderLevel).HasDefaultValueSql("0"); entity.Property(e => e.UnitPrice).HasDefaultValueSql("0"); entity.Property(e => e.UnitsInStock).HasDefaultValueSql("0"); entity.Property(e => e.UnitsOnOrder).HasDefaultValueSql("0"); entity.Property(product => product.UnitPrice) .HasConversion<double>(); }); OnModelCreatingPartial(modelBuilder); } 4. In the Northwind.DataContext.Sqlite project, add a class named NorthwindContextExtensions. cs. Modify its contents to define an extension method that adds the Northwind database context to a collection of dependency services, as shown in the following code: using Microsoft.EntityFrameworkCore; // To use UseSqlite. using Microsoft.Extensions.DependencyInjection; // To use IServiceCollection. namespace Northwind.EntityModels; public static class NorthwindContextExtensions 