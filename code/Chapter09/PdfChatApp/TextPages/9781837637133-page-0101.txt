Managing Relational Data Using SQL Server 68 3. In Program.cs, change the statements to read the next row and get the field values to make them asynchronous, as shown highlighted in the following code: while (await r.ReadAsync()) { WriteLine("| {0,5} | {1,-35} | {2,8:C} |", await r.GetFieldValueAsync<int>("ProductId"), await r.GetFieldValueAsync<string>("ProductName"), await r.GetFieldValueAsync<decimal>("UnitPrice")); } 4. In Program.cs, change the statements to close the data reader and connection to make them asynchronous, as shown highlighted in the following code: await r.CloseAsync(); await connection.CloseAsync(); 5. Run the console app and confirm that it has the same results as before, but it would run better in a multithreaded system, for example, not blocking the user interface in a GUI app, and not blocking I/O threads in a website. Executing stored procedures using ADO.NET If you need to execute the same query or another SQL statement multiple times, it is best to create a stored procedure, often with parameters, so that it can be precompiled and optimized. Stored proce- dure parameters have a direction to indicate if they are inputs, outputs, or return values. Let’s see an example that uses all three types of parameter direction. First, we will create the stored procedure in the database: 1. In your preferred database tool, connect to the Northwind database. 2. In your preferred database tool, add a new stored procedure: • If you are using SQL Server Management Studio, then in Object Explorer, navigate to Databases | Northwind | Programmability, right-click Stored Procedures, and select New | Stored Procedure. • If you are using Visual Studio 2022, then in Server Explorer, right-click Stored Proce- dures and select Add New Stored Procedure. • If you are using Visual Studio Code, then in SQL Server, right-click your connection profile and select New Query. 