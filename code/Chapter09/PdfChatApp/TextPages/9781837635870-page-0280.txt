Chapter 5 261 We will now create a method with three optional parameters: 1. In Person.cs, add statements to define the method, as shown in the following code: public string OptionalParameters(string command = "Run!", double number = 0.0, bool active = true) { return string.Format( format: "command is {0}, number is {1}, active is {2}", arg0: command, arg1: number, arg2: active); } 2. In Program.cs, add a statement to call the method and write its return value to the console, as shown in the following code: WriteLine(bob.OptionalParameters()); 3. Watch IntelliSense appear as you type the code. You will see a tooltip showing the three optional parameters with their default values. PeopleApp project and view the result, as shown in the following output: 4. Run the command is Run!, number is 0, active is True 5. In Program.cs, add a statement to pass a string value for the command parameter and a double value for the number parameter, as shown in the following code: WriteLine(bob.OptionalParameters("Jump!", 98.5)); 6. Run the PeopleApp project and see the result, as shown in the following output: command is Jump!, number is 98.5, active is True The default values for the command and number parameters have been replaced, but the default for active is still true. Naming parameter values when calling methods Optional parameters are often combined with naming parameters when you call the method, because naming a parameter allows the values to be passed in a different order than how they were declared: 1. In Program.cs, add a statement to pass a string value for the command parameter and a double value for the number parameter, but using named parameters, so that the order they are passed through can be swapped around, as shown in the following code: WriteLine(bob.OptionalParameters(number: 52.7, command: "Hide!")); 