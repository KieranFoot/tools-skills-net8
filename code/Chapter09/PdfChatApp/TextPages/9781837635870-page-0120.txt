Chapter 2 101 string age = Console.ReadLine(); Console.WriteLine($"Hello {firstName}, you look good for {age}."); By default, with .NET 6 and later, nullability checks are enabled, so the C# compiler gives two warnings because the ReadLine method could return a null value in- stead of a string value. But there is no scenario where this method would actually return null, so instead we will see how to switch off these specific warnings in this scenario. 2. For the firstName variable, append a ? after string, as shown highlighted in the following code: string? firstName = Console.ReadLine(); This tells the compiler that we are expecting a possible null value, so it does not need to warn us. If the variable is null then when it is later output with WriteLine, it will just be blank, so that works fine in this case. If we were going to access any of the members of the firstName variable, then we would need to handle the case where it is null. 3. For the age variable, append a ! before the semi-colon at the end of the statement, as shown highlighted in the following code: string age = Console.ReadLine()!; This is called the null-forgiving operator because it tells the compiler that, in this case, ReadLine will not return null, so it can stop showing the warning. It is now our responsibility to ensure this is the case. Luckily, the Console typeâ€™s implementation of ReadLine always returns a string even if it is just an empty string value. 4. Run the code, and then enter a name and age, as shown in the following output: Type your name and press ENTER: Gary Type your age and press ENTER: 34 Hello Gary, you look good for 34. You have now seen two common ways to handle nullability warnings from the compiler. We will cover nullability and how to handle it in more detail in Chapter 6, Implementing Interfaces and Inheriting Classes. 