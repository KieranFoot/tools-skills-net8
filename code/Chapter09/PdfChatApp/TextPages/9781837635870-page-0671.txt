Introducing Web Development Using ASP.NET Core 652 • Microsoft’s TypeScript language for writing more robust code. • JavaScript libraries such as Angular, jQuery, React, and Vue. All these higher-level technologies ultimately translate or compile to the underlying three core tech- nologies, so they work across all modern browsers. As part of the build and deploy process, you will likely use technologies such as: • Node.js, a framework for server-side development using JavaScript. • Node Package Manager (npm) and Yarn, both client-side package managers. • Webpack, a popular module bundler, and a tool for compiling, transforming, and bundling website source files. Practicing and exploring Test your knowledge and understanding by answering some questions and exploring this chapter’s topics with deeper research. Exercise 12.1 – Test your knowledge Answer the following questions: 1. What was the name of Microsoft’s first dynamic server-side-executed web page technology and why is it still useful to know this history today? 2. What are the names of two Microsoft web servers? 3. What are some differences between a microservice and a nanoservice? 4. What is Blazor? 5. What was the first version of ASP.NET Core that could not be hosted on .NET Framework? 6. What is a user agent? What impact does the HTTP request-response communication model have on web developers? 7. 8. Name and describe four components of a URL. 9. What capabilities does Developer Tools give you? 10. What are the three main client-side web development technologies and what do they do? Exercise 12.2 – Know your webbreviations What do the following web abbreviations stand for and what do they do? 1. URI 2. URL 3. WCF 4. TLD 5. API 6. SPA 7. CMS 