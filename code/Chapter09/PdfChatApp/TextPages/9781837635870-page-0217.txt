Writing, Debugging, and Testing Functions 198 13. Type 5.5 and press Enter. 14. Continue stepping through the statements or press F5 or click Continue, and note the output written to the integrated terminal, as shown in Figure 4.11: Figure 4.11: A launch configuration set to use the integrated terminal for user interaction Customizing breakpoints It is easy to make more complex breakpoints: 1. If you are still debugging, click the Stop button in the debugging toolbar, navigate to Run or Debug | Stop Debugging, or press Shift + F5. 2. Navigate to Run | Remove All Breakpoints or Debug | Delete All Breakpoints. WriteLine statement that outputs the answer. 3. Click on the 4. Set a breakpoint by pressing F9 or navigating to Run or Debug | Toggle Breakpoint. 5. Right-click the breakpoint and choose the appropriate menu for your code editor: • In Visual Studio Code, choose Edit Breakpoint.... • In Visual Studio 2022, choose Conditions.... answer variable must be greater than 9, and then press Enter 6. Type an expression, such as the to accept it, and note the expression must evaluate to true for the breakpoint to activate, as shown in Figure 4.12: Figure 4.12: Customizing a breakpoint with an expression using Visual Studio Code 