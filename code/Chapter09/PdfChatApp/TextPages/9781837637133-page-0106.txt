Chapter 2 73 Outputting streams with a data reader In a real app or service, we would likely not output to the console. More likely, as we read each row with a data reader, we might output to a stream that writes HTML tags inside a web page, or text formats like XML and JSON for returning data from a service. Letâ€™s add the ability to generate a JSON file: 1. In Program.cs, import the namespace for working efficiently with JSON and to statically import the Environment and Path classes, as shown in the following code: using System.Text.Json; // To use Utf8JsonWriter, JsonSerializer. using static System.Environment; using static System.IO.Path; 2. In Program.cs, before the while statement that processes the data reader, add statements to define a file path for a JSON file, create a file stream, and start a JSON array, then in the while block, write a JSON object that represents each product row, and finally, end the array and close the stream, as shown highlighted in the following code: // Define a file path to write to. string jsonPath = Combine(CurrentDirectory, "products.json"); await using (FileStream jsonStream = File.Create(jsonPath)) { Utf8JsonWriter jsonWriter = new(jsonStream); jsonWriter.WriteStartArray(); while (await r.ReadAsync()) { WriteLine("| {0,5} | {1,-35} | {2,10:C} |", await r.GetFieldValueAsync<int>("ProductId"), await r.GetFieldValueAsync<string>("ProductName"), await r.GetFieldValueAsync<decimal>("UnitPrice")); jsonWriter.WriteStartObject(); jsonWriter.WriteNumber("productId", await r.GetFieldValueAsync<int>("ProductId")); jsonWriter.WriteString("productName", await r.GetFieldValueAsync<string>("ProductName")); jsonWriter.WriteNumber("unitPrice", await r.GetFieldValueAsync<decimal>("UnitPrice")); 