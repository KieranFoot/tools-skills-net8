Combining Data Sources Using GraphQL 504 Like OData, GraphQL is a standard for describing your data and then querying it that gives the client control over exactly what they need. It was developed internally by Facebook in 2012 before being open sourced in 2015, and it is now managed by the GraphQL Foundation. Some of the key benefits of GraphQL over OData are: • GraphQL does not require HTTP because it is transport-agnostic, so you could use alternative transport protocols like WebSockets or TCP. • GraphQL has more client libraries for different platforms than OData has. /graphql. • GraphQL has a single endpoint, usually simply GraphQL query document format GraphQL uses its own document format for its queries, which are a bit like JSON, but GraphQL queries do not require commas between field names, as shown in the following query, which requests some 23: fields and related data for the product with an ID of { product (productId: 23) { productId productName unitPrice supplier { companyName country } } } The official media type for GraphQL query documents is application/graphql. Requesting fields The most basic GraphQL query requests one or more fields from a type, for example, requesting three fields for each customer entity, as shown in the following code: # The query keyword is optional. Comments are prefixed with #. query { customer { customerId companyName country 