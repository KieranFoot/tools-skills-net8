Chapter 5 271 2. In Program.cs, add statements to call the Factorial function, and write the return value to the console, with exception handling, as shown in the following code: // Change to -1 to make the exception handling code execute. int number = 5; try { WriteLine($"{number}! is {Person.Factorial(number)}"); } catch (Exception ex) { WriteLine($"{ex.GetType()} says: {ex.Message} number was {number}."); } 3. Run the PeopleApp project and view the result, as shown in the following output: 5! is 120 4. Change the number to -1 so that we can check the exception handling. PeopleApp project and view the result, as shown in the following output: 5. Run the System.ArgumentException says: number cannot be less than zero. number was -1. Splitting classes using partial When working on large projects with multiple team members, or when working with especially large and complex class implementations, it is useful to be able to split the definition of a class across mul- partial keyword. tiple files. You do this using the Imagine that we want to add statements to the Person class that are automatically generated by a tool, like an object-relational mapper, that reads schema information from a database. If the class is defined as partial, then we can split the class into an autogenerated code file and a manually edited code file. Letâ€™s write some code that simulates this example: 1. In Person.cs, add the partial keyword, as highlighted in the following code: public partial class Person 2. In the PacktLibraryNetStandard2 project/folder, add a new class file named PersonAutoGen.cs. 3. Add statements to the new file, as shown in the following code: namespace Packt.Shared; // This file simulates an auto-generated class. 