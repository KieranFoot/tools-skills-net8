Building Websites Using ASP.NET Core Razor Pages 692 It will output which endpoint was chosen, as well as handling one specific route: /bonjour. If that route is matched, it will respond with plain text, without calling any further into the pipeline to find a match: 1. In Program.cs, add statements before the call to UseHttpsRedirection to use an anonymous method as a middleware delegate, as shown in the following code: // Implementing an anonymous inline delegate as middleware // to intercept HTTP requests and responses. app.Use(async (HttpContext context, Func<Task> next) => { RouteEndpoint? rep = context.GetEndpoint() as RouteEndpoint; if (rep is not null) { WriteLine($"Endpoint name: {rep.DisplayName}"); WriteLine($"Endpoint route pattern: {rep.RoutePattern.RawText}"); } if (context.Request.Path == "/bonjour") { // In the case of a match on URL path, this becomes a terminating // delegate that returns so does not call the next delegate. await context.Response.WriteAsync("Bonjour Monde!"); return; } // We could modify the request before calling the next delegate. await next(); // We could modify the response after calling the next delegate. }); 2. Start the website using the https launch profile. 3. Arrange the command prompt or terminal and the browser window so that you can see both. https://localhost:5131/, look at the console output, and note that 4. In Chrome, navigate to there was a match on an endpoint route /; it was processed as /index, and the Index.cshtml Razor Page was executed to return the response, as shown in the following output: Endpoint name: /index Endpoint route pattern: 5. Navigate to https://localhost:5131/suppliers and note that you can see that there was a match on an endpoint route /Suppliers, and the Suppliers.cshtml Razor Page was executed to return the response, as shown in the following output: 