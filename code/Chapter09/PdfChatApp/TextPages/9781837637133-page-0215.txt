Multitasking and Concurrency 182 TaskTitle("Inner method starting..."); Thread.Sleep(2000); TaskTitle("Inner method finished."); } 2. In Program.cs, add statements to start a task to run the outer method and wait for it to finish before stopping, as shown in the following code: SectionTitle("Nested and child tasks"); Task outerTask = Task.Factory.StartNew(OuterMethod); outerTask.Wait(); WriteLine("Console app is stopping."); 3. Run the code and view the result, as shown in the following output: Outer method starting... Inner method starting... Outer method finished. Console app is stopping. Although we wait for the outer task to finish, its inner task does not have to finish as well. In fact, the outer task might finish, and the console app could end before the inner task even starts, as shown in the following output: Outer method starting... Outer method finished. Console app is stopping. 4. To link these nested tasks as parent and child, we must use a special option. In Program.Methods. cs, modify the existing code to add a TaskCreationOption value of AttachedToParent, as shown highlighted in the following code: private static void OuterMethod() { TaskTitle("Outer method starting..."); Task innerTask = Task.Factory.StartNew(InnerMethod, TaskCreationOptions.AttachedToParent); TaskTitle("Outer method finished."); } 5. Run the code, view the result, and note that the inner task must finish before the outer task can, as shown in the following output: 