Building Your Own Types with Object-Oriented Programming 274 Defining settable properties To create a settable property, you must use the older syntax and provide a pair of methods—not just a get part, but also a set part: 1. In PersonAutoGen.cs, add statements to define a string property that has both a get and set method (also known as a getter and setter), as shown in the following code: // A read-write property defined using C# 3 auto-syntax. public string? FavoriteIceCream { get; set; } Although you have not manually created a field to store the person’s favorite ice cream, it is there, automatically created by the compiler for you. Sometimes, you need more control over what happens when a property is set. In this scenario, you must use a more detailed syntax and manually create a private field to store the value of the property. 2. In PersonAutoGen.cs, add statements to define a private string field, known as a backing field, as shown in the following code: // A private backing field to store the property value. private string? _favoritePrimaryColor; Good Practice: Although there is no formal standard to name private fields, the most common is to use camel case with an underscore as a prefix. 3. In PersonAutoGen.cs, add statements to define a string property that has both get and set and validation logic in the setter, as shown in the following code: // A public property to read and write to the field. public string? FavoritePrimaryColor { get { return _favoritePrimaryColor; } set { switch (value?.ToLower()) { case "red": case "green": case "blue": 