Chapter 7 303 WriteLine($"Now (LocalDateTime): {nowInLocal}"); WriteLine($"Now (LocalDate): {nowInLocal.Date}"); WriteLine($"Now (LocalTime): {nowInLocal.TimeOfDay}"); WriteLine(); 4. Run the console app, and note the results, including that “local” time does not take into account any DST offset; for example, in my case, living in the UK, I must use the London time zone to get British Summer Time (10:21am), not “local” time (9:21am), as shown in the following output: *** Converting Noda Time types Now (Instant): 2023-06-01T09:21:05Z Now (DateTimeZone): UTC Now (ZonedDateTime): 2023-06-01T09:21:05 UTC (+00) Now (DST): False Now (DateTimeZone): US/Pacific Now (ZonedDateTime): 2023-06-01T02:21:05 US/Pacific (-07) Now (DST): True Now (DateTimeZone): Europe/London Now (ZonedDateTime): 2023-06-01T10:21:05 Europe/London (+01) Now (DST): True Now (LocalDateTime): 01/06/2023 09:21:05 Now (LocalDate): 01 June 2023 Now (LocalTime): 09:21:05 5. In Program.cs, add statements to explore what can be done with periods of time, as shown in the following code: SectionTitle("Working with periods"); // The modern .NET era began with the release of .NET Core 1.0 // on June 27, 2016 at 10am Pacific Time, or 5pm UTC. LocalDateTime start = new(year: 2016, month: 6, day: 27, hour: 17, minute: 0, second: 0); LocalDateTime end = LocalDateTime.FromDateTime(DateTime.UtcNow); WriteLine("Modern .NET era"); WriteLine($"Start: {start}"); WriteLine($"End: {end}"); WriteLine(); 