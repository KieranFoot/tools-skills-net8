Working with Common .NET Types 416 .NET has had the 32-bit float and 64-bit double types since .NET Framework 1.0 was released in 2002. The IEEE 754 specification also defines a 16-bit floating-point standard. Machine learning and other algorithms would benefit from this smaller, lower-precision number type, so Microsoft introduced System.Half type with .NET 5 and later. Currently, the C# language does not define a half alias, the so you must use the .NET type System.Half. This might change in the future. System.Int128 and System.UInt128 were introduced with .NET 7, and they too do not yet have a C# alias keyword. Working with big integers The largest whole number that can be stored in .NET types that have a C# alias is about eighteen and a half quintillion, stored in an unsigned 64-bit integer using ulong. But what if you need to store numbers larger than that? Let’s explore numerics: 1. Use your preferred code editor to create a new project, as defined in the following list: • Project template: Console App / console • Project file and folder: WorkingWithNumbers • Solution file and folder: Chapter08 2. In the project file, add an element to statically and globally import the System.Console class. In Program.cs, delete the existing statements and then add a statement to import System. 3. Numerics, as shown in the following code: using System.Numerics; // To use BigInteger. 4. Add statements to output the maximum value of the ulong type, and a number with 30 digits using BigInteger, as shown in the following code: const int width = 40; WriteLine("ulong.MaxValue vs a 30-digit BigInteger"); WriteLine(new string('-', width)); ulong big = ulong.MaxValue; WriteLine($"{big,width:N0}"); BigInteger bigger = BigInteger.Parse("123456789012345678901234567890"); WriteLine($"{bigger,width:N0}"); 