Managing Relational Data Using SQL Server 76 products.Add(product); ... } 5. Before closing the data reader, add a statement to use the static Serialize method of the JsonSerializer class to write the list of products to the console, as shown highlighted in the following code: WriteLineInColor(JsonSerializer.Serialize(products), ConsoleColor.Magenta); await r.CloseAsync(); 6. Run the console app, enter a price of 60, and note the JSON generated from the list of products, as shown in the following output: Written to: C:\apps-services-net8\Chapter02\Northwind.Console.SqlClient\ bin\Debug\net8.0\products.json [{"ProductId":9,"ProductName":"Mishi Kobe Niku","UnitPrice":97.0000},{"ProductId":18,"ProductName":"Carnarvon Tigers","UnitPrice":62.5000},{"ProductId":20,"ProductName":"Sir Rodney\ u0027s Marmalade","UnitPrice":81.0000},{"ProductId":29,"ProductName":"Th\ u00FCringer Rostbratwurst","UnitPrice":123.7900},{"ProductId":38,"ProductName":"C\ u00F4te de Blaye","UnitPrice":263.5000}] Instead of manually instantiating objects, to simplify even more, we can use a simple object-relational mapper (ORM) like Dapper. Managing data with Dapper Dapper uses ADO.NET underneath when working with SQL Server. Because it is a higher-level technol- ogy, it is not as efficient as using ADO.NET directly, but it can be easier. Dapper is an alternative ORM to EF Core. It is more efficient because it extends the low-level ADO.NET IDbConnection interface with very basic functionality without trying to be all things to all people. Dapper connection extension methods Dapper adds three extension methods to any class that implements IDbConnection (like SqlConnection). They are Query<T>, Query, and Execute. Dapper will automatically open and close the associated con- nection as needed. The Query<T> extension method is the most used because it runs any specified SQL command and then returns the results as an IEnumerable<T> (a sequence of objects). It is designed to run commands that retrieve data like SELECT. It has several parameters, as shown in Table 2.8: 