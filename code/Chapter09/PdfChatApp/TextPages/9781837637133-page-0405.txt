Caching, Queuing, and Resilient Background Services 372 Make sure to select the Use controllers checkbox or specify the --use-controllers or -controllers switch. We will not use minimal APIs, which is the default way a Web API is implemented using the .NET 8 project templates. If you use JetBrains Rider, you might want to use the dotnet new command until Rider supports a Use controllers option. 2. Add a project reference to the Northwind database context project for the SQL Server that you created in Chapter 3, Building Entity Models for SQL Server Using EF Core, as shown in the following markup: <ItemGroup> <ProjectReference Include="..\..\Chapter03\Northwind.Common.DataContext .SqlServer\Northwind.Common.DataContext.SqlServer.csproj" /> </ItemGroup> The path cannot have a line break. If you did not complete the task of creating the class libraries in Chapter 3, then download the solution projects from the GitHub repository. 3. In the project file, change invariant globalization to false, and treat warnings as errors, as shown in the following markup: <Project Sdk="Microsoft.NET.Sdk.Web"> <PropertyGroup> <TargetFramework>net8.0</TargetFramework> <Nullable>enable</Nullable> <ImplicitUsings>enable</ImplicitUsings> <InvariantGlobalization>false</InvariantGlobalization> <TreatWarningsAsErrors>true</TreatWarningsAsErrors> </PropertyGroup> Explicitly setting invariant globalization to true is new in the ASP.NET Core Web API project template with .NET 8. It is designed to make a web service non-cul- ture-specific so that it can be deployed anywhere in the world and have the same behavior. By setting this property to false, the web service will default to the culture of the current computer it is hosted on. You can read more about invariant globalization mode at the following link: https://github.com/dotnet/runtime/ blob/main/docs/design/features/globalization-invariant-mode.md. 