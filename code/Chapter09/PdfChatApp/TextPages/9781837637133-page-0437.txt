Caching, Queuing, and Resilient Background Services 404 9. Optionally, in Docker Desktop, note that a container for RabbitMQ runs and listens on ports 5672 (the actual queue service) and 15672 (its management service), as shown in Figure 9.3: Figure 9.3: RabbitMQ running in a Docker container Sending messages to a queue using an MVC website Now that we have the RabbitMQ system running, we can add the RabbitMQ client package to the MVC website project so that it can send messages to a queue. But first, let’s create a class library to define models we will use with the queue: 1. Use your preferred code editor to create a new class library project, as defined in the following list: • Project template: Class Library / classlib • Solution file and folder: Chapter09 • Project file and folder: Northwind.Queue.Models 2. Add a project reference to the Northwind entity models project for SQL Server that you created in Chapter 3, Building Entity Models for SQL Server Using EF Core, as shown in the following markup: <ItemGroup> <ProjectReference Include="..\..\Chapter03\Northwind.Common. EntityModels .SqlServer\Northwind.Common.EntityModels.SqlServer.csproj" /> </ItemGroup> 