Using Popular Third-Party Libraries 224 Structured event data Most systems write plain text messages to their logs. Serilog can be told to write serialized structured data to the log. The @ symbol prefixing a parameter tells Serilog to serialize the object passed in, instead of just the result of calling the ToString method. Later, that complex object can be queried for improved search and sort capabilities in the logs. For example: var lineitem = new { ProductId = 11, UnitPrice = 25.49, Quantity = 3 }; log.Information("Added {@LineItem} to shopping cart.", lineitem); You can learn more about how Serilog handles structured data at the following link: https://github.com/serilog/serilog/wiki/Structured-Data. Serilog sinks All logging systems need to record the log entries somewhere. That could be to the console output, a file, or a more complex data store like a relational database or cloud data store. Serilog calls these sinks. Serilog has hundreds of official and third-party sink packages for all the possible places you might want to record your logs. To use them, just include the appropriate package. The most popular are shown in the following list: • serilog.sinks.file • serilog.sinks.console • serilog.sinks.periodicbatching • serilog.sinks.debug • serilog.sinks.rollingfile (deprecated; use serilog.sinks.file instead) serilog.sinks.applicationinsights • • serilog.sinks.mssqlserver There are more than 470 packages currently listed on Microsoft’s public NuGet feed: https://www.nuget.org/packages?q=serilog.sinks. Logging to the console and a rolling file with Serilog Let’s start: 1. Use your preferred code editor to add a new Console App / console project named Serilogging to a Chapter06 solution. 