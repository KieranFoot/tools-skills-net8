Working with Data Using Entity Framework Core 554 Executing DbCommand [Parameters=[@__id_0='1'], CommandType='Text', CommandTimeout='30'] SELECT "p"."ProductId", "p"."CategoryId", "p"."UnitPrice", "p"."Discontinued", "p"."ProductName", "p"."UnitsInStock" FROM "Products" AS "p" WHERE NOT ("p"."Discontinued") AND "p"."ProductId" > @__id_0 LIMIT 2 Info > Single: Chang Note that both methods execute the same SQL statement except for the LIMIT clauses highlighted in the preceding code. For First, it sets LIMIT 1 but for Single, it sets LIMIT 2. Why? For First, the query can match one or more entities and only the first will be returned. If there are FirstOrDefault to return null if there are no no matches, an exception is thrown, but you can call matches. For Single, the query must match only one entity and it will be returned. If there is more than one match, an exception must be thrown. But the only way for EF Core to know if there is more than one LIMIT 2 and check if there is a second match is to request more than one and check. So, it has to set entity match. Good Practice: If you do not need to make sure that only one entity matches, use First instead of Single to avoid retrieving two records. Pattern matching with Like EF Core supports common SQL statements including Like for pattern matching: 1. In Program.Queries.cs, add a method named QueryingWithLike, as shown in the following code, and note: • We have enabled logging. EF.Functions. • We prompt the user to enter part of a product name and then use the method to search anywhere in the ProductName property. Like • For each matching product, we output its name, stock, and if it is discontinued: private static void QueryingWithLike() { using NorthwindDb db = new(); SectionTitle("Pattern matching with LIKE"); Write("Enter part of a product name: "); 