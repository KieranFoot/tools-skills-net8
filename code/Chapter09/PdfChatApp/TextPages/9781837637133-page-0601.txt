Building Efficient Microservices Using gRPC 568 Figure 13.1: Comparing a two-tier modular monolithic service with multi-tier microservices Good Practice: It has been fashionable in the past decade or so to assume that microser- vices are best for all scenarios, and so for a new system to immediately be implemented using cool microservices rather than as a traditional monolith. More recently, there has been a pushback against this assumption. The industry seems to be settling on the rec- ommendation to start by implementing a system as a modular monolith. Only later, if necessary, should you break the modules apart into actual microservices. As well as being inherently slower due to the extra network communication between microservices, you also need to consider whether the extra coordination and complexity of deployments and orchestration of microservices is worth it. This chapter will cover the following topics: • Understanding gRPC • Building a gRPC service and client • Implementing gRPC for an EF Core model • Taking gRPC further • Handling dates, times, and decimal numbers • Implementing interceptors and handling faults • Implementing gRPC JSON transcoding Understanding gRPC gRPC is a modern, open-source, high-performance Remote Procedure Call (RPC) framework that can run in any environment. An RPC is when one computer calls a procedure in another process or on another computer over a network as if it were calling a local procedure. It is an example of a client-server architecture. 