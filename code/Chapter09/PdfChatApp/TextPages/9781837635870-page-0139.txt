Controlling Flow, Converting Types, and Handling Exceptions 120 p -= 3; // Equivalent to: p = p - 3; p *= 3; // Equivalent to: p = p * 3; p /= 3; // Equivalent to: p = p / 3; Null-coalescing operators Related operators to the assignment operators are the null-coalescing operators. Sometimes, you want to either assign a variable to a result or if the variable is null, then assign an alternative value. You can do this using the null-coalescing operators, ?? or ??=, as shown in the following code: string? authorName = ReadLine(); // Prompt user to enter an author name. // The maxLength variable will be the length of authorName if it is // not null, or 30 if authorName is null. int maxLength = authorName?.Length ?? 30; // The authorName variable will be "unknown" if authorName was null. authorName ??= "unknown"; Exploring logical operators Logical operators operate on Boolean values, so they return either true or false. Letâ€™s explore binary logical operators that operate on two Boolean values, traditionally named p and q in mathematics: 1. In Program.cs, add statements to declare two Boolean variables p and q with values of true and false, and then output truth tables showing the results of applying AND, OR, and XOR (exclusive OR) logical operators, as shown in the following code: bool p = true; bool q = false; WriteLine($"AND | p | q "); WriteLine($"p | {p & p,-5} | {p & q,-5} "); WriteLine($"q | {q & p,-5} | {q & q,-5} "); WriteLine(); WriteLine($"OR | p | q "); WriteLine($"p | {p | p,-5} | {p | q,-5} "); WriteLine($"q | {q | p,-5} | {q | q,-5} "); WriteLine(); WriteLine($"XOR | p | q "); WriteLine($"p | {p ^ p,-5} | {p ^ q,-5} "); WriteLine($"q | {q ^ p,-5} | {q ^ q,-5} "); 