Chapter 6 355 Inheriting and extending .NET types .NET has pre-built class libraries containing hundreds of thousands of types. Rather than creating your own completely new types, you can often get a head start by deriving from one of Microsoft’s types to inherit some or all its behavior, and then overriding or extending it. Inheriting exceptions As an example of inheritance, we will derive a new type of exception: 1. In the PacktLibrary project, add a new class file named PersonException.cs. PersonException with three construc- 2. Modify the contents of the file to define a class named tors, as shown in the following code: namespace Packt.Shared; public class PersonException : Exception { public PersonException() : base() { } public PersonException(string message) : base(message) { } public PersonException(string message, Exception innerException) : base(message, innerException) { } } Unlike ordinary methods, constructors are not inherited, so we must explicit- ly declare and explicitly call the base constructor implementations in System. Exception (or whichever exception class you derived from) to make them avail- able to programmers who might want to use those constructors with our custom exception. 3. In Person.cs, add statements to define a method that throws an exception if a date/time parameter is earlier than a person’s date and time of birth, as shown in the following code: public void TimeTravel(DateTime when) { if (when <= Born) { throw new PersonException("If you travel back in time to a date earlier than your own birth, then the universe will explode!"); } else { 