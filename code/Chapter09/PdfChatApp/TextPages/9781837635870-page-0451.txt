Working with Common .NET Types 432 To include double quotes inside a string value, we prefix them with a backslash, or we could use the raw string literal feature in C# 11 or later: 1. Add statements to store a complex comma-separated string variable, and then split it in a dumb way using the Split method, as shown in the following code: // C# 1 to 10: Use escaped double-quote characters \" // string films = "\"Monsters, Inc.\",\"I, Tonya\",\"Lock, Stock and Two Smoking Barrels\""; // C# 11 or later: Use """ to start and end a raw string literal string films = """ "Monsters, Inc.","I, Tonya","Lock, Stock and Two Smoking Barrels" """; WriteLine($"Films to split: {films}"); string[] filmsDumb = films.Split(','); WriteLine("Splitting with string.Split method:"); foreach (string film in filmsDumb) { WriteLine($" {film}"); } 2. Add statements to define a regular expression to split and write the film titles in a smart way, as shown in the following code: Regex csv = new( "(?:^|,)(?=[^\"]|(\")?)\"?((?(1)[^\"]*|[^,\"]*))\"?(?=,|$)"); MatchCollection filmsSmart = csv.Matches(films); WriteLine("Splitting with regular expression:"); foreach (Match film in filmsSmart) { WriteLine($" {film.Groups[2].Value}"); } In a later section, you will see how you can get a source generator to auto-generate XML comments for a regular expression to explain how it works. This is really useful for regular expressions that you might have copied from a website. 