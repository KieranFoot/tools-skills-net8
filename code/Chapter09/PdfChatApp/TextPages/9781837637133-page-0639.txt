Building Efficient Microservices Using gRPC 606 <Protobuf Include="Protos\product.proto" GrpcServices="Client" /> </ItemGroup> If you are using a code editor like JetBrains Rider that adds extra configuration, I recommend that you simplify the elements as shown in the preceding markup. If you do not, then you might get errors later in this coding task. 4. Copy the Converters folder from the gRPC project to the MVC project. Converters folder, in DecimalValue.Converters.cs, modify the namespace to use the 5. In the client, as shown in the following code: namespace Northwind.Grpc.Client.Mvc; 6. In the Northwind.Grpc.Client.Mvc project, in Program.cs, add statements to register clients for the two new services, as shown in the following code: builder.Services.AddGrpcClient<Product.ProductClient>("Product", options => { options.Address = new Uri("https://localhost:5131"); }); builder.Services.AddGrpcClient<Employee.EmployeeClient>("Employee", options => { options.Address = new Uri("https://localhost:5131"); }); 7. In the Controllers folder, in HomeController.cs, add two fields for the two new clients and set them in the constructor. (Hint: follow the same pattern as for greeter and shipper.) HomeController.cs, add two action methods for products and employees, as shown in the 8. In following code: public async Task<IActionResult> Products(decimal minimumPrice = 0M) { ProductsReply reply = await _productClient. GetProductsMinimumPriceAsync( new ProductsMinimumPriceRequest() { MinimumPrice = minimumPrice }); return View(reply.Products); } public async Task<IActionResult> Employees() 