Controlling Flow, Converting Types, and Handling Exceptions 152 arg1: Math.Round(value: n, digits: 0, mode: MidpointRounding.AwayFromZero)); } You can use a foreach statement to enumerate all the items in a multi-dimen- sional array. 2. Run the code and view the result, as shown in the following partial output: Math.Round(9.49, 0, MidpointRounding.AwayFromZero) is 9 Math.Round(9.5, 0, MidpointRounding.AwayFromZero) is 10 Math.Round(9.51, 0, MidpointRounding.AwayFromZero) is 10 Math.Round(10.49, 0, MidpointRounding.AwayFromZero) is 10 Math.Round(10.5, 0, MidpointRounding.AwayFromZero) is 11 Math.Round(10.51, 0, MidpointRounding.AwayFromZero) is 11 ... Good Practice: For every programming language that you use, check its rounding rules. They may not work the way you expect! You can read more about Math.Round at the fol- lowing link: https://learn.microsoft.com/en-us/dotnet/api/system.math.round. Converting from any type to a string The most common conversion is from any type into a string variable for outputting as human-read- ToString that they inherit from the System.Object class. able text, so all types have a method named The ToString method converts the current value of any variable into a textual representation. Some types can’t be sensibly represented as text, so they return their namespace and type name instead. Let’s convert some types into a string: 1. Type statements to declare some variables, convert them to their string representation, and write them to the console, as shown in the following code: int number = 12; WriteLine(number.ToString()); bool boolean = true; WriteLine(boolean.ToString()); DateTime now = DateTime.Now; WriteLine(now.ToString()); object me = new(); WriteLine(me.ToString()); 