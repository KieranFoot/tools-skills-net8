4 Managing NoSQL Data Using Azure Cosmos DB This chapter is about managing NoSQL data by using Azure Cosmos DB. You will learn about some of the key concepts of Cosmos DB like its APIs, ways to model your data, and throughput provisioning, which influences costs. You will create some Cosmos DB resources using the local emulator and in the Azure cloud. Then you will learn how to work with more traditional data using the Core (SQL) API. In an optional online-only section, you can learn how to work with graph data using the Gremlin API. This chapter will cover the following topics: • Understanding NoSQL databases • Creating Cosmos DB resources • Manipulating data with the Core (SQL) API • Exploring server-side programming • Cleaning up Azure resources Understanding NoSQL databases Two of the most common places to store data are in a Relational Database Management System (RDBMS) such as SQL Server, PostgreSQL, MySQL, and SQLite, or in a NoSQL database such as Azure Cosmos DB, Redis, MongoDB, and Apache Cassandra. Relational databases were invented in the 1970s. They are queried with Structured Query Language (SQL). At the time, data storage costs were high, so they reduced data duplication as much as possible via a process known as normalization. Data is stored in tabular structures with rows and columns that are tricky to refactor once in production. They can be difficult and expensive to scale. NoSQL databases do not just mean “no SQL;” they can also mean “not only SQL.” They were invented in the 2000s, after the internet and the web had become popular and adopted much of the learning from that era of software. 