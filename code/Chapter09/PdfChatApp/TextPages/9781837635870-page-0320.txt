Chapter 6 301 arg2: lamech.Children[i].Name); } I used a for instead of a foreach statement so that I could use the i variable with the indexer to access each child. 2. Run the PeopleApp project and view the result, as shown in the following output: Lamech is married to 2 people: Adah Zillah Adah is married to 1 person: Lamech Zillah is married to 1 person: Lamech Jabal was born on 05/07/2023 15:17:03 +01:00 Adah has 1 child. Zillah has 1 child. Lamech has 2 children: Lamech's child #0 is named "Jabal". Lamech's child #1 is named "Tubalcain". As you have just seen, for functionality that applies to two instances of an object type, it is easy to provide both static and instance methods to implement the same functionality. Neither static nor instance methods are best in all scenarios, and you cannot predict how your type might be used. It is best to provide both to allow a developer to use your types in the way that best fits the way they need. Now let’s see how we can add a third way to provide the same functionality for two instances of a type. Implementing functionality using operators The System.String class has a static method named Concat that concatenates two string values and returns the result, as shown in the following code: string s1 = "Hello "; string s2 = "World!"; string s3 = string.Concat(s1, s2); WriteLine(s3); // Hello World! Calling a method like Concat works, but it might be more natural for a programmer to use the + symbol operator to “add” two string values together, as shown in the following code: string s3 = s1 + s2; 