Chapter 8 363 builder.Services.AddAuthentication(defaultScheme: "Bearer") .AddJwtBearer(); 4. In Program.cs, after building the app, add a statement to use authorization, as shown high- lighted in the following code: var app = builder.Build(); app.UseAuthorization(); 5. In WebApplication.Extensions.cs, import the namespace for security claims, as shown in the following code: using System.Security.Claims; // To use ClaimsPrincipal. 6. In WebApplication.Extensions.cs, after mapping an HTTP GET request for the root path to return a plain text Hello World response, add a statement to map an HTTP GET request for the secret path to return the authenticated userâ€™s name if they are authorized, as shown in the following code: app.MapGet("/", () => "Hello World!") .ExcludeFromDescription(); app.MapGet("/secret", (ClaimsPrincipal user) => string.Format("Welcome, {0}. The secret ingredient is love.", user.Identity?.Name ?? "secure user")) .RequireAuthorization(); 7. In the Northwind.WebApi.Service project folder, at the command prompt or terminal, create a local JWT, as shown in the following command: dotnet user-jwts create 8. Note the automatically assigned ID, Name, and Token, as shown in the following partial output: New JWT saved with ID 'd7e22000'. Name: markjprice Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJ1bmlxdWVfbmFtZSI6Im1hcmtqcHJpY2UiLCJzdWIiOiJtYXJran...lci1qd3RzIn0. pGEbYKRjU98dEjxLSx7GAEm41LXMS0J80iIjuZbqrj4 9. At the command prompt or terminal, print all the information for the ID that was assigned, as shown in the following command: dotnet user-jwts print d7e22000 --show-all 