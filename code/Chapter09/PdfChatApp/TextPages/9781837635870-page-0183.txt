Controlling Flow, Converting Types, and Handling Exceptions 164 2. Hover your mouse pointer over the error, and note that a compile-time check is shown as an error message, as shown in Figure 3.4: Figure 3.4: A compile-time check for integer overflow 3. To disable compile-time checks, wrap the statement in an unchecked block, write the value of y to the console, decrement it, and repeat, as shown in the following code: unchecked { int y = int.MaxValue + 1; WriteLine($"Initial value: {y}"); y--; WriteLine($"After decrementing: {y}"); y--; WriteLine($"After decrementing: {y}"); } 4. Run the code and view the results, as shown in the following output: Initial value: -2147483648 After decrementing: 2147483647 After decrementing: 2147483646 Of course, it would be rare that you would want to explicitly switch off a check like this because it allows an overflow to occur. But perhaps you can think of a scenario where you might want that behavior. Practicing and exploring Test your knowledge and understanding by answering some questions, getting some hands-on practice, and exploring this chapter’s topics with deeper research. Exercise 3.1 – Test your knowledge Answer the following questions: 1. What happens when you divide an int variable by 0? double variable by 0? 2. What happens when you divide a 