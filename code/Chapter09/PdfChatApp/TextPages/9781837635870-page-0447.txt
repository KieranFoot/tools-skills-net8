Working with Common .NET Types 428 Building strings efficiently You can concatenate two strings to make a new string using the String.Concat method or simply by using the + operator. But both choices are bad practice when combining more than a few values because .NET must create a completely new string in memory. This might not be noticeable if you are only adding two string values, but if you concatenate inside a loop with many iterations, it can have a significant negative impact on performance and memory use. You can concatenate string variables more efficiently using the StringBuilder type. I have written an online-only section for the companion book, Apps and Services with .NET 8, about performance benchmarking using string concatenations as the main example. You can optional- ly complete the section and its practical coding tasks at the following link: https://github.com/ markjprice/apps-services-net8/blob/main/docs/ch01-benchmarking.md. More Information: You can see examples of using StringBuilder at the follow- ing link: https://learn.microsoft.com/en-us/dotnet/api/system.text. stringbuilder#examples. Pattern matching with regular expressions Regular expressions are useful for validating input from the user. They are very powerful and can get very complicated. Almost all programming languages have support for regular expressions and use a common set of special characters to define them. Letâ€™s try out some example regular expressions: 1. Use your preferred code editor to add a new Console App / console project named WorkingWithRegularExpressions to the Chapter08 solution. Program.cs, delete the existing statements and then import the following namespace: 2. In using System.Text.RegularExpressions; // To use Regex. Checking for digits entered as text We will start by implementing the common example of validating number input: 1. In Program.cs, add statements to prompt the user to enter their age and then check that it is valid using a regular expression that looks for a digit character, as shown in the following code: Write("Enter your age: "); string input = ReadLine()!; // Null-forgiving operator. Regex ageChecker = new(@"\d"); WriteLine(ageChecker.IsMatch(input) ? "Thank you!" : $"This is not a valid age: {input}"); 