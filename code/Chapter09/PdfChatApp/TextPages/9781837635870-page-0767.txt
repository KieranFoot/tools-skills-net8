Building User Interfaces Using Blazor 748 For example, to provide a user interface for star ratings of products on a commerce site, you might create a component named Rating.razor, as shown in the following markup: <div> @for (int i = 0; i < Maximum; i++) { if (i < Value) { <span class="oi oi-star-filled" /> } else { <span class="oi oi-star-empty" /> } } </div> @code { [Parameter] public byte Maximum { get; set; } [Parameter] public byte Value { get; set; } } You could then use the component on a web page, as shown in the following markup: <h1>Review</h1> <Rating id="rating" Maximum="5" Value="3" /> <textarea id="comment" /> The markup for creating an instance of a component looks like an HTML tag where the name of the tag is the component type. Components can be embedded in a web page using an element, for example, <Rating Value="5" />, or they can be routed to, like a Razor Page or MVC controller. Instead of a single file with both markup and an @code block, the code can be stored in a separate code-behind file named Rating.razor.cs. The class in this file must be partial and have the same name as the component. There are many built-in Blazor components, including ones to set elements like <title> in the <head> section of a web page, and plenty of third parties who will sell you components for common purposes. What is the difference between Blazor and Razor? You might wonder why Blazor components use .razor as their file extension. Razor is a template markup syntax that allows the mixing of HTML and C#. Older technologies that support Razor syntax use the .cshtml file extension to indicate the mix of C# and HTML. 