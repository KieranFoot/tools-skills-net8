Chapter 2 103 <ItemGroup> <Using Include="System.Console" Static="true" /> </ItemGroup> 3. Run the console app and note the behavior is the same as before. Good Practice: In the future, for all console app projects you create for this book, add the section above to simplify the code you need to write in all C# files to work with the Console class. Getting key input from the user We can get key input from the user using the ReadKey method. This method waits for the user to press a key or key combination, which is then returned as a ConsoleKeyInfo value. Letâ€™s explore reading key presses: 1. Type statements to ask the user to press any key combination and then output information about it, as shown in the following code: Write("Press any key combination: "); ConsoleKeyInfo key = ReadKey(); WriteLine(); WriteLine("Key: {0}, Char: {1}, Modifiers: {2}", arg0: key.Key, arg1: key.KeyChar, arg2: key.Modifiers); 2. Run the code, press the K key, and note the result, as shown in the following output: Press any key combination: k Key: K, Char: k, Modifiers: 0 3. Run the code, hold down Shift and press the K key, and note the result, as shown in the fol- lowing output: Press any key combination: K Key: K, Char: K, Modifiers: Shift 4. Run the code, press the F12 key, and note the result, as shown in the following output: Press any key combination: Key: F12, Char: , Modifiers: 0 Warning! When running a console app in a terminal within Visual Studio Code, some keyboard combinations will be captured by the code editor before they can be processed by your console app. For example, Ctrl + Shift + X in Visual Studio Code activates the Ex- tensions view in the sidebar. To fully test this console app, open a command prompt or terminal in the project folder and run the console app from there. 