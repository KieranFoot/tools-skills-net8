Building Web Components Using Blazor 696 [FromServices] NorthwindContext db, [FromRoute] int id) => { Employee? Employee = db.Employees.Find(id); if (employee == null) { return Results.NotFound(); } else { return Results.Json(employee); } }) .WithName("GetEmployeesById") .Produces<Employee>(StatusCodes.Status200OK) .Produces(StatusCodes.Status404NotFound); app.MapGet("api/employees/{country}", ( [FromServices] NorthwindContext db, [FromRoute] string country) => Results.Json(db.Employees.Where(employee => employee.Country == country))) .WithName("GetEmployeesByCountry") .Produces<Employee[]>(StatusCodes.Status200OK); app.MapPost("api/employees", async ([FromBody] Employee employee, [FromServices] NorthwindContext db) => { db.Employees.Add(employee); await db.SaveChangesAsync(); return Results.Created($"api/employees/{employee.EmployeeId}", employee); }) .Produces<Employee>(StatusCodes.Status201Created); 9. Optionally, delete the statements to set up the weather endpoint. Due to the {id:int} constraint, a GET request to a path like api/employees/3 will map to the GetEmployeesById endpoint, and a GET request to a path like api/employess/USA will map to the GetEmployeesByCountry endpoint. When POST-ing to the api/employees endpoint, the response includes a URL to the newly created employee with its database-as- signed ID. 