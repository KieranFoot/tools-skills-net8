Controlling Flow, Converting Types, and Handling Exceptions 122 Local functions can be anywhere within the statements in Program.cs that uses the top-level program feature but it is good practice to put them at the bottom of the file. 2. After the previous WriteLine statements, perform an AND & operation on the p and q variables, and the result of calling the function, as shown in the following code: WriteLine(); // Note that DoStuff() returns true. WriteLine($"p & DoStuff() = {p & DoStuff()}"); WriteLine($"q & DoStuff() = {q & DoStuff()}"); 3. Run the code, view the result, and note that the function was called twice, once for p and once for q, as shown in the following output: I am doing some stuff. p & DoStuff() = True I am doing some stuff. q & DoStuff() = False 4. Copy and paste the three statements and then change the & operators into && operators, as shown in the following code: WriteLine(); WriteLine($"p && DoStuff() = {p && DoStuff()}"); WriteLine($"q && DoStuff() = {q && DoStuff()}"); 5. Run the code, view the result, and note that the function does run when combined with the p variable. It does not run when combined with the q variable because the q variable is false so the result will be false anyway, so it does not need to execute the function, as shown in the following output: I am doing some stuff. p && DoStuff() = True q && DoStuff() = False // DoStuff function was not executed! Good Practice: Now you can see why the conditional logical operators are described as being short-circuiting. They can make your apps more efficient, but they can also introduce subtle bugs in cases where you assume that the function will always be called. It is safest to avoid them when used in combination with functions that cause side effects. 