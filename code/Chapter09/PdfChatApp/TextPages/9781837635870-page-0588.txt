Chapter 10 569 if (db.Products is null) return (0, 0); Product p = new() { CategoryId = categoryId, ProductName = productName, Cost = price, Stock = stock }; // Set product as added in change tracking. EntityEntry<Product> entity = db.Products.Add(p); WriteLine($"State: {entity.State}, ProductId: {p.ProductId}"); // Save tracked change to database. int affected = db.SaveChanges(); WriteLine($"State: {entity.State}, ProductId: {p.ProductId}"); return (affected, p.ProductId); } 4. In Program.cs, comment out previous method calls, and then call AddProduct and ListProducts, as shown in the following code: var resultAdd = AddProduct(categoryId: 6, productName: "Bob's Burgers", price: 500M, stock: 72); if (resultAdd.affected == 1) { WriteLine($"Add product successful with ID: {resultAdd.productId}."); } ListProducts(productIdsToHighlight: new[] { resultAdd.productId }); 5. Run the code, view the result, and note the new product has been added, as shown in the following partial output: State: Added, ProductId: 0 dbug: 05/03/2022 14:21:37.818 RelationalEventId.CommandExecuting[20100] (Microsoft.EntityFrameworkCore.Database.Command) Executing DbCommand [Parameters=[@p0='6', @p1='500' (Nullable = true), @p2='False', @p3='Bob's Burgers' (Nullable = false) (Size = 13), @ p4=NULL (DbType = Int16)], CommandType='Text', CommandTimeout='30'] 