Chapter 13 591 Taking gRPC further Now let’s look at some more advanced topics like native AOT compilation support, getting metadata, adding deadlines, handling dates, times, and decimal types, adding interceptors, and handling ex- ceptions and transient faults. Improving a gRPC service with native AOT publish .NET 8 introduces gRPC support for native AOT. But as you have just seen, it is not (yet) compatible with some parts of .NET like EF Core. Let’s change our gRPC service to use the SQL client instead of EF Core. We will leave most of the EF Core code in the project so you can switch back if you want in the future, for example, if you upgrade to EF Core 9 and it supports native AOT: 1. In the Northwind.Grpc.Service project, uncomment out the option to publish AOT and add a package reference for the SQL client, as shown in the following markup: <PackageReference Include="Microsoft.Data.SqlClient" Version="5.1.2" /> 2. In the Services folder, in ShipperService.cs, import namespaces for working with SqlClient, as shown in the following code: using Microsoft.Data.SqlClient; // To use SqlConnection and so on. using System.Data; // To use CommandType. 3. In the GetShipper method, comment out the statements to get the shipper from the Northwind data context, and replace it with code to get the shipper using SqlClient, as shown highlighted in the following code: public override async Task<ShipperReply?> GetShipper( ShipperRequest request, ServerCallContext context) { // We cannot use EF Core in a native AOT compiled project. // ShipperEntity? shipper = await _db.Shippers // .FindAsync(request.ShipperId); SqlConnectionStringBuilder builder = new(); builder.InitialCatalog = "Northwind"; builder.MultipleActiveResultSets = true; builder.Encrypt = true; builder.TrustServerCertificate = true; builder.ConnectTimeout = 10; // Default is 30 seconds. builder.DataSource = "."; // To use local SQL Server. builder.IntegratedSecurity = true; 