Handling Dates, Times, and Internationalization 256 4. In Program.cs, delete the existing statements, and then add statements to initialize some special date/time values, as shown in the following code: ConfigureConsole(); // Defaults to en-US culture. SectionTitle("Specifying date and time values"); WriteLine($"DateTime.MinValue: {DateTime.MinValue}"); WriteLine($"DateTime.MaxValue: {DateTime.MaxValue}"); WriteLine($"DateTime.UnixEpoch: {DateTime.UnixEpoch}"); WriteLine($"DateTime.Now: {DateTime.Now}"); WriteLine($"DateTime.Today: {DateTime.Today}"); WriteLine($"DateTime.Today: {DateTime.Today:d}"); WriteLine($"DateTime.Today: {DateTime.Today:D}"); 5. Run the code, and note the results, as shown in the following output: Current culture: English (United States) Short date pattern: M/d/yyyy Long date pattern: dddd, MMMM d, yyyy *** Specifying date and time values DateTime.MinValue: 1/1/0001 12:00:00 AM DateTime.MaxValue: 12/31/9999 11:59:59 PM DateTime.UnixEpoch: 1/1/1970 12:00:00 AM DateTime.Now: 5/30/2023 9:18:05 AM DateTime.Today: 5/30/2023 12:00:00 AM DateTime.Today: 5/30/2023 DateTime.Today: Tuesday, May 30, 2023 The date and time formats output are determined by the culture settings of your console app. We called the ConfigureConsole method to make sure we all see the same default output in US English. 6. In Program.cs, at the top of the statement that calls ConfigureConsole, set the parameter to not override your local computer’s culture, as shown in the following code: ConfigureConsole(overrideComputerCulture: false); 7. Run the code, and note the output is localized to your computer’s culture. Program.cs, set the parameter to specify alternative languages, like French in Canada (fr- 8. In ) or English in Great Britain (en-GB), as shown in the following code: CA ConfigureConsole("fr-CA"); 