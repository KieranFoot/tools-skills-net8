Working with Files, Streams, and Serialization 504 WriteLine("/------------------"); WriteLine(File.ReadAllText(path)); WriteLine("------------------/"); 7. Run the code and view the result, as shown in the following output: **** File Info **** File: book.json Path: C:\cs12dotnet8\Chapter09\ControllingJson\bin\Debug\net8.0 Size: 221 bytes. /------------------ { "title": "C# 12 and .NET 8 - Modern Cross-Platform Development Fundamentals", "author": "Mark J Price", "publishDate": "2023-11-14T00:00:00", "created": "2023-07-13T14:29:07.119631+00:00", "pages": 823 } ------------------/ Note the following: • The JSON file is 221 bytes. publishDate. This is best for sub- • The member names use camelCasing, for example, sequent processing in a browser with JavaScript. pages. • All fields are included due to the options set, including • JSON is prettified for easier human legibility. DateTime and DateTimeOffset values are stored as a single standard string format. • 8. In Program.cs, when setting the JsonSerializerOptions, comment out the setting of a casing policy, write with an indent, and include fields. 9. Run the code and view the result, as shown in the following output: **** File Info **** File: book.json Path: C:\cs12dotnet8\Chapter09\ControllingJson\bin\Debug\net8.0 Size: 184 bytes. /------------------ {"Title":"C# 12 and .NET 8 - Modern Cross-Platform Development Fundamentals","Author":"Mark J Price","PublishDate":"2023-11- 14T00:00:00","Created":"2023-07-13T14:30:29.2205861+00:00"} ------------------/ 