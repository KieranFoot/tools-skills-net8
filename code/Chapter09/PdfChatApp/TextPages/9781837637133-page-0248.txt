Chapter 6 215 t.CurrentUICulture = t.CurrentCulture; WriteLine("Current culture: {0}", t.CurrentCulture.DisplayName); WriteLine(); } } 6. In Program.cs, delete the existing statements, and then call the ConfigureConsole method, as shown in the following code: ConfigureConsole(); // Defaults to en-US culture. 7. In Program.Functions.cs, add a statement to import the namespace for working with exten- sion methods provided by Humanizer, as shown in the following code: using Humanizer; // To use common Humanizer extension methods. 8. In Program.Functions.cs, add statements to define a method to output an original string and then the results of transforming it using the built-in casing transforms, as shown in the following code: private static void OutputCasings(string original) { WriteLine("Original casing: {0}", original); WriteLine("Lower casing: {0}", original.Transform(To.LowerCase)); WriteLine("Upper casing: {0}", original.Transform(To.UpperCase)); WriteLine("Title casing: {0}", original.Transform(To.TitleCase)); WriteLine("Sentence casing: {0}", original.Transform(To.SentenceCase)); WriteLine("Lower, then Sentence casing: {0}", original.Transform(To.LowerCase, To.SentenceCase)); WriteLine(); } 9. In Program.cs, call the OutputCasings method with three different string values, as shown in the following code: OutputCasings("The cat sat on the mat."); OutputCasings("THE CAT SAT ON THE MAT."); OutputCasings("the cat sat on the mat. the frog jumped."); 10. Run the code and view the result, as shown in the following output: Current culture: English (United States) Original casing: The cat sat on the mat. Lower casing: the cat sat on the mat. Upper casing: THE CAT SAT ON THE MAT. 