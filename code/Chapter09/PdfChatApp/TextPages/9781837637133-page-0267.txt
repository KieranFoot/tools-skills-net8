Using Popular Third-Party Libraries 234 WriteLine($"{cart.Customer}"); foreach (LineItem item in cart.Items) { WriteLine($" {item}"); } // Get the mapper configuration for converting a Cart to a Summary. MapperConfiguration config = CartToSummaryMapper. GetMapperConfiguration(); // Create a mapper using the configuration. IMapper mapper = config.CreateMapper(); // Perform the mapping. Summary summary = mapper.Map<Cart, Summary>(cart); // Output the result. WriteLine(); WriteLine("*** After mapping."); WriteLine($"Summary: {summary.FullName} spent {summary.Total:C}."); 5. Run the console app and note the successful result, as shown in the following code: *** Original data before mapping. Customer { FirstName = John, LastName = Smith } LineItem { ProductName = Apples, UnitPrice = 0.49, Quantity = 10 } LineItem { ProductName = Bananas, UnitPrice = 0.99, Quantity = 4 } *** After mapping. Summary: John Smith spent Â£8.86. 6. Optionally, write a unit test to perform a similar check as the preceding code to assert that the Summary has the correct full name and total. Good Practice: There is a debate about when AutoMapper should be used that you can read about in an article (which has more links at the bottom) at the following link: https:// www.anthonysteele.co.uk/AgainstAutoMapper.html. More Information: Learn more details at the following link: https://automapper.org/. 