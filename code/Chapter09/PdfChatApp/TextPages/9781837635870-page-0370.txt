Chapter 6 351 Understanding polymorphism You have now seen two ways to change the behavior of an inherited method. We can hide it using the new keyword (known as non-polymorphic inheritance), or we can override it (known as polymorphic inheritance). Both ways can access members of the base or superclass by using the base keyword, so what is the difference? It all depends on the type of variable holding a reference to the object. For example, a variable of the Person type can hold a reference to a Person class, or any type that derives from Person. Let’s see how this could affect your code: 1. In Employee.cs, add statements to override the ToString method so that it writes the employ- ee’s name and code to the console, as shown in the following code: public override string ToString() { return $"{Name}'s code is {EmployeeCode}."; } 2. In Program.cs, write statements to create a new employee named Alice stored in a variable of type Employee. Also store Alice in a second variable of type Person, and then call both variables’ WriteToConsole and ToString methods, as shown in the following code: Employee aliceInEmployee = new() { Name = "Alice", EmployeeCode = "AA123" }; Person aliceInPerson = aliceInEmployee; aliceInEmployee.WriteToConsole(); aliceInPerson.WriteToConsole(); WriteLine(aliceInEmployee.ToString()); WriteLine(aliceInPerson.ToString()); 3. Run the PeopleApp project and view the result, as shown in the following output: Alice was born on 01/01/01 and hired on 01/01/01 Alice was born on a Monday Alice's code is AA123 Alice's code is AA123 When a method is hidden with new, the compiler is not smart enough to know that the object is an Employee, so it calls the WriteToConsole method in Person. When a method is overridden with virtual and override, the compiler is smart enough to know that although the variable is declared as a Person class, the object itself is an Employee class, and therefore, the Employee implementation of ToString is called. 