Chapter 4 185 2. Modify the RunFactorial function to change the starting number to -2 and to handle over- flow and other exceptions when calling the Factorial function, as shown highlighted in the following code: static void RunFactorial() { for (int i = -2; i <= 15; i++) { try { WriteLine($"{i}! = {Factorial(i):N0}"); } catch (OverflowException) { WriteLine($"{i}! is too big for a 32-bit integer."); } catch (Exception ex) { WriteLine($"{i}! throws {ex.GetType()}: {ex.Message}"); } } } 3. Run the code and view the results, as shown in the following partial output: -2! throws System.ArgumentOutOfRangeException: The factorial function is defined for non-negative integers only. Input: -2 (Parameter 'number') -1! throws System.ArgumentOutOfRangeException: The factorial function is defined for non-negative integers only. Input: -1 (Parameter 'number') 0! = 1 1! = 1 2! = 2 ... 12! = 479,001,600 13! is too big for a 32-bit integer. 14! is too big for a 32-bit integer. 15! is too big for a 32-bit integer. Documenting functions with XML comments By default, when calling a function such as CardinalToOrdinal, code editors will show a tooltip with basic information. 