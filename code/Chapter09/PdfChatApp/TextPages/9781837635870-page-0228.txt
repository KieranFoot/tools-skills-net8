Chapter 4 209 } } Until Microsoft.Extensions.Configuration.Binder package version 7.0.3, you could set the Level property. For example: "Level": "Info". After the bug fix, this now causes an exception to be thrown. Instead, we must set the Value property, or both. This is due to an internal class needing the Value to be set, as explained at the following link: https://github.com/dotnet/runtime/issues/82998. 4. In Visual Studio 2022 and JetBrains Rider, in Solution Explorer, right-click appsettings.json, select Properties, and then in the Properties window, change Copy to Output Directory to Copy always. This is necessary because unlike Visual Studio Code, which runs the console app in the project folder, Visual Studio runs the console app in Instrumenting\bin\Debug\net8.0 or Instrumenting\bin\Release\net8.0. To confirm this is done correctly, review the element that was added to the project file, as shown in the following markup: <ItemGroup> <None Update="appsettings.json"> <CopyToOutputDirectory>Always</CopyToOutputDirectory> </None> </ItemGroup> The Copy to Output Directory property can be unreliable. In our code, we will read and output this file so we can see exactly what is being processed to catch any issues with changes not being copied correctly. 5. At the top of Program.cs, import the Microsoft.Extensions.Configuration namespace, as shown in the following code: using Microsoft.Extensions.Configuration; // To use ConfigurationBuilder. 6. Before the statements that close Debug and Trace, add some statements to create a configu- ration builder that looks in the current folder for a file named appsettings.json, build the configuration, create a trace switch, set its level by binding to the configuration, and then output the four trace switch levels, as shown in the following code: string settingsFile = "appsettings.json"; string settingsPath = Path.Combine( Directory.GetCurrentDirectory(), settingsFile); Console.WriteLine("Processing: {0}", settingsPath); 