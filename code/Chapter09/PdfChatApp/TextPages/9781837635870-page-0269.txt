Building Your Own Types with Object-Oriented Programming 250 for (int childIndex = 0; childIndex < bob.Children.Count; childIndex++) { WriteLine($"> {bob.Children[childIndex].Name}"); } 2. Run the PeopleApp project and view the result, as shown in the following output: Bob Smith has 3 children: > Alfred > Bella > Zoe We could also use a foreach statement to enumerate over the collection. As an optional challenge, change the for statement to output the same information using foreach. Making a field static The fields that we have created so far have all been instance members, meaning that a different value of each field exists for each instance of the class that is created. The alice and bob variables have different Name values. Sometimes, you want to define a field that only has one value that is shared across all instances. These are called static members because fields are not the only members that can be static. Let’s see what can be achieved using static fields using a bank account as an example. Each instance of BankAccount will have its own AccountName and Balance values, but all instances will share a single InterestRate value. Let’s do it: 1. In the PacktLibraryNetStandard2 project, add a new class file named BankAccount.cs. 2. Modify the class to give it three fields – two instance fields and one static field – as shown in the following code: namespace Packt.Shared; public class BankAccount { public string? AccountName; // Instance member. It could be null. public decimal Balance; // Instance member. Defaults to zero. public static decimal InterestRate; // Shared member. Defaults to zero. } 