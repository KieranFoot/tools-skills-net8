Chapter 4 223 Letâ€™s create a similar chain of methods to explore where we could catch and handle exceptions: 1. Use your preferred coding tool to add a new Class Library / classlib project named CallStackExceptionHandlingLib to the Chapter04 solution. Class1.cs file to Processor.cs. 2. Rename the Processor.cs, modify its contents, as shown in the following code: 3. In using static System.Console; namespace CallStackExceptionHandlingLib; public class Processor { public static void Gamma() // public so it can be called from outside. { WriteLine("In Gamma"); Delta(); } private static void Delta() // private so it can only be called internally. { WriteLine("In Delta"); File.OpenText("bad file path"); } } 4. Use your preferred coding tool to add a new Console App / console project named CallStackExceptionHandling to the Chapter04 solution. In the CallStackExceptionHandling console app project, add a reference to the 5. CallStackExceptionHandlingLib class library project, as shown in the following markup: <ItemGroup> <ProjectReference Include="..\CallStackExceptionHandlingLib\ CallStackExceptionHandlingLib.csproj" /> </ItemGroup> 6. Build the CallStackExceptionHandling console app project to make sure dependent projects are compiled and copied to the local bin folder. In Program.cs, delete the existing statements, and then add statements to define two methods 7. and chain calls to them and the methods in the class library, as shown in the following code: using CallStackExceptionHandlingLib; // To use Processor. using static System.Console; 