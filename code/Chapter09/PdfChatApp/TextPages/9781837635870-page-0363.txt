Implementing Interfaces and Inheriting Classes 344 The if statement and throwing of the exception would be done for you. The code is injected and executed before any statements that you write. This proposal was controversial within the C# developer community. Some would prefer the use of attributes to decorate parameters instead of a pair of characters. The .NET product team said they reduced the .NET libraries by more than 10,000 lines of code by using this feature. That sounds like a good reason to use it to me! And no one must use it if they choose not to. Unfortunately, the team eventually decided to remove the feature, so now we all have to write the null checks manually. If you’re interested in this story, then you can read more about it at the following link: https://devblogs.microsoft.com/dotnet/csharp-11-preview-updates/#remove-parameter-null- checking-from-c-11 I include this story in this book because I think it’s an interesting example of Microsoft being transpar- ent, by developing .NET in the open and listening to and responding to feedback from the community. Good Practice: Always remember that nullable is a warning check, not an enforcement. You can read more about the compiler warnings relating to null at the following link: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/ compiler-messages/nullable-warnings. That’s more than enough talk about “nothing”! Let’s look at the meat of this chapter, inheritance. Inheriting from classes The Person type we created earlier derived (inherited) from System.Object. Now, we will create a subclass that inherits from Person: 1. In the PacktLibrary project, add a new class file named Employee.cs. Employee that derives from Person, as shown in 2. Modify its contents to define a class named the following code: namespace Packt.Shared; public class Employee : Person { } 3. In the PeopleApp project, in Program.cs, add statements to create an instance of the Employee class, as shown in the following code: Employee john = new() { Name = "John Jones", Born = new(year: 1990, month: 7, day: 28, hour: 0, minute: 0, second: 0, offset: TimeSpan.Zero)) }; 