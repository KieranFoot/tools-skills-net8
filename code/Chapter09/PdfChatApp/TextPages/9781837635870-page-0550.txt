Chapter 10 531 public string CategoryName { get; set; } = null!; [Column(TypeName = "ntext")] public string? Description { get; set; } // Defines a navigation property for related rows. public virtual ICollection<Product> Products { get; set; } // To enable developers to add products to a Category, we must // initialize the navigation property to an empty collection. // This also avoids an exception if we get a member like Count. = new HashSet<Product>(); } Note the following: • The Category class will be in the Northwind.EntityModels namespace. The CategoryId property follows the primary key naming convention, so it will be • mapped to a column marked as the primary key with an index. The CategoryName property maps to a column that does not allow database NULL values • so it is a non-nullable string, and to disable nullability warnings, we have assigned the null-forgiving operator. Description property maps to a column with the ntext data type instead of the • The nvarchar. default mapping for string values to Product objects to a new, empty HashSet. A hash set is • We initialize the collection of more efficient than a list because it is unordered. If you do not initialize Products, then it will be null and if you try to get its Count then you will get an exception. 2. Modify the Product class, as shown highlighted in the following code: using System.ComponentModel.DataAnnotations; // To use [Required]. using System.ComponentModel.DataAnnotations.Schema; // To use [Column]. namespace Northwind.EntityModels; public class Product { public int ProductId { get; set; } // The primary key. [Required] [StringLength(40)] public string ProductName { get; set; } = null!; // Property name is different from the column name. 