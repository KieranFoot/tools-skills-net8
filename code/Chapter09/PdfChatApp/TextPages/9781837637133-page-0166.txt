Chapter 4 133 A more relaxed consistency level improves latency and availability at the cost of potentially increased complexity for the programmer because data might be inconsistent. Most NoSQL databases only offer two levels of consistency: strong and eventual. Azure Cosmos DB offers five to provide exactly the level of consistency that suits your project. You choose the level of data consistency, and this will be guaranteed by the Service-Level Agreement (SLA), as shown in the following, ordered from the strongest to the weakest: • Strong consistency guarantees linearizability across all regions globally. All other consistency levels are collectively known as “relaxed.” You might ask, “Why not set Strong consistency in all scenarios?” If you are familiar with relational databases, then you should be familiar with transaction isolation levels. These are similar conceptually to NoSQL consistency lev- els. The strongest level of transaction isolation level is SERIALIZABLE. Weaker levels include READUNCOMMITTED and REPEATABLE READ. You would not want to use SERIALIZABLE in all sce- narios for the same reason you wouldn’t want to use Strong consistency in all scenarios. They both slow down operations, and sometimes, to an unacceptable point. Your users will complain about a lack of performance, or even an inability to perform a task at all. So, you need to look carefully at each task you are attempting and determine the minimal required level for that task. Some developers prefer to default to the strongest level and weaken it for scenarios that are “too slow.” Other developers prefer to default to the weakest level and strengthen it for scenarios that introduce too much inconsistency. As you become more familiar with NoSQL development, you will be able to judge quicker what level is best for different scenarios. • Bounded staleness consistency guarantees the ability to read your own write within the write region, monotonic read within the region (meaning the values do not increase or decrease, like a monotone voice, and remain in a consistent order), and consistent prefix, and the staleness of read data is restricted to a specific number of versions for which the reads lag behind the writes within a specified time interval. For example, the time interval might be ten minutes and the number of versions might be three. That would mean that a maximum of three writes can be made in any ten-minute period before a read operation must reflect those changes. Session consistency guarantees the ability to read your own write within the write region, • monotonic read, and consistent prefix. • Consistent prefix consistency only guarantees the order that writes can then be read. Eventual consistency does not guarantee that the order of writes will match the order of reads. • When writes pause, reads will eventually catch up as the replicas synchronize. It is possible for a client to read values older than the ones it read before. Probabilistic Bounded Staleness (PBS) is a measurement that shows how eventual your consistency is currently. You can mon- itor it in the Azure portal. You can read more details about consistency levels at the following link: https://learn. microsoft.com/en-us/azure/cosmos-db/consistency-levels. 