Chapter 6 315 Before we implement the IComparable interface and its CompareTo method for the Person class, letâ€™s see what happens when we try to sort an array of Person instances without implementing this interface, including some that are null or have a null value for their Name property: 1. In the PeopleApp project, add a new class file named Program.Helpers.cs. In Program.Helpers.cs, delete any existing statements, and then define a method for the 2. partial Program class that will output all the names of a collection of people passed as a parameter, with a title beforehand, as shown in the following code: using Packt.Shared; partial class Program { private static void OutputPeopleNames( IEnumerable<Person?> people, string title) { WriteLine(title); foreach (Person? p in people) { WriteLine(" {0}", p is null ? "<null> Person" : p.Name ?? "<null> Name"); /* if p is null then output: <null> Person else output: p.Name unless p.Name is null then output: <null> Name */ } } } 3. In Program.cs , add statements that create an array of Person instances, call the OutputPeopleNames method to write the items to the console, and then attempt to sort the array and write the items to the console again, as shown in the following code: Person?[] people = { null, new() { Name = "Simon" }, new() { Name = "Jenny" }, new() { Name = "Adam" }, new() { Name = null }, new() { Name = "Richard" } }; 