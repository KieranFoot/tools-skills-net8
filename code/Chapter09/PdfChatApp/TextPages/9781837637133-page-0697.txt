Building Web Components Using Blazor 664 • A future release will enable Blazor to execute in any .NET process, like a console app, so that it can be used as a static site generator (SSG). This chapter will cover the following topics: • Understanding Blazor • Building Blazor components • Building a Blazor data component • Implementing caching using local storage Understanding Blazor Blazor is Microsoft’s framework for web component development built on .NET. Blazor hosting models Blazor has multiple hosting models to choose from: • Blazor Server: All the components execute on the web server and user interface updates are sent to the browser using SignalR. The nature of Blazor Server provides some key benefits, including complete .NET API support, direct access to all server-side resources like databases, fast initial load time, and your code is protected because it never leaves the server. This hosting model was introduced with .NET Core 3.0 in November 2019. • Blazor WebAssembly: All the components execute in the web browser like other single page application (SPA) frameworks, for example, React and Angular. Your .NET assemblies and the .NET runtime are downloaded to the browser and cached for future use. The nature of Blazor WebAssembly provides some key benefits, including the ability to run the app offline when not connected to the network, to host the app on a static website or serve it from a content delivery network (CDN), and to offload processing to the client, which increases scalability. This hosting model was introduced as an extension to .NET Core 3.1 in May 2020 and was built-in with .NET 5 in November 2020. • Blazor Hybrid/.NET MAUI Blazor App: All the components execute in a local web view hosted in a native client app. The app can be built using .NET MAUI if the app needs to be cross-plat- form, or using Windows Presentation Foundation or Windows Forms if you are only targeting Windows. The main benefit of Blazor Hybrid compared to the first two hosting models is access to native client capabilities that can provide a better user experience. This hosting model was introduced with .NET 7 in November 2022. Blazor Full Stack: Components can execute on the server and generate static markup, but • each individual component can be switched to any of the following: streaming rendering, interactive server-side with live updates of the COM using SignalR, or interactive client-side with WebAssembly. This new hosting model was formerly known as Blazor United during .NET 8 previews. It was introduced as Blazor Full Stack with .NET 8 in November 2023. In future versions, I expect it to be simply known as Blazor. 