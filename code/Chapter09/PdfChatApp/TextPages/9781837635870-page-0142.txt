Chapter 3 123 Exploring bitwise and binary shift operators Bitwise operators compare the bits in the binary representation of a number. Each bit, either the 0 (zero) or 1 (one) value, is compared individually to the bit in the same column. Binary shift operators can perform some common arithmetic calculations much faster than traditional operators, for example, any multiplication by a factor of 2. Letâ€™s explore bitwise and binary shift operators: 1. In Program.cs, add statements to declare two integer variables named x and y with values 10 and 6, and then output the results of applying AND, OR, and XOR bitwise operators, as shown in the following code: WriteLine(); int x = 10; int y = 6; WriteLine($"Expression | Decimal | Binary"); WriteLine($"-------------------------------"); WriteLine($"x | {x,7} | {x:B8}"); WriteLine($"y | {y,7} | {y:B8}"); WriteLine($"x & y | {x & y,7} | {x & y:B8}"); WriteLine($"x | y | {x | y,7} | {x | y:B8}"); WriteLine($"x ^ y | {x ^ y,7} | {x ^ y:B8}"); Remember that ,7 means right-align in a seven-width column and :B8 means format in binary with eight digits. 2. Run the code and note the results, as shown in the following output: Expression | Decimal | Binary ------------------------------- x | 10 | 00001010 y | 6 | 00000110 x & y | 2 | 00000010 x | y | 14 | 00001110 x ^ y | 12 | 00001100 