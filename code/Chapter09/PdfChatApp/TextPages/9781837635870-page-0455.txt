Working with Common .NET Types 436 11. Inside, at the end of the DigitsOnlyText string literal, enter a \, and note the IntelliSense to help you write a valid regular expression, as shown in Figure 8.3: Figure 8.3: IntelliSense for writing a regular expression 12. Delete the \ that you entered to trigger IntelliSense. The [StringSyntax] attribute is a feature introduced in .NET 7. It depends on your code editor whether it is recognized. The .NET BCL has more than 350 parameters, properties, and fields that are now decorated with this attribute. Improving regular expression performance with source generators When you pass a string literal or string constant to the constructor of Regex, the class parses the string and transforms it into an internal tree structure that represents the expression in an optimized way that can be executed efficiently by a regular expression interpreter. You can also compile regular expressions by specifying RegexOptions, as in the following code: Regex ageChecker = new(DigitsOnlyText, RegexOptions.Compiled); Unfortunately, compiling has the negative effect of slowing down the initial creation of the regular expression. After creating the tree structure that would then be executed by the interpreter, the compiler then must convert the tree into IL code, and then that IL code needs to be JIT compiled into native code. If you’re only running the regular expression a few times, it is not worth compiling it, which is why it is not the default behavior. If you’re running the regular expression more than a few times, for example, because it will be used to validate the URL for every incoming HTTP request to a website, then it is worth compiling. But even then, you should only use compilation if you must use .NET 6 or earlier. .NET 7 introduced a source generator for regular expressions that recognizes if you decorate a partial method that returns Regex with the [GeneratedRegex] attribute. It generates an implementation of that method that implements the logic for the regular expression. 