Building Entity Models for SQL Server Using EF Core 108 9. In Models, add a new class file named HierarchyDb.cs, and modify its contents, as shown in the following code: using Microsoft.EntityFrameworkCore; // To use DbSet<T>. namespace Northwind.Models; public class HierarchyDb : DbContext { public DbSet<Person>? People { get; set; } public DbSet<Student>? Students { get; set; } public DbSet<Employee>? Employees { get; set; } public HierarchyDb(DbContextOptions<HierarchyDb> options) : base(options) { } protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<Person>() .UseTphMappingStrategy(); // Populate database with sample data. Student p1 = new() { Id = 1, Name = "Roman Roy", Subject = "History" }; Employee p2 = new() { Id = 2, Name = "Kendall Roy", HireDate = new(year: 2014, month: 4, day: 2) }; Employee p3 = new() { Id = 3, Name = "Siobhan Roy", HireDate = new(year: 2020, month: 9, day: 12) }; modelBuilder.Entity<Student>().HasData(p1); modelBuilder.Entity<Employee>().HasData(p2, p3); } } 10. In Program.cs, delete the existing statements. Add statements to configure the connection string for the HierarchyDb data context and then use it to delete and then create a database named HierarchyMapping (not Northwind!), show the automatically generated SQL script, and then output the students, employees, and people, as shown in the following code: 