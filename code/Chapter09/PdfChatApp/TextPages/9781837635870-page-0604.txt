Chapter 11 585 Good Practice: Make sure that you understand and remember the difference between LINQ extension methods that start with As and To. Methods that start with As, like AsEnumerable, cast the sequence into a different type but do not allocate memory so those methods are fast. Methods that start with To, like ToList, allocate memory for a new sequence of items so they can be slow and will always use more memory resources. The Enumerable class also has some methods that are not extension methods, as shown in Table 11.2: Method Description Returns an empty sequence of the specified type T. It is useful for passing an empty Empty<T> sequence to a method that requires an IEnumerable<T>. Returns a sequence of integers from the start value with count items. For example, Range Enumerable.Range(start: 5, count: 3) would contain the integers 5, 6, and 7. Returns a sequence that contains the same element repeated count times. For Repeat example, Enumerable.Repeat(element: "5", count: 3) would contain the string values "5", "5", and "5". Table 11.2: Enumerable non-extension methods LINQ in practice Now we can build a console app to explore practical examples of using LINQ. Understanding deferred execution LINQ uses deferred execution. It is important to understand that calling most of the above extension methods does not execute the query and get the results. Most of these extension methods return a LINQ expression that represents a question, not an answer. Let’s explore: 1. Use your preferred code editor to create a new project, as defined in the following list: • Project template: Console App / console • Project file and folder: LinqWithObjects • Solution file and folder: Chapter11 2. In the project file, globally and statically import the System.Console class. Program.Helpers.cs. 3. Add a new class file named In Program.Helpers.cs, delete any existing statements and then define a partial Program class 4. with a method to output a section title, as shown in the following code: partial class Program { private static void SectionTitle(string title) { ConsoleColor previousColor = ForegroundColor; 