Writing, Debugging, and Testing Functions 206 5. Run the debug configuration of the console app: • In Visual Studio Code, enter the following command in the TERMINAL window for the Instrumenting project: dotnet run --configuration Debug • In Visual Studio, in the standard toolbar, select Debug in the Solution Configurations drop-down list and then navigate to Debug | Start Debugging. 6. On your desktop, open the file named log.txt and note that it contains both the message Debug says, I am watching! and also the message Trace says, I am watching!. Good Practice: When running with the Debug configuration, both Debug and Trace are active and will write to any trace listeners. When running with the Release configuration, only Trace will write to any trace listeners. You can therefore use Debug.WriteLine calls liberally throughout your code, knowing they will be stripped out automatically when you build the release version of your application and will therefore not affect performance. Switching trace levels The Trace.WriteLine calls are left in your code, even after release. So, it would be great to have fine control over when they are output. This is something we can do with a trace switch. The value of a trace switch can be set using a number or a word. For example, the number 3 can be replaced with the word Info, as shown in Table 4.1: Number Word Description 0 Off This will output nothing. 1 Error This will output only errors. 2 Warning This will output errors and warnings. 3 Info This will output errors, warnings, and information. 4 Verbose This will output all levels. Table 4.1: Trace levels Let’s explore using trace switches. First, we will add some NuGet packages to our project to enable loading configuration settings from a JSON appsettings file. Adding packages to a project in Visual Studio 2022 Visual Studio has a graphical user interface for adding packages: 1. In Solution Explorer, right-click the Instrumenting project and select Manage NuGet Packages. 2. Select the Browse tab. 