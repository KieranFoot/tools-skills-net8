Chapter 1 11 Extension name and identifier Description Official C# extension from Microsoft. Manage your code with a solution explorer and test your code with C# Dev Kit integrated unit test discovery and execution. ms-dotnettools.csdevkit Includes the C# and IntelliCode for C# Dev Kit extensions. C# editing support, including syntax highlighting, C# IntelliSense, Go To Definition, Find All References, debugging support for .NET, and support for csproj ms-dotnettools.csharp projects on Windows, macOS, and Linux. IntelliCode for C# Dev Kit Provides AI-assisted development features for Python, ms-dotnettools.vscodeintellicode- TypeScript/JavaScript, C#, and Java developers. csharp Provides IntelliSense for MSBuild project files, MSBuild project tools including autocomplete for <PackageReference> tintoy.msbuild-project-tools elements. This extension adds support for using .NET and other Polyglot Notebooks languages in a notebook. It has a dependency on the ms-dotnettools.dotnet-interactive- Jupyter extension (ms-toolsai.jupyter), which itself vscode has dependencies. ilspy-vscode Decompile MSIL assemblies â€“ support for modern .NET, .NET Framework, .NET Core, and .NET Standard. icsharpcode.ilspy-vscode REST Client Send an HTTP request and view the response directly in Visual Studio Code. humao.rest-client Table 1.1: Visual Studio Code extensions used in this book Managing Visual Studio Code extensions at the command prompt You can install a Visual Studio Code extension at the command prompt or terminal, as shown in Table 1.2: Command Description code --list-extensions List installed extensions. code --install-extension <extension-id> Install the specified extension. code --uninstall-extension <extension-id> Uninstall the specified extension. Table 1.2: Commands to list, install, and uninstall extensions For example, to install the C# Dev Kit extension, enter the following at the command prompt: code --install-extension ms-dotnettools.csdevkit 