Building and Securing Web Services Using Minimal APIs 336 "quantityPerUnit":"10 - 500 g pkgs.","unitPrice":38.0000, "unitsInStock":86,"unitsOnOrder":0,"reorderLevel":0, "discontinued":false,"category":null,"supplier":null,"orderDetails":[]} 15. Close the browser and shut down the web servers. Understanding CORS Cross-Origin Resource Sharing (CORS) is an HTTP-header-based feature that asks the browser to disable its same-origin security policy in specific scenarios. The HTTP headers indicate which origins should be allowed in addition to the same origin. Letâ€™s enable CORS in the web service so that it can send extra headers to indicate to the browser that it is allowed to access resources from a different origin: 1. In the Northwind.WebApi.Service project, in WebApplication.Extensions.cs, add an exten- sion method to add CORS support to the web service, as shown in the following code: public static IServiceCollection AddCustomCors( this IServiceCollection services) { services.AddCors(options => { options.AddPolicy(name: "Northwind.Mvc.Policy", policy => { policy.WithOrigins("https://localhost:5082"); }); }); return services; } 2. In Program.cs, after creating the builder, call the custom extension method to add CORS support, as shown in the following code: builder.Services.AddCustomCors(); 3. In Program.cs, after the call to UseHttpLogging, and before mapping the GET requests, add a statement to use the CORS policy, as shown in the following code: app.UseCors(policyName: "Northwind.Mvc.Policy"); 4. Start the Northwind.WebApi.Service project using the https profile without debugging. Northwind.WebApi.Client.Mvc project using the https profile without debugging. 5. Start the 6. Show Developer Tools and the Console. 