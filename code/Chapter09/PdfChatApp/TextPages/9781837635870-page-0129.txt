Speaking C# 110 Another way to handle differences in operating systems is to use the OperatingSystem class in the System namespace, as shown in the following code: if (OperatingSystem.IsWindows()) { // Execute code that only works on Windows. } else if (OperatingSystem.IsWindowsVersionAtLeast(major: 10)) { // Execute code that only works on Windows 10 or later. } else if (OperatingSystem.IsIOSVersionAtLeast(major: 14, minor: 5)) { // Execute code that only works on iOS 14.5 or later. } else if (OperatingSystem.IsBrowser()) { // Execute code that only works in the browser with Blazor. } The OperatingSystem class has equivalent methods for other common operating systems, like Android, iOS, Linux, macOS, and even the browser, which is useful for Blazor web components. A third way to handle different platforms is to use conditional compilation statements. There are four preprocessor directives that control conditional compilation: #if, #elif, #else, and #endif. You define symbols using #define, as shown in the following code: #define MYSYMBOL Many symbols are automatically defined for you, as shown in Table 2.10: Target Framework Symbols .NET Standard NETSTANDARD2_0, NETSTANDARD2_1, and so on Modern .NET NET7_0, NET7_0_ANDROID, NET7_0_IOS, NET7_0_WINDOWS, and so on Table 2.10: Predefined compiler symbols You can then write statements that will compile only for the specified platforms, as shown in the following code: #if NET7_0_ANDROID // Compile statements that only work on Android. #elif NET7_0_IOS // Compile statements that only work on iOS. #else 