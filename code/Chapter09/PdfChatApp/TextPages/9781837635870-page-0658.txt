Chapter 12 639 new[] { Microsoft.EntityFrameworkCore .Diagnostics.RelationalEventId.CommandExecuting }); } } The throwing of the exception is important because if the database file is missing, then the SQLite database provider will create an empty database file, and so if you test connecting to it, it works. But if you query it, then you will see an exception related to missing tables because it does not have any tables! After converting the relative path in to an absolute path, you can set a breakpoint while debugging to more easily see where the database file is expected to be or add a statement to log that path. Customizing the model and defining an extension method Now, we will simplify the OnModelCreating method. I will briefly explain the individual steps and then show the complete final method. You can either try to perform the individual steps or just use the final method code: 1. In the OnModelCreating method, remove all Fluent API statements that call the ValueGeneratedNever method, like the one shown in the following code. This will configure primary key properties like CategoryId to never generate a value automatically or call the HasDefaultValueSql method: modelBuilder.Entity<Category>(entity => { entity.Property(e => e. CategoryId).ValueGeneratedNever(); }); If we do not remove the configuration like the statements above, then when we add new suppliers, the CategoryId value will always be 0 and we will only be able to add one supplier with that value; all other attempts will throw an exception. You can compare your NorthwindContext.cs to the one in the GitHub repository at the following link: https://github.com/markjprice/cs12dotnet8/blob/main/ code/PracticalApps/Northwind.DataContext.Sqlite/NorthwindContext.cs. 2. In the OnModelCreating method, for the Product entity, tell SQLite that the UnitPrice can be converted from decimal to double, as shown in the following code: entity.Property(product => product.UnitPrice) .HasConversion<double>(); 3. The OnModelCreating method should now be simpler, as shown in the following code: protected override void OnModelCreating(ModelBuilder modelBuilder) { 