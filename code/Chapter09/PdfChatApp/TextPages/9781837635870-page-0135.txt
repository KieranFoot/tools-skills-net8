Controlling Flow, Converting Types, and Handling Exceptions 116 Examples of binary operators include adding and multiplying, as shown in the following code: int x = 5; int y = 3; int resultOfAdding = x + y; int resultOfMultiplying = x * y; Understanding unary operators Some operators are unary, meaning they work on a single operand and can be applied before or after the operand, as shown in the following pseudocode: var resultOfOperationAfter = onlyOperand operator; var resultOfOperationBefore = operator onlyOperand; Examples of unary operators include incrementors and retrieving a type or its size in bytes, as shown in the following code: int x = 5; int postfixIncrement = x++; int prefixIncrement = ++x; Type theTypeOfAnInteger = typeof(int); string nameOfVariable = nameof(x); int howManyBytesInAnInteger = sizeof(int); Understanding ternary operators A ternary operator works on three operands, as shown in the following pseudocode: var resultOfOperation = firstOperand firstOperator secondOperand secondOperator thirdOperand; An example of a ternary operator is the conditional operator ?:, which acts like a simplified if state- true, ment. The first operand is a Boolean expression, the second operand is a value to return if it is and the third operand is a value to return if it is false, as shown in the following code: // Syntax of conditional operator. var result = boolean_expression ? value_if_true : value_if_false; // Example of conditional operator. string result = x > 3 ? "Greater than 3" : "Less than or equal to 3"; // Equivalent using an if statement. string result; if (x > 3) { 