Chapter 13 667 Warning! The call to UseDefaultFiles must come before the call to UseStaticFiles, or it will not work! You will learn more about the ordering of middleware and endpoint routing at the end of this chapter. 2. Start the website. 3. Start Chrome and show Developer Tools. In Chrome, enter http://localhost:5130/ and note that you are redirected to the HTTPS 4. address on port 5131, and the index.html file is now returned over that secure connection because it is one of the possible default files for this website and it was the first match found in the wwwroot folder. 5. In Developer Tools, note the request for the Bootstrap stylesheet. http://localhost:5130/hello and note that it returns the plain text envi- 6. In Chrome, enter ronment name as before. 7. Close Chrome and shut down the web server. If all web pages are static, that is, they only get changed manually by a web editor, then our website programming work is complete. But almost all websites need dynamic content, which means a web page that is generated at runtime by executing code. The easiest way to do that is to use a feature of ASP.NET Core named Razor Pages. But before that, let’s understand why you might see additional requests in tools like Developer Tools that you don’t expect. Understanding browser requests during development In Developer Tools, we can see all the requests made by the browser. Some will be requests that you expect, for example: • localhost: This is the request for the home page in the website project. For our current project, the address will be http://localhost:5130/ or https://localhost:5131/. • bootstrap.min.css: This is the request for Bootstrap’s styles. We added a reference to this on the home page, so the browser then made this request for the stylesheet. Some of the requests are made only during development and are determined by the code editor that you use. You can usually ignore them if you see them in Developer Tools. For example: browserLink and aspnetcore-browser-refresh.js: These are requests made by Visual Studio 2022 • to connect the browser to Visual Studio for debugging and Hot Reload. For example: https:// localhost:5131/_vs/browserLink and https://localhost:5131/_framework/aspnetcore- browser-refresh.js. • negotiate?requestUrl, connect?transport, abort?Transport, and so on: These are additional requests used to connect Visual Studio 2022 with the browser. Northwind.Web/: This is a secure WebSockets request related to SignalR used to connect Visual • Studio 2022 with the browser: wss://localhost:44396/Northwind.Web/. 