Speaking C# 56 3. Note that the version at the time of publishing is 8.0.100, indicating that it is the initial version of the SDK without any bug fixes or new features yet, as shown in the following output: 8.0.100 Enabling a specific language version compiler Developer tools like Visual Studio and the dotnet command-line interface assume that you want to use the latest major version of a C# language compiler by default. Before C# 8 was released, C# 7 was the latest major version and was used by default. To use the improvements in a C# point release like 7.1, 7.2, or 7.3, you had to add a <LangVersion> configuration element to the project file, as shown in the following markup: <LangVersion>7.3</LangVersion> After the release of C# 12 with .NET 8, if Microsoft releases a C# 12.1 compiler and you want to use its new language features, then you will have to add a configuration element to your project file, as shown in the following markup: <LangVersion>12.1</LangVersion> Potential values for the <LangVersion> are shown in Table 2.5: <LangVersion> Description 7, 7.1, 7.2, 7.3, 8, 9, Entering a specific version number will use that compiler if it has been 10, 11, 12 installed. Uses the highest major number, for example, 7.0 in August 2019, 8 in latestmajor October 2019, 9 in November 2020, 10 in November 2021, 11 in November 2022, and 12 in November 2023. Uses the highest major and highest minor number, for example, 7.2 in 2017, latest 7.3 in 2018, 8 in 2019, and perhaps 12.1 in H1 2024. Uses the highest available preview version, for example, 12.0 in July 2023 preview with .NET 8 Preview 6 installed. Table 2.5: LangVersion settings for a project file Using future C# compiler versions In February 2024, Microsoft is likely to release the first preview of .NET 9 with a C# 13 compiler. You will be able to install its SDK from the following link: https://dotnet.microsoft.com/en-us/download/dotnet/9.0 The link will give a 404 Missing resource error until February 2024, so do not bother using it until then! 