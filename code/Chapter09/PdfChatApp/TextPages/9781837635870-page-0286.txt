Chapter 5 267 3. Run the PeopleApp project and view the result, as shown in the following output: Apples, 5 there are. Naming the fields of a tuple To access the fields of a tuple, the default names are Item1, Item2, and so on. You can explicitly specify the field names: 1. In Person.cs, add statements to define a method that returns a tuple with named fields, as shown in the following code: // Method that returns a tuple with named fields. public (string Name, int Number) GetNamedFruit() { return (Name: "Apples", Number: 5); } 2. In Program.cs, add statements to call the method and output the tupleâ€™s named fields, as shown in the following code: var fruitNamed = bob.GetNamedFruit(); WriteLine($"There are {fruitNamed.Number} {fruitNamed.Name}."); We use var to shorten the following full syntax: (string Name, int Number) fruitNamed = bob.GetNamedFruit(); 3. Run the PeopleApp project and view the result, as shown in the following output: There are 5 Apples. If you construct a tuple from another object, you can use a feature introduced in C# 7.1 called tuple name inference. 4. In Program.cs, create two tuples, each made of a string and int value, as shown in the fol- lowing code: var thing1 = ("Neville", 4); WriteLine($"{thing1.Item1} has {thing1.Item2} children."); var thing2 = (bob.Name, bob.Children.Count); WriteLine($"{thing2.Name} has {thing2.Count} children."); 