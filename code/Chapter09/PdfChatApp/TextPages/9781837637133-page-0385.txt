Building and Securing Web Services Using Minimal APIs 352 Your custom JSON serializer context must be added to the service dependencies, as shown in the following code: builder.Services.ConfigureHttpJsonOptions(options => { options.SerializerOptions.AddContext<MyJsonSerializerContext>(); }); Building a native AOT project Now let’s see a practical example using the new project template: 1. In the solution named Chapter08, add a native AOT-compatible web service project, as defined in the following list: • Project template: ASP.NET Core Web API (native AOT) / webapiaot This is a new project template introduced with .NET 8. It is different from the Web API / webapi project template. It does not have an option to use controllers since native AOT support is currently minimal APIs-only. It also does not have an option for HTTPS because HTTPS is often handled by a reverse-proxy in cloud-native deployments. In JetBrains Rider, se- lect ASP.NET Core Web Application and then select the Type of Web API (native AOT). • Solution file and folder: Chapter08 • Project file and folder: Northwind.MinimalAot.Service • Enable Docker: Cleared. • Do not use top-level statements: Cleared. In the Properties folder, in launchSettings.json, note only http is configured; delete • the launchUrl and modify the port to use 5083, as shown highlighted in the following configuration: { "$schema": "http://json.schemastore.org/launchsettings.json", "profiles": { "http": { "commandName": "Project", "dotnetRunMessages": true, "launchBrowser": true, "launchUrl": "", "applicationUrl": "http://localhost:5083", "environmentVariables": { 