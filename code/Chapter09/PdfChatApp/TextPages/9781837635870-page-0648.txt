Chapter 12 629 You can develop and run ASP.NET Core applications cross-platform on Windows, macOS, and Linux. Microsoft has even created a cross-platform, super-performant web server named Kestrel, and the entire stack is open source. ASP.NET Core 2.2 or later projects default to the new in-process hosting model. This gives a 400% per- formance improvement when hosting in Microsoft IIS, but Microsoft still recommends using Kestrel for even better performance. Building websites using ASP.NET Core Websites are made up of multiple web pages loaded statically from the filesystem or generated dy- namically by a server-side technology such as ASP.NET Core. A web browser makes GET requests using Unique Resource Locators (URLs) that identify each page and can manipulate data stored on the server using POST, PUT, and DELETE requests. With many websites, the web browser is treated as a presentation layer, with almost all the processing performed on the server side. Some JavaScript might be used on the client side to implement form validation warnings and some presentation features, such as carousels. ASP.NET Core provides multiple technologies for building the user interface for websites: • ASP.NET Core Razor Pages is a simple way to dynamically generate HTML for simple websites. You will learn about them in detail in Chapter 13, Building Websites Using ASP.NET Core Razor Pages. • ASP.NET Core MVC is an implementation of the Model-View-Controller (MVC) design pattern that is popular for developing complex websites. Blazor lets you build user interface components using C# and .NET instead of a JavaScript-based • UI framework like Angular, React, and Vue. Early versions of Blazor required a developer to choose a hosting model. The Blazor WebAssembly hosting model runs your code in the browser like a JavaScript-based framework would. The Blazor Server hosting model runs your code on the server and updates the web page dynamically. Introduced with .NET 8 is a unified, full-stack hosting model that allows individual components to execute either on the server or client side, or even adapt dynamically at runtime. You will learn about Blazor in detail in Chapter 15, Building User Interfaces Using Blazor. Comparison of file types used in ASP.NET Core It is useful to summarize the file types used by these technologies because they are similar but different. If the reader does not understand some subtle but important differences, it can cause much confusion when trying to implement their own projects. Please note the differences in Table 12.1: Technology Special filename File extension Directive .razor Razor Component (Blazor) .razor @page Razor Component (Blazor with page routing) .cshtml @page Razor Page 