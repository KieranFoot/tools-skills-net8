Working with Data Using Entity Framework Core 548 4. Run the code, enter 500 when prompted to enter a product price, and view the result, as shown in the following output: Fail > No products found. Getting the generated SQL You might be wondering how well written the SQL statements are that are generated from the C# queries we write. EF Core 5 introduced a quick and easy way to see the SQL generated: 1. In the FilteredIncludes method, before using the foreach statement to enumerate the query, add a statement to output the generated SQL, as shown in the following code: Info($"ToQueryString: {categories.ToQueryString()}"); 2. In the QueryingProducts method, before using the foreach statement to enumerate the query, add a statement to output the generated SQL, as shown in the following code: Info($"ToQueryString: {products.ToQueryString()}"); 3. Run the code, enter a minimum value for units in stock, like 99, and view the result, as shown in the following partial output: Enter a minimum for units in stock: 95 Connection: Data Source=C:\cs12dotnet8\Chapter10\WorkingWithEFCore\bin\ Debug\net8.0\Northwind.db Info > ToQueryString: .param set @__stock_0 95 SELECT "c"."CategoryId", "c"."CategoryName", "c"."Description", "t"."ProductId", "t"."CategoryId", "t"."UnitPrice", "t"."Discontinued", "t"."ProductName", "t"."UnitsInStock" FROM "Categories" AS "c" LEFT JOIN ( SELECT "p"."ProductId", "p"."CategoryId", "p"."UnitPrice", "p"."Discontinued", "p"."ProductName", "p"."UnitsInStock" FROM "Products" AS "p" WHERE "p"."UnitsInStock" >= @__stock_0 ) AS "t" ON "c"."CategoryId" = "t"."CategoryId" ORDER BY "c"."CategoryId" Beverages has 2 products with a minimum of 95 units in stock. Sasquatch Ale has 111 units in stock. Rhönbräu Klosterbier has 125 units in stock. ... Note the SQL parameter named @__stock_0 has been set to a minimum stock value of 95. 