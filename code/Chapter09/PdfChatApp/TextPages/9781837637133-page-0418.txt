Chapter 9 385 While we wait for an official implementation, you can read or download the source code to his ex- tensions at the following link: https://github.com/mgravell/DistributedCacheDemo/blob/main/ DistributedCacheExtensions.cs. The file is only 137 lines long, so it is easy to add to your own projects straight away. The main difference in the new extension methods is that you do not need to call the Set or SetAsync methods anymore because they are abstracted away inside the new GetAsync methods, as shown in the following code: // IDistributedCache methods. objectFromDatabase = GetFromDatabase(...); cache.Set(key: "ITEM_KEY", value: objectFromDatabase, options: ...); dataFromCache = cache.Get(key: "ITEM_KEY"); // New extension methods. dataFromCache = await cache.GetAsync(key: "ITEM_KEY", getMethod: GetFromDatabase(...), options: ..., cancellation: ...); Also, note that the new extension methods are all asynchronous and generic, with a type T that will be serialized as JSON by default, but this can be overridden to use alternatives like the binary format protobuf. More Information: You can learn more about the plans for these new extension methods at the following link: https://devblogs.microsoft.com/dotnet/caching-abstraction- improvements-in-aspnetcore/. Caching web responses using HTTP caching In-memory and distributed caching work with any type of app or service, using any transport tech- nology, because all the magic happens on the server. Response aka HTTP caching is tied to HTTP GET requests and responses because it is based on HTTP headers. Therefore, it only works with apps and services that use HTTP as their transport technology, like web services built using Web APIs, minimal APIs, and OData. More Information: You can read the official standard for HTTP caching at the following link: https://www.rfc-editor.org/rfc/rfc9111. Requirements for HTTP aka response caching include the following: • The request must be a GET or HEAD one. POST, PUT, and DELETE requests, and so on, are never cached by HTTP caching. 200 OK status code. • The response must have a 