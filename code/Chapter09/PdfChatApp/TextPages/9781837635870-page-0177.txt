Controlling Flow, Converting Types, and Handling Exceptions 158 By default, in .NET 6 or later projects, Microsoft enables nullable reference types, so you will see many more compiler warnings like this. In production code, you should add code to check for null and handle that possibility appropriately, as shown in the following code: if (input is null) { WriteLine("You did not enter a value so the app has ended."); return; // Exit the app. } In this book, I will not give instructions to add these null checks every time because the code samples are not designed to be production-quality, and having null checks everywhere will clutter the code and use up valuable pages. You will probably see hundreds more examples of potentially null variables throughout the code samples in this book. Those warnings are safe to ignore for the book code examples. You only need to pay attention to similar warnings when you write your own production code. You will see more about null handling in Chapter 6, Implementing Interfaces and Inheriting Classes. In this case, it is impossible for input to be null because the user must press Enter for ReadLine to ReadLine method will return return, and if they have not typed any characters at that point then the an empty string. Letâ€™s tell the compiler that it does not need to show us this warning: 1. To disable the compiler warning, change input to input!, as shown highlighted in the fol- lowing code: int age = int.Parse(input!); An exclamation mark ! after an expression is called the null-forgiving operator and it disables the compiler warning. The null-forgiving operator has no effect at runtime. If the expression could evaluate to null at runtime, perhaps because we assigned it in another way, then an exception would be thrown. This code includes two messages to indicate before parsing and after parsing to make the flow through the code clearer. These will be especially useful as the example code grows more complex. 2. Run the code, enter 49, and view the result, as shown in the following output: Before parsing What is your age? 49 You are 49 years old. After parsing 