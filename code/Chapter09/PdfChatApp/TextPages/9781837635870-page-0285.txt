Building Your Own Types with Object-Oriented Programming 266 } public class LifeTheUniverseAndEverything { public TextAndNumber GetTheData() { return new TextAndNumber { Text = "What's the meaning of life?", Number = 42 }; } } But defining a class just to combine two values together is unnecessary because, in modern versions of C#, we can use tuples. Tuples are an efficient way to combine two or more values into a single unit. I pronounce them as tuh-ples but I have heard other developers pronounce them as too-ples. To-may- toe, to-mah-toe, po-tay-toe, po-tah-toe, I guess. Tuples have been a part of some languages, such as F#, since their first version, but .NET only added support for them with .NET 4 in 2010, using the System.Tuple type. It was only with C# 7 in 2017 that C# added language syntax support for tuples using the parentheses characters (), and at the same time, .NET added a new System.ValueTuple type that is more efficient in some common scenarios than the old .NET 4 System.Tuple type. The C# tuple syntax uses the more efficient one. Let’s explore tuples: 1. In Person.cs, add statements to define a method that returns a tuple combining a string and int, as shown in the following code: // Method that returns a tuple: (string, int). public (string, int) GetFruit() { return ("Apples", 5); } 2. In Program.cs, add statements to call the GetFruit method, and then output the tuple’s fields, which are automatically named Item1 and Item2, as shown in the following code: (string, int) fruit = bob.GetFruit(); WriteLine($"{fruit.Item1}, {fruit.Item2} there are."); 