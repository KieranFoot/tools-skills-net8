Chapter 6 365 8. What’s the difference between a destructor and a deconstruct method? 9. What are the signatures of the constructors that all exceptions should have? 10. What is an extension method, and how do you define one? Exercise 6.2 – Practice creating an inheritance hierarchy Explore inheritance hierarchies by following these steps: 1. Add a new console app named Ch06Ex02Inheritance to your Chapter06 solution. Shape with properties named Height, Width, and Area. 2. Create a class named Rectangle, Square, and Circle—with any additional 3. Add three classes that derive from it — members you feel are appropriate and that override and implement the Area property correctly. 4. In Program.cs, add statements to create one instance of each shape, as shown in the following code: Rectangle r = new(height: 3, width: 4.5); WriteLine($"Rectangle H: {r.Height}, W: {r.Width}, Area: {r.Area}"); Square s = new(5); WriteLine($"Square H: {s.Height}, W: {s.Width}, Area: {s.Area}"); Circle c = new(radius: 2.5); WriteLine($"Circle H: {c.Height}, W: {c.Width}, Area: {c.Area}"); 5. Run the console app and ensure that the result looks like the following output: Rectangle H: 3, W: 4.5, Area: 13.5 Square H: 5, W: 5, Area: 25 Circle H: 5, W: 5, Area: 19.6349540849362 Exercise 6.3 – Writing better code Read the following online-only section to learn how to use analyzers to write better code: https:// . github.com/markjprice/cs12dotnet8/blob/main/docs/ch06-writing-better-code.md Exercise 6.4 – Explore topics Use the links on the following page to learn more about the topics covered in this chapter: https://github.com/markjprice/cs12dotnet8/blob/main/docs/book-links.md#chapter-6--- implementing-interfaces-and-inheriting-classes 