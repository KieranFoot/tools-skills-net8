Chapter 14 711 // Add to database using EF Core. EntityEntry<Customer> added = await _db.Customers.AddAsync(c); int affected = await _db.SaveChangesAsync(); if (affected == 1) { // If saved to database then store in cache. _memoryCache.Set(c.CustomerId, c, _cacheEntryOptions); return c; } return null; } 8. Implement the retrieve all method to always read the latest customers from the database, as shown in the following code: public Task<Customer[]> RetrieveAllAsync() { return _db.Customers.ToArrayAsync();. } 9. Implement the retrieve method to use the in-memory cache if possible, as shown in the fol- lowing code: public Task<Customer?> RetrieveAsync(string id) { id = id.ToUpper(); // Normalize to uppercase. // Try to get from the cache first. if (_memoryCache.TryGetValue(id, out Customer? fromCache)) return Task.FromResult(fromCache); // If not in the cache, then try to get it from the database. Customer? fromDb = _db.Customers.FirstOrDefault(c => c.CustomerId == id); // If not -in database then return null result. if (fromDb is null) return Task.FromResult(fromDb); // If in the database, then store in the cache and return customer. _memoryCache.Set(fromDb.CustomerId, fromDb, _cacheEntryOptions); return Task.FromResult(fromDb)!; } 