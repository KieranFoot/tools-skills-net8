Querying and Manipulating Data Using LINQ 622 As an optional task, explore how you might use the Chunk method to output pages of products. You can read more about partitioning items in a sequence using Skip, Take, and Chunk at the following link: https://learn.microsoft.com/en-us/dotnet/csharp/ programming-guide/concepts/linq/partitioning-data. Good Practice: You should always order data before calling Skip and Take if you want to implement paging. This is because each time you execute a query, the LINQ provider does not have to guarantee to return the data in the same order unless you have specified it. Therefore, if the SQLite provider wanted to, the first time you request a page of products, they might be in ProductId order, but the next time you request a page of products, they might be in UnitPrice order, or a random order, and that would confuse the users! In practice, at least for relational databases, the default order is usually by its index on the primary key. Sweetening LINQ syntax with syntactic sugar C# 3 introduced some new language keywords in 2008 to make it easier for programmers with ex- perience with SQL to write LINQ queries. This syntactic sugar is sometimes called the LINQ query comprehension syntax. Consider the following array of string values: string[] names = new[] { "Michael", "Pam", "Jim", "Dwight", "Angela", "Kevin", "Toby", "Creed" }; To filter and sort the names, you could use extension methods and lambda expressions, as shown in the following code: var query = names .Where(name => name.Length > 4) .OrderBy(name => name.Length) .ThenBy(name => name); Or you could achieve the same results by using query comprehension syntax, as shown in the fol- lowing code: var query = from name in names where name.Length > 4 orderby name.Length, name select name; The compiler changes the query comprehension syntax to the equivalent extension methods and lambda expressions for you. 