Chapter 13 679 You can have as many <ItemGroup> elements as you want, so it is good practice to use them to logically divide elements by type. They are merged automatically by build tools. Usually, you manually add these elements when you know you need to use them, but unfortunately, Visual Studio 2022 and other code editors sometimes mess things up by trying to be helpful. In one scenario, you might have added a new Razor Page file in the Pages folder named index.cshtml. You start the web server, but the page does not appear. Or, you are working on a GraphQL service, and you add a file named seafoodProducts.graphql. But when you run the GraphQL tool to auto-generate client-side proxies, it fails. These are both common indications that your code editor has decided that the new file should not be part of the project. It has automatically added an element to the project file to remove the file from the build process without telling you. To solve this type of problem, review the project file for unexpected entries like the following, and delete them: <ItemGroup> <Content Remove="Pages\index.cshtml" /> </ItemGroup> <ItemGroup> <GraphQL Remove="seafoodProducts.graphql" /> </ItemGroup> Good Practice: When using tools that automatically “fix” problems without telling you, review your project file for unexpected elements when unexpected results happen. More Information: You can read more about managing MS Build items at the following link: https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-items. Project file build actions As we have just seen, it is important that ASP.NET Core developers understand how project build actions affect compilation. 