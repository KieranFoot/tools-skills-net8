Chapter 15 679 Importing the namespaces here means we do not have to import them at the top of .razor files. The _Imports.razor file only applies to .razor files. If you use code-behind .cs files to implement component code, then they must have namespaces imported separately, or use global usings to implicitly import the namespace. Note the statement to statically import the render mode type: @using static Microsoft.AspNetCore.Components.Web.RenderMode. 4. In Program.cs, import the namespace to use the AddNorthwindContext extension method, as shown in the following code: using Northwind.EntityModels; // To use AddNorthwindContext method. 5. In the section that adds services to the container, add a statement that registers NorthwindContext as a service, as shown in the following code: builder.Services.AddNorthwindContext(); Building a static server rendered component for data Next, we will add a component that can do the same job as a Razor Page or Razor View in a traditional ASP.NET Core website. It will not have any interactivity that requires the component to execute on the server or client. It will allow the visitor to see a table of products from the Northwind database: 1. In the Components\Pages folder, add a new file named Products.razor. In Visual Studio 2022, the project item template is named Razor Component. In JetBrains Rider, the project item template is named Blazor Component. Good Practice: Component filenames must start with an uppercase letter, or you will have compile errors! 2. In Products.razor, set the route to /products, inject a Northwind data context, define a table to render products, and write a code block to get the products when the page has initialized, as shown in the following markup: @page "/products" @inject NorthwindContext db <h1>Products</h1> <table class="table"> <thead> <tr> <th>Product ID</th> <th>Product Name</th> 