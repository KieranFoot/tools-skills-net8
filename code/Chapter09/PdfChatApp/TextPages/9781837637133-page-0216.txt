Chapter 5 183 Outer method starting... Inner method starting... Outer method finished. Inner method finished. Console app is stopping. 6. Alternatively, the outer method could finish before the inner method starts, as shown in the following output: Outer method starting... Outer method finished. Inner method starting... Inner method finished. Console app is stopping. The OuterMethod can finish its work before the InnerMethod, as shown by what it writes to the console, but its task must wait, as shown by the console not stopping until both the outer and inner tasks finish. Wrapping tasks around other objects Sometimes you might have a method that you want to be asynchronous, but the result to be returned is not itself a task. You can wrap the return value in a successfully completed task, return an exception, or indicate that the task was canceled by using one of the Task static methods, as shown in Table 5.2: Method Description Creates a Task<TResult> object whose Result FromResult<TResult>(TResult) property is the non-task result and whose Status property is RanToCompletion. Creates a Task<TResult> that’s completed with a FromException<TResult>(Exception) specified exception. Creates a Task<TResult> that’s completed due to FromCanceled<TResult>(CancellationToken) cancellation with a specified cancellation token. Table 5.2: Methods to create a Task in various scenarios These methods are useful when you need to: • Implement an interface that has asynchronous methods, but your implementation is synchro- nous. This is common for websites and services. • Mock asynchronous implementations during unit testing. 