Chapter 6 341 10. Add statements that will dereference the Building and Street properties, as shown in the following code: WriteLine(address.Building.Length); WriteLine(address.Street.Length); 11. Note the Warning CS8602 on setting the Building but not the Street, as shown in the follow- ing output: CS8602 Dereference of a possibly null reference. At runtime it is still possible for an exception to be thrown when working with Street, but the Building compiler should continue to warn you of potential exceptions when working with so that you can change your code to avoid them. 12. Use the null-conditional operator to return null instead of accessing the Length, as shown in the following code: WriteLine(address.Building?.Length); 13. Run the console app, and note that the statement that accesses the Length of the Building outputs a null value (blank line), but a runtime exception occurs when we access the Length Street, as shown in the following output: of the Unhandled exception. System.NullReferenceException: Object reference not set to an instance of an object. 14. Wrap the statement that accesses the Street length in a null check, as shown in the following code: if (address.Street is not null) { WriteLine(address.Street.Length); } It is worth reminding yourself that an NRT is only about asking the compiler to provide warnings about potential null values that might cause problems. It does not actually change the behavior of your code. It performs a static analysis of your code at compile time. This explains why the new language feature is named nullable reference types (NRTs). Starting with C# 8.0, unadorned reference types can become non-nullable, and the same syntax is used to make a reference type nullable, as it is used for value types. Suffixing a reference type with ? does not change the type. This is different from suffixing a value type with ?, which changes its type to Nullable<T>. Reference types can already have null values. All you do with NRTs is tell the compiler that you expect it to be null, so the compiler does not need to warn you. However, this does not remove the need to perform null checks throughout your code. 