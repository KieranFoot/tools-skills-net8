Chapter 11 477 The developer does not need to understand or implement the underlying technology used, and SignalR will automatically switch between underlying technologies depending on what the visitor’s web browser supports. For example, SignalR will use WebSocket when it’s available and gracefully falls back on other technologies such as AJAX long polling when it isn’t, while your application code stays the same. SignalR is an API for server-to-client remote procedure calls (RPCs). The RPCs call JavaScript func- tions on clients from server-side .NET code. SignalR has hubs to define the pipeline and handles the message dispatching automatically using two built-in hub protocols: JSON and a binary one based on MessagePack. On the server side, SignalR runs everywhere that ASP.NET Core runs: Windows, macOS, or Linux servers. SignalR supports the following client platforms: • JavaScript clients for current browsers including Chrome, Firefox, Safari, and Edge. • .NET clients including Blazor, .NET MAUI, and Xamarin for Android and iOS mobile apps. • Java 8 and later. Azure SignalR Service Earlier, I mentioned that it would be good practice to separate the SignalR service hosting project from the web project that uses the JavaScript library to act as a client. This is because a SignalR ser- vice potentially needs to handle lots of simultaneous client requests and respond quickly to them all. Once you separate the SignalR hosting, you can take advantage of Azure SignalR Service. This offers global reach and a world-class data center and network, and it scales to millions of connections while meeting SLAs like providing compliance and high security. You can learn more about Azure SignalR Service at the following link: https://learn. microsoft.com/en-us/azure/azure-signalr/signalr-overview. Designing method signatures When designing the method signatures for a SignalR service, it is good practice to define methods with a single message parameter rather than multiple simple type parameters. This good practice is not enforced by the technology with SignalR, so you will have to be disciplined. For example, instead of passing multiple string (or other type) values, define a type with multiple properties to use as the single Message parameter, as shown in the following code: // Bad practice: RPC method with multiple parameters. public void SendMessage(string to, string body) // Good practice: single parameter using a complex type. public class Message { 