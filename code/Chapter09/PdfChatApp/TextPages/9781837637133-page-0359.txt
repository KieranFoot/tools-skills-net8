Building and Securing Web Services Using Minimal APIs 326 For example, Visual Studio 2022 has a project item template named API with read/write endpoints, using Entity Framework that allows you to select: • An entity model class like Customer. • An endpoints class that will contain all the mapping methods. DbContext-derived class like NorthwindContext. • A • A database provider like SQLite or SQL Server. More Information: You can learn more about this project item template at the following link: https://devblogs.microsoft.com/visualstudio/web-api-development-in- visual-studio-2022/#scaffolding-in-visual-studio/. Relaxing the same origin security policy using CORS Modern web browsers support multiple tabs so users can visit multiple websites at the same time efficiently. If code executing in one tab could access resources in another tab, then that could be a vector of attack. All web browsers implement a security feature called the same origin policy. This means that only requests that come from the same origin are allowed. For example, if a block of JavaScript is served from the same origin that hosts a web service or served an <iframe>, then that JavaScript can call the service and access the data in the <iframe>. If a request is made from a different origin, then the request fails. But what counts as the “same origin?” An origin is defined by: • Scheme aka protocol, for example, http or https. 801 or 5081. The default port for http is 80 and for https is 443. • Port, for example, www.example.com, www.example.net, example.com. • Host/domain/subdomain, for example, If the origin is https://www.example.com/about-us/, then the following are not the same origin: • Different scheme: http://www.example.com/about-us/ • Different host/domain: https://www.example.co.uk/about-us/ • Different subdomain: https://careers.example.com/about-us/ • Different port: https://www.example.com:444/about-us/ It is the web browser that sets the Origin header automatically when making a request. This cannot be overridden. Warning! The same origin policy does not apply to any requests that come from a non-web browser because, in those cases, the programmer could change the Origin header anyway. If you create a console app or even an ASP.NET Core project that uses .NET classes like HttpClient to make a request, the same origin policy does not apply unless you explicitly set the Origin header. 