Chapter 10 523 You can learn more about the ADO.NET for SQL Server library at the following link: https://learn.microsoft.com/en-us/sql/connect/ado-net/microsoft-ado-net-sql-server Choosing an EF Core database provider Before we dive into the practicalities of managing data using EF Core, letâ€™s briefly talk about choosing between EF Core database providers. To manage data in a specific database, we need classes that know how to efficiently talk to that database. EF Core database providers are sets of classes that are optimized for a specific data store. There is even a provider for storing the data in the memory of the current process, which can be useful for high-performance unit testing since it avoids hitting an external system. They are distributed as NuGet packages, as shown in Table 10.1: To manage this data store Reference this NuGet package Microsoft.EntityFrameworkCore.SqlServer SQL Server 2012 or later Microsoft.EntityFrameworkCore.SQLite SQLite 3.7 or later Microsoft.EntityFrameworkCore.InMemory In-memory Microsoft.EntityFrameworkCore.Cosmos Azure Cosmos DB SQL API MySQL.EntityFrameworkCore MySQL Oracle.EntityFrameworkCore Oracle DB 11.2 Npgsql.EntityFrameworkCore.PostgreSQL PostgreSQL Table 10.1: NuGet packages for common EF Core database providers You can reference as many EF Core database providers in the same project as you need. Each package includes the common shared types as well as provider-specific types. Connecting to a named SQLite database To connect to an SQLite database, we just need to know the database path and filename, set using the legacy parameter Filename or the modern equivalent Data Source. The path can be relative to the current directory or an absolute path. We specify this information in a connection string. Defining the Northwind database context class A class named Northwind will be used to represent the database. To use EF Core, the class must inherit from DbContext. The DbContext class understands how to communicate with databases and dynami- cally generate SQL statements to query and manipulate data. Your DbContext-derived class should have an overridden method named OnConfiguring, which will set the database connection string. 