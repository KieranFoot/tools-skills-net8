Building and Consuming Web Services 706 8. Navigate to https://localhost:5151/weatherforecast and note the Web API service should return a JSON document with five random weather forecast objects in an array, as shown in Figure 14.1: Figure 14.1: A request and response from a weather forecast web service 9. Note that browsers like Chrome will attempt to request a favicon.ico file to show in the browser tab. If the 404 errors annoy you, then you could create one, but we are only using the browser for basic web service testing at this time. 10. Close Developer Tools. https://localhost:5151/weatherforecast/14 and note that the response when 11. Navigate to requesting a two-week weather forecast contains 14 forecasts. 12. Close Chrome and shut down the web server. Creating a web service for the Northwind database Unlike MVC controllers, Web API controllers do not call Razor views to return HTML responses for website visitors to see in browsers. Instead, they use content negotiation with the client application that made the HTTP request to return data in formats such as XML, JSON, or X-WWW-FORM-URLEN- CODED in their HTTP response, which looks like the following: firstName=Mark&lastName=Price&jobtitle=Author The client application must then deserialize the data from the negotiated format. The most used for- mat for modern web services is JavaScript Object Notation (JSON) because it is compact and works natively with JavaScript in a browser when building Single-Page Applications (SPAs) with client-side technologies like Angular, React, and Vue. We will reference the Entity Framework Core entity data model for the Northwind database that you created in Chapter 12, Introducing Web Development Using ASP.NET Core: 1. In the Northwind.WebApi project, add a project reference to the Northwind data context class library for either SQLite or SQL Server, as shown in the following markup: 