Caching, Queuing, and Resilient Background Services 418 _connection = _factory.CreateConnection(); _channel = _connection.CreateModel(); _consumer = new(_channel); _channel.QueueDeclare(queue: queueNameAndRoutingKey, durable: false, exclusive: false, autoDelete: false, arguments: null); _consumer = new(_channel); _consumer.Received += (model, args) => { byte[] body = args.Body.ToArray(); ProductQueueMessage? message = JsonSerializer .Deserialize<ProductQueueMessage>(body); if (message is not null) { _logger.LogInformation($"Received product. Id: { message.Product.ProductId}, Name: {message.Product .ProductName}, Message: {message.Text}"); } else { _logger.LogInformation("Received unknown: {0}.", args.Body.ToArray()); } }; // Start consuming as messages arrive in the queue. _channel.BasicConsume(queue: queueNameAndRoutingKey, autoAck: true, consumer: _consumer); } protected override async Task ExecuteAsync( CancellationToken stoppingToken) { while (!stoppingToken.IsCancellationRequested) { _logger.LogInformation("Worker running at: {time}", DateTimeOffset.Now); 