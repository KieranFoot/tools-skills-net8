Multitasking and Concurrency 184 Imagine that you need to create a method to validate XML input and the method must conform to an interface that requires a Task<T> to be returned, as shown in the following code: public interface IValidation { Task<bool> IsValidXmlTagAsync(this string input); } The code in this section is for illustration only. You do not need to enter it in your project. We could use these helpful FromX methods to return the results wrapped in a task, as shown in the following code: using System.Text.RegularExpressions; namespace Packt.Shared; public static class StringExtensions : IValidation { public static Task<bool> IsValidXmlTagAsync(this string input) { if (input == null) { return Task.FromException<bool>( new ArgumentNullException($"Missing {nameof(input)} parameter")); } if (input.Length == 0) { return Task.FromException<bool>( new ArgumentException($"{nameof(input)} parameter is empty.")); } return Task.FromResult(Regex.IsMatch(input, @"^<([a-z]+)([^<]+)*(?:>(.*)<\/\1>|\s+\/>)$")); } } If the method you need to implement returns a Task (equivalent to void in a synchronous method), then you can return a predefined completed Task object, as shown in the following code: 