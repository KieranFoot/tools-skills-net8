Working with Data Using Entity Framework Core 558 WHERE NOT ("p"."Discontinued") AND ("p"."ProductName" LIKE @__ Format_1) Chef Anton's Cajun Seasoning has 53 units in stock. Discontinued? False Queso Manchego La Pastora has 86 units in stock. Discontinued? False Gumbär Gummibärchen has 15 units in stock. Discontinued? False You’ve now seen many common ways to query data using EF Core. Next, we will look at how data is loaded and tracked and why you might want to control how EF Core does that. Loading and tracking patterns with EF Core There are three loading patterns that are commonly used with EF Core: • Eager loading: Load data early. • Lazy loading: Load data automatically just before it is needed. • Explicit loading: Load data manually. In this section, we’re going to introduce each of them. Eager loading entities using the Include extension method In the QueryingCategories method, the code currently uses the Categories property to loop through each category, outputting the category name and the number of products in that category. This works because, when we wrote the query, we enabled eager loading by calling the Include method for the related products. Let’s see what happens if we do not call Include: 1. In Program.Queries.cs, in the QueryingCategories method, modify the query to comment Include method call, as shown highlighted in the following code: out the IQueryable<Category>? categories = db.Categories; //.Include(c => c.Products); 2. In Program.cs, comment out all method calls except ConfigureConsole and QueryingCategories. 3. Run the code and view the result, as shown in the following partial output: Beverages has 0 products. Condiments has 0 products. Confections has 0 products. Dairy Products has 0 products. Grains/Cereals has 0 products. Meat/Poultry has 0 products. Produce has 0 products. Seafood has 0 products. 