Chapter 10 577 Pooling database contexts The DbContext class is disposable and is designed following the single-unit-of-work principle. In the previous code examples, we created all the DbContext-derived NorthwindDb instances in a using block so that Dispose is properly called at the end of each unit of work. A feature of ASP.NET Core that is related to EF Core is that it makes your code more efficient by pooling database contexts when building websites and services. This allows you to create and dispose of as many DbContext-derived objects as you want, knowing that your code is still as efficient as possible. Practicing and exploring Test your knowledge and understanding by answering some questions, getting some hands-on practice, and exploring this chapter’s topics with deeper research. Exercise 10.1 – Test your knowledge Answer the following questions: 1. What type would you use for the property that represents a table, for example, the Products property of a database context? What type would you use for the property that represents a one-to-many relationship, for 2. example, the Products property of a Category entity? 3. What is the EF Core convention for primary keys? 4. When might you use an annotation attribute in an entity class? 5. Why might you choose the Fluent API in preference to annotation attributes? Serializable mean? 6. What does a transaction isolation level of DbContext.SaveChanges() method return? 7. What does the 8. What is the difference between eager loading and explicit loading? 9. How should you define an EF Core entity class to match the following table? CREATE TABLE Employees( EmpId INT IDENTITY, FirstName NVARCHAR(40) NOT NULL, Salary MONEY ) 10. What benefit do you get from declaring entity navigation properties as virtual? Exercise 10.2 – Exporting data using different serialization formats In the Chapter10 solution, create a console app named Ch10Ex02DataSerialization that queries the Northwind database for all the categories and products, and then serializes the data using at least three formats of serialization available to .NET. Which format of serialization uses the least number of bytes? 