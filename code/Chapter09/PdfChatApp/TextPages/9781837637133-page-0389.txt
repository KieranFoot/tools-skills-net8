Building and Securing Web Services Using Minimal APIs 356 while (r.Read()) { Product p = new() { ProductId = r.GetInt32("ProductId"), ProductName = r.GetString("ProductName"), UnitPrice = r.GetDecimal("UnitPrice") }; products.Add(p); } r.Close(); return products; } } With native AOT, we cannot use EF Core, so we are using the lower-level ADO.NET SqlClient API. This is faster and more efficient anyway. In the future, perhaps with .NET 9 or .NET 10, we will be able to use our EF Core model for Northwind instead. 9. In Program.cs, note the call to the CreateSlimBuilder method, which ensures that only the essential features of ASP.NET Core are enabled by default, so it minimizes the deployed web service size, as shown in the following code: var builder = WebApplication.CreateSlimBuilder(args); The CreateSlimBuilder method does not include support for HTTPS or HTTP/3, although you can add those back in yourself if you need them. It does support JSON file configuration for appsettings.json and logging. 10. In Program.cs, after the call to builder.Build(), delete the statements that generated some sample todos and map some endpoints, as shown in the following code: var sampleTodos = new Todo[] { new(1, "Walk the dog"), new(2, "Do the dishes", DateOnly.FromDateTime(DateTime.Now)), new(3, "Do the laundry", DateOnly.FromDateTime(DateTime.Now. AddDays(1))), new(4, "Clean the bathroom"), 