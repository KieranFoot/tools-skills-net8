Working with Common .NET Types 440 bool MoveNext(); void Reset(); } For example, to perform an action on each object in the passengers collection, we could write the following code: foreach (Passenger p in passengers) { // Perform an action on each passenger. } As well as the object-based collection interface, there is also a generic collection interface, where the generic type defines the type stored in the collection. It has additional members like IsReadOnly, Add, Clear, Contains, and Remove, as shown in the following code: namespace System.Collections.Generic; public interface ICollection<T> : IEnumerable<T>, IEnumerable { int Count { get; } bool IsReadOnly { get; } void Add(T item); void Clear(); bool Contains(T item); void CopyTo(T[] array, int index); bool Remove(T item); } Working with lists Lists, that is, a type that implements IList<T>, are ordered collections, with an int index to show the position of an item within the list, as shown in the following code: namespace System.Collections.Generic; [DefaultMember("Item")] // aka "this" indexer. public interface IList<T> : ICollection<T>, IEnumerable<T>, IEnumerable { T this[int index] { get; set; } int IndexOf(T item); void Insert(int index, T item); void RemoveAt(int index); } 