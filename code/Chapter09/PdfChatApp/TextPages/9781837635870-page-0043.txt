Hello, C#! Welcome, .NET! 24 4. Press any key to close the console app window and return to Visual Studio. Revealing the namespace for the Program class Now, let’s discover what namespace the Program class has been defined within: 1. In Program.cs, before the statement that throws an exception, add statements to get the name of the namespace of the Program class, and then write it to the console, as shown in the fol- lowing code: string name = typeof(Program).Namespace ?? "None!"; Console.WriteLine($"Namespace: {name}"); ?? is the null-coalescing operator. The first statement means, “If the namespace of Program is null, then return None!; otherwise, return the name.” You will see more explanations of these keywords and operators throughout the book. For now, just enter the code and run it to see what it does. 2. In Visual Studio, navigate to Debug | Start Without Debugging. 3. The output in the console window will show the result of running your application, including Program class was defined without a namespace, as shown in the following that the hidden output: Namespace: None! 4. Press any key to close the console app window and return to Visual Studio. Adding a second project using Visual Studio 2022 Let’s add a second project to our solution to explore how to work with multiple projects: 1. In Visual Studio, navigate to File | Add | New Project…. Warning! The above step adds a new project to the existing solution. Do NOT navigate to File | New | Project…, which instead is meant to be used to create a new project and solution (although the dialog box has a dropdown to choose to add to an existing solution too). 2. In the Add a new project dialog, in Recent project templates, select Console App [C#] and then click Next. 3. In the Configure your new project dialog, for Project name, enter AboutMyEnvironment, leave the location as C:\cs12dotnet8\Chapter01, and then click Next. 4. In the Additional information dialog, select .NET 8.0 (Long Term Support) and select the Do not use top-level statements check box. 