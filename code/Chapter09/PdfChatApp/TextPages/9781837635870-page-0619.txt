Querying and Manipulating Data Using LINQ 600 public int ProductId { get; set; } [Required] [StringLength(40)] public string ProductName { get; set; } = null!; public int? SupplierId { get; set; } public int? CategoryId { get; set; } [StringLength(20)] public string? QuantityPerUnit { get; set; } // Required for SQL Server provider. [Column(TypeName = "money")] public decimal? UnitPrice { get; set; } public short? UnitsInStock { get; set; } public short? UnitsOnOrder { get; set; } public short? ReorderLevel { get; set; } public bool Discontinued { get; set; } } We have deliberately not defined any relationships between Category and Product so that we can see how to manually associate them with each other using LINQ later. 5. Modify the class file named NorthwindDb.cs, as shown in the following code: using Microsoft.Data.SqlClient; // To use SqlConnectionStringBuilder. using Microsoft.EntityFrameworkCore; // To use DbContext, DbSet<T>. namespace Northwind.EntityModels; public class NorthwindDb : DbContext { public DbSet<Category> Categories { get; set; } = null!; public DbSet<Product> Products { get; set; } = null!; protected override void OnConfiguring( DbContextOptionsBuilder optionsBuilder) { 