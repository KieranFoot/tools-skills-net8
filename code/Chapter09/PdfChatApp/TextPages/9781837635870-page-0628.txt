Chapter 11 609 3. Run the code and view the results. Note that there is a single line of output for each of the 77 products, as shown in the following output (edited to only include the first four items): 1: Chai in Beverages. 2: Chang in Beverages. 3: Aniseed Syrup in Condiments. 4: Chef Anton's Cajun Seasoning in Condiments. ... 4. In Program.Functions.cs, in the JoinCategoriesAndProducts method, at the end of the existing query, call the OrderBy method to sort by CategoryName, as shown highlighted in the following code: var queryJoin = db.Categories.Join( inner: db.Products, outerKeySelector: category => category.CategoryId, innerKeySelector: product => product.CategoryId, resultSelector: (c, p) => new { c.CategoryName, p.ProductName, p.ProductId }) .OrderBy(cp => cp.CategoryName); 5. Run the code and view the results. Note that there is a single line of output for each of the 77 products, and the results show all products in the Beverages category first, then the Condiments category, and so on, as shown in the following partial output: 1: Chai in Beverages. 2: Chang in Beverages. 24: Guaraná Fantástica in Beverages. 34: Sasquatch Ale in Beverages. ... Group-joining sequences Let’s explore group joining when working with the same two tables as we used to explore joining, Categories and Products, so we can compare the subtle differences: 1. In Program.Functions.cs, add a method to group and join, show the group name, and then show all the items within each group, as shown in the following code: private static void GroupJoinCategoriesAndProducts() { SectionTitle("Group join categories and products"); using NorthwindDb db = new(); // Group all products by their category to return 8 matches. 