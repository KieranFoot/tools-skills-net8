Building User Interfaces Using Blazor 770 2. In Customers.razor, in the OnParametersSetAsync method, add a statement to asynchronously delay for one second, as shown highlighted in the following code: protected override async Task OnParametersSetAsync() { await Task.Delay(1000); // Delay for one second. ... } 3. Start the Northwind.Blazor project using the https launch profile. https://localhost:5161/. 4. Start Chrome and navigate to In the left navigation menu, click Customers in Germany, and note that the Loadingâ€¦ message 5. appears for a second, and then is replaced by the table of customers. So far, the component provides only a read-only table of customers. Now, we will extend it with full CRUD operations. Defining forms using the EditForm component Microsoft provides ready-made components for building forms. We will use them to provide create, edit, and delete functionality for customers. Microsoft provides the EditForm component and several form elements such as InputText to make it easier to use forms with Blazor. EditForm can have a model set to bind it to an object with properties and event handlers for custom validation, as well as to recognize standard Microsoft validation attributes on the model class, as shown in the following code: <EditForm Model="@customer" OnSubmit="ExtraValidation"> <DataAnnotationsValidator /> <ValidationSummary /> <InputText id="name" @bind-Value="customer.CompanyName" /> <button type="submit">Submit</button> </EditForm> @code { private Customer customer = new(); private void ExtraValidation() { // Perform any extra validation you want. } } 