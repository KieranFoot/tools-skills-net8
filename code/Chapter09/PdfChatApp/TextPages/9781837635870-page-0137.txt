Controlling Flow, Converting Types, and Handling Exceptions 118 Good Practice: I recommend wrapping the statements for each section in #region and #endregion as shown in the preceding code so that you can easily collapse the sections. But I will not show this in future code tasks to save space. 5. Before running the console app, ask yourself a question: what do you think the value of b will be when output? Once youâ€™ve thought about that, run the code and compare your prediction against the actual result, as shown in the following output: a is 4, b is 3 The variable b has the value 3 because the ++ operator executes after the assign- ment; this is known as a postfix operator. If you need to increment before the assignment, then use the prefix operator. 6. Copy and paste the statements, and then modify them to rename the variables and use the prefix operator, as shown in the following code: int c = 3; int d = ++c; // Prefix means increment c before assigning it. WriteLine($"c is {c}, d is {d}"); 7. Rerun the code and note the result, as shown in the following output: a is 4, b is 3 c is 4, d is 4 Good Practice: Due to the confusion between the prefix and postfix for the increment and decrement operators when combined with an assignment, the Swift programming language designers decided to drop support for this operator in version 3. My recom- mendation for usage in C# is to never combine the use of the ++ and -- operators with an assignment operator, =. Perform the operations as separate statements. Exploring binary arithmetic operators Increment and decrement are unary arithmetic operators. Other arithmetic operators are usually binary and allow you to perform arithmetic operations on two numbers, as the following shows: 1. Add statements to declare and assign values to two integer variables named e and f, and then apply the five common binary arithmetic operators to the two numbers, as shown in the fol- lowing code: int e = 11; int f = 3; 