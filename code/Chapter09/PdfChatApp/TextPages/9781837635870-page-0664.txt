Chapter 12 645 [Key] [Column(TypeName = "nchar (5)")] [StringLength(5)] [RegularExpression("[A-Z]{5}")] public string CustomerId { get; set; } = null!; [Required] [Column(TypeName = "nvarchar (40)")] [StringLength(40)] public string CompanyName { get; set; } 10. In Employee.cs, make the FirstName and LastName properties required. EmployeeTerritory.cs, make the TerritoryId property required. 11. In Order.cs, decorate the CustomerId property with a regular expression to enforce five up- 12. In percase characters. Product.cs, make the ProductName property required. 13. In Shipper.cs, make the CompanyName property required. 14. In Supplier.cs, make the CompanyName property required. 15. In Territory.cs, make the TerritoryId and TerritoryDescription properties required. 16. In Testing the class libraries Now let’s build some unit tests to ensure the class libraries are working correctly. Warning! If you are using the SQLite database provider, then when you call the CanConnect method with a wrong or missing database file, the provider creates a Northwind.db with 0 bytes! This is why it is so important that, in our NorthwindContext class, we explicitly check if the database file exists and throw an exception when it is instantiated if it does not exist to prevent this behavior. Let’s write the tests: 1. Use your preferred coding tool to add a new xUnit Test Project [C#] / xunit project named Northwind.UnitTests to the PracticalApps solution. Northwind.UnitTests project, add a project reference to the Northwind.DataContext 2. In the project for either SQLite or SQL Server, as shown highlighted in the following configuration: <ItemGroup> <!-- change Sqlite to SqlServer if you prefer --> <ProjectReference Include="..\Northwind.DataContext .Sqlite\Northwind.DataContext.Sqlite.csproj" /> </ItemGroup> 