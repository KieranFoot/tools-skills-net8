Chapter 5 243 Defining fields Let’s say that we have decided that a person is composed of a name and a date and time of birth. We will encapsulate these two values inside a person, and the values will be visible outside it: • Inside the Person class, write statements to declare two public fields to store a person’s name and the date of when they were born, as highlighted in the following code: public class Person : object { #region Fields: Data or state for this person. public string? Name; // ? means it can be null. public DateTimeOffset Born; #endregion } We have multiple choices for the data type of the Born field. .NET 6 introduced the DateOnly type. This would store only the date without a time value. DateTime stores the date and time of when the person was born, but it varies between local and UTC time. The best choice is DateTimeOffset, which stores the date, time, and hours offset from Universal Coordinated Time (UTC), which is related to the time zone. The choice depends on how much detail you need to store. Types for fields Since C# 8, the compiler has had the ability to warn you if a reference type like a string could have a null value and, therefore, potentially throw a NullReferenceException. Since .NET 6, the SDK enables those warnings by default. You can suffix the string type with a question mark, ?, to indicate that you accept this, and the warning disappears. You will learn more about nullability and how to handle it in Chapter 6, Implementing Interfaces and Inheriting Classes. You can use any type for a field, including arrays and collections such as lists and dictionaries. These would be used if you needed to store multiple values in one named field. In this example, a person only has one name and one date and time of birth. Member access modifiers Part of encapsulation is choosing how visible members are to other code. Note that, as we did with the class, we explicitly applied the public keyword to these fields. If we hadn’t, then they would be implicitly private to the class, which means they are accessible only inside the class. 