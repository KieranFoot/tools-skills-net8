Chapter 6 207 • Most popular library for scheduling jobs and implementing background services: Hangfire • Most popular library for distributed caching: Redis • Most popular library for queuing: RabbitMQ Working with images ImageSharp is a third-party cross-platform 2D graphics library. When .NET Core 1.0 was in develop- ment, there was negative feedback from the community about the missing System.Drawing name- space for working with 2D images. The ImageSharp project was started to fill that gap for modern .NET applications. In their official documentation for System.Drawing, Microsoft says, “The System.Drawing namespace is not recommended for new development due to not being supported within a Windows or ASP.NET service, and it is not cross-platform. ImageSharp and SkiaSharp are recommended as alternatives.” Six Labors released ImageSharp 3.0 in March 2023. It now requires .NET 6 or later and major future versions will target LTS releases of .NET, like .NET 8. You can read the announcement at the following link: https://sixlabors.com/posts/announcing-imagesharp-300/. Generating grayscale thumbnails Let’s see what can be achieved with ImageSharp: 1. Use your preferred code editor to create a console app project, as defined in the following list: • Project template: Console App / console • Solution file and folder: Chapter06 • Project file and folder: WorkingWithImages • Do not use top-level statements: Cleared • Enable native AOT publish: Cleared In the WorkingWithImages project, create an images folder and download the nine images 2. from the following link to it: https://github.com/markjprice/apps-services-net8/tree/ . master/images/Categories images folder and its files must be copied to the 3. If you are using Visual Studio 2022, then the WorkingWithImages\bin\Debug\net8 folder where the compiled console app will run. We can configure Visual Studio to do this for us, as shown in the following steps: 1. In Solution Explorer, select all nine images. 