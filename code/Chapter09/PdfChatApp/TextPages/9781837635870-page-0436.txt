Chapter 8 417 The width constant with the value 40 in the format code means “right-align 40 characters,” so both numbers are lined up to the right-hand edge. The N0 means “use thousand separators and zero decimal places.” 5. Run the code and view the result, as shown in the following output: ulong.MaxValue vs a 30-digit BigInteger ---------------------------------------- 18,446,744,073,709,551,615 123,456,789,012,345,678,901,234,567,890 Working with complex numbers A complex number can be expressed as a + bi, where a and b are real numbers and i is an imaginary 2 unit, where i = −1. If the real part a is zero, it is a pure imaginary number. If the imaginary part b is zero, it is a real number. Complex numbers have practical applications in many STEM (science, technology, engineering, and mathematics) fields of study. They are added by separately adding the real and imaginary parts of the summands; consider this: (a + bi) + (c + di) = (a + c) + (b + d)i Let’s explore complex numbers: 1. In Program.cs, add statements to add two complex numbers, as shown in the following code: Complex c1 = new(real: 4, imaginary: 2); Complex c2 = new(real: 3, imaginary: 7); Complex c3 = c1 + c2; // Output using the default ToString implementation. WriteLine($"{c1} added to {c2} is {c3}"); // Output using a custom format. WriteLine("{0} + {1}i added to {2} + {3}i is {4} + {5}i", c1.Real, c1.Imaginary, c2.Real, c2.Imaginary, c3.Real, c3.Imaginary); 2. Run the code and view the result, as shown in the following output: <4; 2> added to <3; 7> is <7; 9> 4 + 2i added to 3 + 7i is 7 + 9i 