Chapter 8 443 cities.Insert(0, "Sydney"); OutputCollection("After inserting Sydney at index 0", cities); cities.RemoveAt(1); cities.Remove("Milan"); OutputCollection("After removing two cities", cities); 5. Run the code and view the result, as shown in the following output: Initial list: London Paris Milan The first city is London. The last city is Milan. After inserting Sydney at index 0: Sydney London Paris Milan After removing two cities: Sydney Paris Working with dictionaries Dictionaries are a good choice when each value (or object) has a unique sub-value (or a made-up value) that can be used as a key to quickly find a value in the collection later. The key must be unique. For example, if you are storing a list of people, you could choose to use a government-issued identity number as the key. Dictionaries are called hashmaps in other languages like Python and Java. Think of the key as being like an index entry in a real-world dictionary. It allows you to quickly find the definition of a word because the words (in other words, keys) are kept sorted; if we know weâ€™re looking for the definition of manatee, we will jump to the middle of the dictionary to start looking, because the letter m is in the middle of the alphabet. Dictionaries in programming are similarly smart when looking something up. They must implement the interface IDictionary<TKey, TValue>, as shown in the following code: namespace System.Collections.Generic; [DefaultMember("Item")] // aka "this" indexer. public interface IDictionary<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>>, 