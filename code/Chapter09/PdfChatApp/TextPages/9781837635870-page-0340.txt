Chapter 6 321 { void Lose(); } public class Person : IGamePlayer, IKeyHolder { public void Lose() // Implicit implementation. { // Implement losing a key. } public void IGamePlayer.Lose() // Explicit implementation. { // Implement losing a game. } } Person p = new(); p.Lose(); // Calls implicit implementation of losing a key. ((IGamePlayer)p).Lose(); // Calls explicit implementation of losing a game. // Alternative way to do the same. IGamePlayer player = p as IGamePlayer; player.Lose(); // Calls explicit implementation of losing a game. Defining interfaces with default implementations A language feature introduced in C# 8 is default implementations for an interface. This allows an in- terface to contain implementation. This breaks the clean separation between interfaces that define a contract and classes and other types that implement them. It is considered by some .NET developers to be a perversion of the language. Letâ€™s see it in action: 1. In the PacktLibrary project, add a new file named IPlayable.cs, and modify the statements to define a public IPlayable interface with two methods to Play and Pause, as shown in the following code: namespace Packt.Shared; public interface IPlayable { 