Querying and Manipulating Data Using LINQ 606 public DateTime DateOfBirth { get; set; } } // Program.cs Person knownTypeObject = new() { Name = "Boris Johnson", DateOfBirth = new(year: 1964, month: 6, day: 19) }; C# 3 and later allow instances of anonymous types to be instantiated using the var keyword, as shown in the following code: var anonymouslyTypedObject = new { Name = "Boris Johnson", DateOfBirth = new DateTime(year: 1964, month: 6, day: 19) }; Although we did not specify a type, the compiler can infer an anonymous type from the setting of two properties named Name and DateOfBirth. The compiler can infer the types of the two properties from the values assigned: a literal string and a new instance of a date/time value. This capability is especially useful when writing LINQ queries to project an existing type into a new type without having to explicitly define the new type. Since the type is anonymous, this can only work with var-declared local variables. Letâ€™s make the SQL command executed against the database table more efficient by adding a call to the Select method to project instances of the Product class into instances of a new anonymous type with only three properties: 1. In Program.Functions.cs, in the FilterAndSort method, add a statement to extend the LINQ query to use the Select method to return only the three properties (that is, table columns) ToQueryString to use the new projectedProducts query, that we need, and modify the call to and the foreach statement to use the var keyword and the new projectedProducts query, as shown highlighted in the following code: IOrderedQueryable<Product> sortedAndFilteredProducts = filteredProducts.OrderByDescending(product => product.UnitPrice); var projectedProducts = sortedAndFilteredProducts .Select(product => new // Anonymous type. { product.ProductId, product.ProductName, product.UnitPrice 