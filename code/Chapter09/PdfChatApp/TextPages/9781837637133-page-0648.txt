Chapter 13 615 Request finished HTTP/2 POST https://localhost:5131/greet.Greeter/ SayHello - 200 0 application/grpc 1008.1375ms info: Microsoft.AspNetCore.Hosting.Diagnostics[1] Request starting HTTP/2 POST https://localhost:5131/greet.Greeter/ SayHello - application/grpc - info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0] Executing endpoint 'gRPC - /greet.Greeter/SayHello' info: Microsoft.AspNetCore.Routing.EndpointMiddleware[1] Executed endpoint 'gRPC - /greet.Greeter/SayHello' info: Microsoft.AspNetCore.Hosting.Diagnostics[2] Request finished HTTP/2 POST https://localhost:5131/greet.Greeter/ SayHello - 200 - application/grpc 1016.4590ms Implementing gRPC JSON transcoding JSON is the most popular format for services that return data to a browser or mobile device. It would be great if we could create a gRPC service and magically make it callable via non-HTTP/2 using JSON. Thankfully, there is a solution. Microsoft has a technology they call gRPC JSON transcoding. It is an ASP.NET Core extension that creates HTTP endpoints with JSON for gRPC services, based on Google’s HttpRule class for their gRPC transcoding. More Information: You can read about Google’s HttpRule class at the following link: https://cloud.google.com/dotnet/docs/reference/Google.Api.CommonProtos/ latest/Google.Api.HttpRule. Enabling gRPC JSON transcoding Let’s see how to enable gRPC JSON transcoding in our gRPC service: 1. In the Northwind.Grpc.Service project, add a package reference for gRPC JSON transcoding, as shown highlighted in the following markup: <ItemGroup> <PackageReference Include="Grpc.AspNetCore" Version="2.59.0" /> <PackageReference Include="Microsoft.Data.SqlClient" Version="5.1.2" /> <PackageReference Include="Microsoft.AspNetCore.Grpc.JsonTranscoding" Version="8.0.0" /> </ItemGroup> 2. Build the Northwind.Grpc.Service project to restore packages. 