Building Websites Using ASP.NET Core Razor Pages 680 All files in a .NET SDK project have a build action. Most are set implicitly based on their file extension. You can override the default behavior by explicitly setting a build action. You can do this either by directly editing the .csproj project file or by using your code editor’s Properties window, as shown in Figure 13.9: Figure 13.9: Properties of Suppliers.cshtml.cs show its default Build Action is C# compiler Common build actions for ASP.NET Core project files are shown in Table 13.1: Build action Description AdditionalFiles Provides inputs to analyzers to verify code quality. Compile or C# compiler Passed to the compiler as a source file. Content Included as part of the website when it’s deployed. Embedded Resource Passed to the compiler as a resource to be embedded in the assembly. None Not part of the build. This value can be used for documentation and other files that should not be deployed with the website. Table 13.1: Common build actions for ASP.NET Core project files More Information: You can learn more about Build Action and .csproj entries at the following link: https://learn.microsoft.com/en-us/visualstudio/ide/build- actions. Using Entity Framework Core with ASP.NET Core Entity Framework Core is a natural way to get real data onto a website. In Chapter 12, Introducing Web Development Using ASP.NET Core, you created two pairs of class libraries: one for the entity models and one for the Northwind database context, for SQL Server and SQLite. You will now use them in your website project. 