Chapter 2 51 SELECT OrderId, Calculate a total for each order and sort with the largest order value at the top. SUM(UnitPrice * Quantity) AS Total FROM [Order Details] GROUP BY OrderId ORDER BY Total DESC SELECT CompanyName Return all the company names of all customers and suppliers. FROM Customers UNION SELECT CompanyName FROM Suppliers SELECT CategoryName, ProductName Match every category with every product using a Cartesian join and output their names (not what FROM Categories, Products you normally want!). 616 rows (8 categories x 77 products). SELECT CategoryName, ProductName Match each product with its category using a WHERE clause for the CategoryId column in each FROM Categories c, Products p table and output the category name and product WHERE c.CategoryId = p.CategoryId name. 77 rows. SELECT CategoryName, ProductName Match each product with its category using an INNER JOIN...ON clause for the CategoryId FROM Categories c column in each table and output the category INNER JOIN Products p name and product name. This is a modern alternative syntax to using WHERE, and it allows ON c.CategoryId = p.CategoryId outer joins, which would also include non- matches. 77 rows. Table 2.3: Example SELECT statements with descriptions More Information: You can read the full documentation for SELECT at the following link: https://learn.microsoft.com/en-us/sql/t-sql/queries/select-transact-sql. 