Caching, Queuing, and Resilient Background Services 398 19. fails, you will see an error message, as shown in Figure 9.2: Figure 9.2: A successful call to the faulty random web service 20. In the command prompt or terminal, when a fault occurs you will see the exception, as shown in the following partial output: fail: Microsoft.AspNetCore.Diagnostics. DeveloperExceptionPageMiddleware[1] An unhandled exception has occurred while executing the request. System.Exception: Randomized fault. 21. Enter different partial names and click Get Products until you have seen both a successful search and a failed search. 22. Close the browsers and shut down the web servers. Implementing the Retry pattern for transient fault handling Now that we have a web service and MVC client with random faults, letâ€™s add transient fault handling by using the Retry pattern: 1. In the Northwind.WebApi.Client.Mvc project file, globally and statically import the System. class, and add a package reference for the Microsoft package to integrate Polly with Console ASP.NET Core (which has a dependency on the Polly package), and for a library to add jittering to retry time spans, as shown in the following markup: <ItemGroup> <PackageReference Include="Microsoft.Extensions.Http.Polly" Version="8.0.0" /> <PackageReference Include="Polly.Contrib.WaitAndRetry" Version="1.1.1" /> </ItemGroup> 2. Build the Northwind.WebApi.Client.Mvc project to restore packages. 