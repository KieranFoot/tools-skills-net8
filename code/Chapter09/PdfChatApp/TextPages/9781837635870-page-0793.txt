Building User Interfaces Using Blazor 774 protected override async Task OnParametersSetAsync() { customer = await _service.GetCustomerAsync(CustomerId); } private async Task Update() { if (customer is not null) { await _service.UpdateCustomerAsync(customer); } _navigation.NavigateTo("customers"); } } 5. In the Components\Pages folder, create a new file named DeleteCustomer.razor and modify its contents to use the customer detail component to show the customer that is about to be deleted, as shown in the following code: @page "/deletecustomer/{customerid}" @inject INorthwindService _service @inject NavigationManager _navigation <h3>Delete Customer</h3> <div class="alert alert-danger"> Warning! This action cannot be undone! </div> <CustomerDetail ButtonText="Delete Customer" ButtonStyle="danger" Customer="@customer" OnValidSubmit="@Delete" /> @code { [Parameter] public string CustomerId { get; set; } = null!; private Customer? customer = new(); protected override async Task OnParametersSetAsync() { 