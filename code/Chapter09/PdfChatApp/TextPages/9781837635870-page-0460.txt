Chapter 8 441 The [DefaultMember] attribute allows you to specify which member is accessed - by default when no member name is specified. To make IndexOf the default mem ber, you would use [DefaultMember("IndexOf")]. To specify the indexer, you use [DefaultMember("Item")]. IList<T> derives from ICollection<T>, so it has a Count property, and an Add method to put an item at the end of the collection, as well as an Insert method to put an item in the list at a specified position, and RemoveAt to remove an item at a specified position. Lists are a good choice when you want to manually control the order of items in a collection. Each item in a list has a unique index (or position) that is automatically assigned. Items can be any type defined by T and items can be duplicated. Indexes are int types and start from 0, so the first item in 0, as shown in Table 8.9: a list is at index Index Item 0 London 1 Paris 2 London 3 Sydney Table 8.9: Cities in a list with indexes If a new item (for example, Santiago) is inserted between London and Sydney, then the index of Sydney is automatically incremented. Therefore, you must be aware that an itemâ€™s index can change after inserting or removing items, as shown in Table 8.10: Index Item 0 London 1 Paris 2 London 3 Santiago 4 Sydney Table 8.10: Cities list after an item is inserted Good Practice: Some developers can get into a poor habit of using List<T> and other collections when an array would be better. Use arrays instead of collections if the data will not change size after instantiation. You should also use lists initially while you are adding and removing items, but then convert them into an array once you are done with manipulating the items. 