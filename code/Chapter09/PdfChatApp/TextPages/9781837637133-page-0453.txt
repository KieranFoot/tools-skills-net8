Caching, Queuing, and Resilient Background Services 420 Received product. Id: 1, Name: Chai, Message: apples info: Northwind.Background.Workers.QueueWorker[0] Received product. Id: 2, Name: Chang, Message: bananas info: Northwind.Background.Workers.QueueWorker [0] Received product. Id: 3, Name: Aniseed Syrup, Message: cherries Executing code on a timed schedule Another common use of worker services is to implement timed events. A timer-based background System.Threading.Timer class that triggers the DoWork method. service can use the Letâ€™s add another service to the background worker project: 1. In the Northwind.Background.Workers project, add a new class named TimerWorker.cs. 2. Modify the class, as shown in the following code: namespace Northwind.Background.Workers; public class TimerWorker : IHostedService, IAsyncDisposable { private readonly ILogger<TimerWorker> _logger; private int _executionCount = 0; private Timer? _timer; private int _seconds = 5; public TimerWorker(ILogger<TimerWorker> logger) { _logger = logger; } private void DoWork(object? state) { int count = Interlocked.Increment(ref _executionCount); _logger.LogInformation( "{0} is working, execution count: {1:#,0}", nameof(TimerWorker), count); } public Task StartAsync(CancellationToken cancellationToken) { _logger.LogInformation("{0} is running.", nameof(TimerWorker)); 