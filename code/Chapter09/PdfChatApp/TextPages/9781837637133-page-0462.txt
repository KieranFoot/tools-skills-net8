Chapter 9 429 { ConsoleColor previousColor = ForegroundColor; ForegroundColor = ConsoleColor.Green; WriteLine(message); ForegroundColor = previousColor; } } 5. In Program.cs, import namespaces to work with the job, as shown in the following code: using Northwind.Background.Models; // To use WriteMessageJobDetail. using Microsoft.AspNetCore.Mvc; // To use [FromBody]. 6. In Program.cs, after the statement to map a GET request, map a POST request to the relative path /schedulejob, get the job details from the body of the POST request, and use it to sched- ule a background job, using Hangfire to run at the specified time in seconds in the future, as shown in the following code: app.MapPost("/schedulejob", ([FromBody] WriteMessageJobDetail job) => { BackgroundJob.Schedule( methodCall: () => WriteMessage(job.Message), enqueueAt: DateTimeOffset.UtcNow + TimeSpan.FromSeconds(job.Seconds)); }); 7. Start the Northwind.Background.Hangfire project without debugging. In the command prompt or terminal, confirm that all the dispatchers started, as shown in 8. the following output: info: Hangfire.Server.BackgroundServerProcess[0] Server desktop-j1pqhr7:13916:9f1851b5 all the dispatchers started 9. In the browser, navigate to /hangfire to view Hangfire Dashboard. HttpRequests folder, create a file named hangfire-schedule-job. 10. In your code editor, in the . http In hangfire-schedule-job.http, add statements to make a POST request to the Hangfire 11. service, as shown in the following code: ### Configure a variable for the Hangfire web service base address. @base_address = https://localhost:5095/ POST {{base_address}}schedulejob Content-Type: application/json 