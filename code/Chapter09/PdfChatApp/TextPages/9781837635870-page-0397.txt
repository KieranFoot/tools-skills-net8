Packaging and Distributing .NET Types 378 You can manually set the target framework to a value that supports the projects that need to reference that library, as shown in Table 7.5: Class library target Can be used by projects that target framework .NET Framework 4.6.1 or later, .NET Core 2 or later, .NET 5 or later, Mono netstandard2.0 5.4 or later, Xamarin.Android 8 or later, and Xamarin.iOS 10.14 or later. .NET Core 3 or later, .NET 5 or later, Mono 6.4 or later, Xamarin.Android netstandard2.1 10 or later, and Xamarin.iOS 12.16 or later. net6.0 .NET 6 or later. net7.0 .NET 7 or later. net8.0 .NET 8 or later. Table 7.5: Class library target frameworks and the projects that can use them Good Practice: Always check the target framework of a class library and then manually change it to something more appropriate if necessary. Make a conscious decision about what it should be rather than accepting the default. Creating a .NET Standard class library We will create a class library using .NET Standard 2.0 so that it can be used across all important .NET legacy platforms and cross-platform on Windows, macOS, and Linux operating systems, while also having access to a wide set of .NET APIs: 1. Use your preferred code editor to add a new Class Library / classlib project named SharedLibrary that targets .NET Standard 2.0 to the Chapter07 solution: • If you use Visual Studio 2022, when prompted for the Target Framework, select .NET Standard 2.0, and then configure the startup project for the solution to the current selection. • If you use Visual Studio Code, include a switch to target .NET Standard 2.0, as shown in the following command: dotnet new classlib -f netstandard2.0 Good Practice: If you need to create types that use new features in .NET 8, as well as types that only use .NET Standard 2.0 features, then you can create two separate class libraries: one targeting .NET Standard 2.0 and one targeting .NET 8. 