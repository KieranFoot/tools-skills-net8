Querying and Manipulating Data Using LINQ 590 2. In the FilteringUsingWhere method, pass the methodâ€™s name into the Func<string, bool> delegate, as shown highlighted in the following code: var query = names.Where( new Func<string, bool>(NameLongerThanFour)); 3. In the FilteringUsingWhere method, add statements to enumerate the names array using foreach, as shown in the following code: foreach (string item in query) { WriteLine(item); } 4. In Program.cs, comment out the call to DeferredExecution and then pass names as an argu- FilteringUsingWhere method, as shown in the following code: ment to the // DeferredExecution(names); FilteringUsingWhere(names); 5. Run the code and view the results, noting that only names longer than four letters are listed, as shown in the following output: Michael Dwight Angela Kevin Creed Simplifying the code by removing the explicit delegate instantiation We can simplify the code by deleting the explicit instantiation of the Func<string, bool> delegate because the C# compiler can instantiate the delegate for us: 1. To help you learn by seeing progressively improved code, in the FilteringUsingWhere method, comment out the query and add a comment about how it works, as shown in the following code: // Explicitly creating the required delegate. // var query = names.Where( // new Func<string, bool>(NameLongerThanFour)); 2. Enter the query a second time, but this time without the explicit instantiation of the delegate, as shown in the following code: // The compiler creates the delegate automatically. var query = names.Where(NameLongerThanFour); 3. Run the code and note that it has the same behavior. 