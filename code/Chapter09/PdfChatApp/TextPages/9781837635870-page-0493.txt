Working with Files, Streams, and Serialization 474 Controlling how you work with files When working with files, you often need to control how they are opened. The File.Open method has overloads to specify additional options using enum values. The enum types are as follows: • FileMode: This controls what you want to do with the file, like CreateNew, OpenOrCreate, or Truncate. FileAccess: This controls what level of access you need, like ReadWrite. • FileShare: This controls locks on the file to allow other processes the specified level of access, • like Read. You might want to open a file and read from it, and allow other processes to read it too, as shown in the following code: FileStream file = File.Open(pathToFile, FileMode.Open, FileAccess.Read, FileShare.Read); There is also an enum for attributes of a file as follows: • FileAttributes: This is to check a FileSystemInfo-derived type’s Attributes property for values like Archive and Encrypted. You could check a file or directory’s attributes, as shown in the following code: FileInfo info = new(backupFile); WriteLine("Is the backup file compressed? {0}", info.Attributes.HasFlag(FileAttributes.Compressed)); Now that you’ve learned some common ways to work with the directories and files in the filesystem, you next need to learn how to read and write the data stored in a file, that is, how to work with streams. Reading and writing with streams In Chapter 10, Working with Data Using Entity Framework Core, you will use a file named Northwind.db, but you will not work with the file directly. Instead, you will interact with the SQLite database engine, which in turn will read and write to the file. In scenarios where there is no other system that “owns” the file and does the reading and writing for you, you will use a file stream to work directly with the file. A stream is a sequence of bytes that can be read from and written to. Although files can be processed rather like arrays, with random access provided by knowing the position of a byte within the file, it is more efficient to process a file as a stream in which the bytes can be accessed in sequential order. When a human does the processing, they tend to need random access so that they can jump around the data making changes and return to the data they worked on earlier. When an automated system does the processing, it tends to be able to work sequentially and only needs to “touch” the data once. 