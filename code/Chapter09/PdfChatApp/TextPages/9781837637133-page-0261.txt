Using Popular Third-Party Libraries 228 It is good practice to always validate your configuration for mappings before using them, so we will start by defining some models and a mapping between them, and then create a unit test for the mappings: 1. Use your preferred code editor to add a new Class Library / classlib project named MappingObjects.Models to the Chapter06 solution. MappingObjects.Models project, delete the file named Class1.cs. 2. In the MappingObjects.Models project, add a new class file named Customer.cs and modify 3. In the its contents to define an immutable record type named Customer by using constructor syntax, as shown in the following code: namespace Northwind.EntityModels; // This record will only have a constructor with the parameters below. // Objects will be immutable after instantiation using this constructor. // It will not have a default parameterless constructor. public record class Customer( string FirstName, string LastName ); 4. In the MappingObjects.Models project, add a new class file named LineItem.cs and modify its contents, as shown in the following code: namespace Northwind.EntityModels; public record class LineItem( string ProductName, decimal UnitPrice, int Quantity ); 5. In the MappingObjects.Models project, add a new class file named Cart.cs and modify its contents, as shown in the following code: namespace Northwind.EntityModels; public record class Cart( Customer Customer, List<LineItem> Items ); 6. In the MappingObjects.Models project, add a new class file named Summary.cs in the Northwind. ViewModels namespace (not Northwind.EntityModels), delete any existing statements, and then define a record type that can have its properties set after instantiating with a default parameterless constructor, as shown in the following code: 