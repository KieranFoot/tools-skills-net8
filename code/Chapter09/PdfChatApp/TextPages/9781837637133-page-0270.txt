Chapter 6 237 names.Should().OnlyContain(name => name.Length <= 6); } 2. Run the tests and note the collections test fails, as shown in the following output: Expected names to contain only items matching (name.Length <= 6), but {"Charlie"} do(es) not match. 3. Change Charlie to Charly. 4. Run the tests and note they succeed. Making assertions about dates and times Letâ€™s start by making assertions about date and time values: 1. In FluentExamples.cs, import the namespace for adding more extension methods for named months and other useful date/time-related functionality, as shown in the following code: using FluentAssertions.Extensions; // To use February, March extension methods. 2. Add a test method to explore date/time assertions, as shown in the following code: [Fact] public void TestDateTimes() { DateTime when = new( hour: 9, minute: 30, second: 0, day: 25, month: 3, year: 2024); when.Should().Be(25.March(2024).At(9, 30)); when.Should().BeOnOrAfter(23.March(2024)); when.Should().NotBeSameDateAs(12.February(2024)); when.Should().HaveYear(2024); DateTime due = new( hour: 11, minute: 0, second: 0, day: 25, month: 3, year: 2024); when.Should().BeAtLeast(2.Hours()).Before(due); } 