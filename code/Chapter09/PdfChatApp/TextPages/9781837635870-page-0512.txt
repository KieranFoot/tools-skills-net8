Chapter 9 493 Serializing as XML Let’s start by looking at XML, probably the world’s most used serialization format (for now). To show a typical example, we will define a custom class to store information about a person and then create an object graph, using a list of Person instances with nesting: 1. Use your preferred code editor to add a new Console App / console project named WorkingWithSerialization to the Chapter09 solution. System.Console, System. 2. In the project file, add elements to statically and globally import the , and System.IO.Path classes. Environment Program.Helpers.cs. 3. Add a new class file named In Program.Helpers.cs, add a partial Program class with a SectionTitle and an OutputFileInfo 4. method, as shown in the following code: // null namespace to merge with auto-generated Program. partial class Program { private static void SectionTitle(string title) { ConsoleColor previousColor = ForegroundColor; ForegroundColor = ConsoleColor.DarkYellow; WriteLine($"*** {title} ***"); ForegroundColor = previousColor; } private static void OutputFileInfo(string path) { WriteLine("**** File Info ****"); WriteLine($"File: {GetFileName(path)}"); WriteLine($"Path: {GetDirectoryName(path)}"); WriteLine($"Size: {new FileInfo(path).Length:N0} bytes."); WriteLine("/------------------"); WriteLine(File.ReadAllText(path)); WriteLine("------------------/"); } } 5. Add a new class file named Person.cs to define a Person class with a Salary property that is protected, meaning it is only accessible to itself and derived classes. To populate the salary, the class has a constructor with a single parameter to set the initial salary, as shown in the following code: namespace Packt.Shared; 