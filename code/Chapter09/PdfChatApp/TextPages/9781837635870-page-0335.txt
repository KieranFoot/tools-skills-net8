Implementing Interfaces and Inheriting Classes 316 OutputPeopleNames(people, "Initial list of people:"); Array.Sort(people); OutputPeopleNames(people, "After sorting using Person's IComparable implementation:"); 4. Run the PeopleApp project and an exception will be thrown. As the message explains, to fix the problem, our type must implement IComparable, as shown in the following output: Unhandled Exception: System.InvalidOperationException: Failed to compare two elements in the array. ---> System.ArgumentException: At least one object must implement IComparable. 5. In Person.cs, after inheriting from object, add a comma and enter IComparable<Person?>, as highlighted in the following code: public class Person : IComparable<Person?> Your code editor will draw a red squiggle under the new code to warn you that you have not yet implemented the method you promised to. Your code editor can write the skeleton implementation for you. 6. Click on the light bulb and then click Implement interface. Person class to find the method that was written for you, as 7. Scroll down to the bottom of the shown in the following code: public int CompareTo(Person? other) { throw new NotImplementedException(); } 8. Delete the statement that throws the NotImplementedException error. null, and call the CompareTo 9. Add statements to handle variations of input values, including method of the Name field, which uses the string typeâ€™s implementation of CompareTo, and return the result, as shown in the following code: int position; if (other is not null) { if ((Name is not null) && (other.Name is not null)) { // If both Name values are not null, then 