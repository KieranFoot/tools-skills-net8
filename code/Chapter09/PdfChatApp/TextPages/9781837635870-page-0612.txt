Chapter 11 593 Sorting by the item itself Introduced in .NET 7 are the Order and OrderDescending extension methods. These simplify ordering by the item itself. For example, if you have a sequence of string values, then before .NET 7 you would have to call the OrderBy method and pass a lambda that selects the items themselves, as shown in the following code: var query = names.OrderBy(name => name); With .NET 7 or later, we can simplify the statement, as shown in the following code: var query = names.Order(); does a similar thing but in descending order. OrderDescending Remember that the names array contains instances of the string type, which implements the IComparable interface. This is why they can be ordered, aka sorted. If the array contained instances of a complex type like Person or Product, then those types would have to implement the IComparable interface so they could be ordered too. Declaring a query using var or a specified type While writing a LINQ expression, it is convenient to use var to declare the query object. This is because the return type frequently changes as you work on a LINQ expression. For example, our query started as an IEnumerable<string> and is currently an IOrderedEnumerable<string>: 1. Hover your mouse over the var keyword and note that its type is IOrderedEnumerable<string>, as shown in Figure 11.3: Figure 11.3: Hover over var to see the actual implied type of the query expression In Figure 11.3, I added extra vertical space between names and .Where so that the tooltip did not cover up the query. 