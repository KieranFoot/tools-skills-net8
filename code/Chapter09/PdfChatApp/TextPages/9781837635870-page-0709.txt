Building Websites Using ASP.NET Core Razor Pages 690 For convenience, there are many extension methods that make it easier to build the pipeline, for example, UseMiddleware<T>, where T is a class that has: • A constructor with a RequestDelegate parameter that will be passed to the next pipeline component. Invoke method with an HttpContext parameter and returns a Task. • An Summarizing key middleware extension methods Key middleware extension methods used in our code include the following: • UseHsts: Adds middleware for using HSTS, which adds the Strict-Transport-Security header. • UseHttpsRedirection: Adds middleware for redirecting HTTP requests to HTTPS, so in our code a request for http://localhost:5130 would receive a 307 response telling the browser to request https://localhost:5131. UseDefaultFiles: Adds middleware that enables default file mapping on the current path, so • in our code it would identify files such as index.html or default.html. UseStaticFiles: Adds middleware that looks in wwwroot for static files to return in the HTTP • response. MapRazorPages: Adds middleware that will map URL paths such as /suppliers to a Razor Page • file in the /Pages folder named suppliers.cshtml and return the results as the HTTP response. • MapGet: Adds middleware that will map URL paths such as /hello to an inline delegate that writes plain text directly to the HTTP response. If we had chosen a different project template that supports more complex routing scenarios, for example, the ASP.NET Core MVC website project template, then we would have seen other common middleware extension methods, which include the following: • UseRouting: Adds middleware that defines a point in the pipeline where routing decisions are made and must be combined with a call to UseEndpoints where the processing is then executed • UseEndpoints: Adds middleware to execute to generate responses from decisions made earlier in the pipeline Visualizing the HTTP pipeline The HTTP request and response pipeline can be visualized as a sequence of request delegates, called one after the other in a chain or pipeline, as shown in the simplified diagram shown in Figure 13.11, which excludes some middleware delegates, such as UseHsts and MapGet: 