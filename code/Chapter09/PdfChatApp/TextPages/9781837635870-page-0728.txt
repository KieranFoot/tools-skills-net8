Chapter 14 709 Creating data repositories with caching for entities Defining and implementing a data repository to provide CRUD operations is good practice. We will create a data repository for the Customers table in Northwind. There are only 91 customers in this table, so we will cache a copy of the whole table in memory to improve scalability and performance when reading customer records. Good Practice: In a real web service, you should use a distributed cache like Redis, an open-source data structure store that can be used as a high-performance, high-availability database, cache, or message broker. You can learn about this at the following link: https:// learn.microsoft.com/en-us/aspnet/core/performance/caching/distributed. We will follow a modern good practice and make the repository API asynchronous. It will be instan- tiated by a Controller class using constructor parameter injection, so a new instance is created to handle every HTTP request. It will use a singleton instance of an in-memory cache. Letâ€™s go: 1. In the Northwind.WebApi project, in Program.cs, import the namespace for working with an in-memory cache, as shown in the following code: using Microsoft.Extensions.Caching.Memory; // To use IMemoryCache and so on. 2. In Program.cs, after the call to CreateBuilder, in the section for configuring services, reg- ister an implementation for the in-memory cache as a singleton instance that is constructed immediately, as shown in the following code: builder.Services.AddSingleton<IMemoryCache>( new MemoryCache(new MemoryCacheOptions())); 3. In the Northwind.WebApi project, create a folder named Repositories. Add a new interface file and a class file to the Repositories folder named ICustomerRepository. 4. cs and CustomerRepository.cs. ICustomerRepository.cs, define an interface with five CRUD methods, as shown in the 5. In following code: using Northwind.EntityModels; // To use Customer. namespace Northwind.WebApi.Repositories; public interface ICustomerRepository { Task<Customer?> CreateAsync(Customer c); Task<Customer[]> RetrieveAllAsync(); Task<Customer?> RetrieveAsync(string id); Task<Customer?> UpdateAsync(Customer c); Task<bool?> DeleteAsync(string id); } 