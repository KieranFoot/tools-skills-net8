Chapter 3 147 4. Run the code and note the error message, as shown in the following output: Error: (6,9): error CS0266: Cannot implicitly convert type 'double' to 'int'. An explicit conversion exists (are you missing a cast?) This error message will also appear in the Visual Studio Error List, Visual Studio Code PROB- LEMS window, or JetBrains Rider Problems window. You cannot implicitly cast a double variable into an int variable because it is potentially unsafe and could lose data, like the value after the decimal point. You must explicitly cast a double variable into an int variable using a pair of round brackets around the type you want to cast the double type into. The pair of round brackets is the cast operator. Even then, you must beware that the part after the decimal point will be trimmed off without warning because you have chosen to perform an explicit cast and therefore understand the consequences. 5. Modify the assignment statement for the d variable to explicitly cast the variable c into an int, and add a comment to explain what will happen, as shown highlighted in the following code: double c = 9.8; int d = (int)c; // Compiler gives an error if you do not explicitly cast. WriteLine($"c is {c}, d is {d}"); // d loses the .8 part. 6. Run the code to view the results, as shown in the following output: a is 10, b is 10 c is 9.8, d is 9 We must perform a similar operation when converting values between larger integers and smaller integers. Again, beware that you might lose information because any value too big will have its bits copied and then be interpreted in ways that you might not expect! 7. Enter statements to declare and assign a long (64-bit) integer variable to an int (32-bit) integer variable, both using a small value that will work and a too-large value that will not, as shown in the following code: long e = 10; int f = (int)e; WriteLine($"e is {e:N0}, f is {f:N0}"); e = long.MaxValue; f = (int)e; WriteLine($"e is {e:N0}, f is {f:N0}"); 8. Run the code to view the results, as shown in the following output: e is 10, f is 10 e is 9,223,372,036,854,775,807, f is -1 