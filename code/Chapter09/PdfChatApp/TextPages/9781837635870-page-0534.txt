Chapter 10 515 EF Core 3 and later only work with platforms that support .NET Standard 2.1, meaning .NET Core 3 and later. EF Core 3 and later do not support .NET Standard 2.0 platforms like .NET Framework 4.8. As well as traditional RDBMSs, EF Core supports modern cloud-based, non-relational, schema-less data stores, such as Azure Cosmos DB and MongoDB, sometimes with third-party providers. EF Core has so many improvements in each release that this chapter cannot cover them all. In this chapter, I will focus on the fundamentals that all .NET developers should know and some of the most useful new features. You can learn more about EF Core and how to use it with SQL Server in my com- panion book, Apps and Services with .NET 8, or by reading the official documentation, found at the following link: https://learn.microsoft.com/en-us/ef/core/. You can keep up with the latest EF Core news at the following link: https://aka.ms/efnews. Understanding Database First and Code First There are two approaches to working with EF Core: • Database First: A database already exists, so you build a model that matches its structure and features. This is the most common scenario in real life. You will see an example of this throughout this chapter. • Code First: No database exists, so you build a model and then use EF Core to create a database that matches its structure and features. You will see an example of this if you complete the online-only section linked to in one of the exercises at the end of this chapter. Performance improvements in EF Core The EF Core team continues to work hard on improving the performance of EF Core. For example, if EF Core identifies that only a single statement will be executed against the database when SaveChanges is called, then it does not create an explicit transaction as earlier versions do. That gives a 25% per- formance improvement to a common scenario. There is too much detail about all the recent performance improvements to cover in this chapter, and you get all the benefits without needing to know how they work anyway. If you are interested (and it is fascinating what they looked at and how they took advantage of some cool SQL Server features in particular), then I recommend that you read the following posts from the EF Core team: • Announcing Entity Framework Core 7 Preview 6: Performance Edition: https://devblogs. microsoft.com/dotnet/announcing-ef-core-7-preview6-performance-optimizations/ • Announcing Entity Framework Core 6.0 Preview 4: Performance Edition: https://devblogs. microsoft.com/dotnet/announcing-entity-framework-core-6-0-preview-4-performance- edition/ Using a sample relational database To learn how to manage an RDBMS using .NET, it would be useful to have a sample one so that you can practice on one that has a medium complexity and a decent number of sample records. Microsoft offers several sample databases, most of which are too complex for our needs, so instead, we will use a database that was first created in the early 1990s known as Northwind. 