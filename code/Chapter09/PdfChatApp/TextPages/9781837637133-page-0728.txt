Chapter 15 695 "environmentVariables": { "ASPNETCORE_ENVIRONMENT": "Development" } 6. In Program.cs, import namespaces to work with Minimal APIs attributes, registering the North- wind database context extension method, and serialize JSON, as shown in the following code: using Microsoft.AspNetCore.Mvc; // To use [FromServices]. using Northwind.EntityModels; // To use AddNorthwindContext. using System.Text.Json.Serialization; // To use ReferenceHandler. // Define an alias for the JsonOptions class. using HttpJsonOptions = Microsoft.AspNetCore.Http.Json.JsonOptions; 7. In Program.cs, at the end of the section to configure services, before the call to Build, add a statement to configure the Northwind database context and the registered dependency service for JSON options, setting its reference handler to preserve references, so that the reference between an employee and their manager does not cause a runtime exception due to circular references, as shown in the following code: builder.Services.AddNorthwindContext(); builder.Services.Configure<HttpJsonOptions>(options => { // If we do not preserve references then when the JSON serializer // encounters a circular reference it will throw an exception. Options.SerializerOptions.ReferenceHandler = ReferenceHandler.Preserve; }); Be careful to configure Microsoft.AspNetCore.Http.Json.JsonOptions and not Microsoft.AspNetCore.Mvc.JsonOptions! I have created an alias to make this explicit, since we need to import the Microsoft.AspNetCore.Mvc namespace of other types. 8. In Program.cs, before the call to the app.Run() method, add statements to define some end- GET and POST employees, as shown in the following code: points to app.MapGet("api/employees", ( [FromServices] NorthwindContext db) => Results.Json(db.Employees)) .WithName("GetEmployees") .Produces<Employee[]>(StatusCodes.Status200OK); app.MapGet("api/employees/{id:int}", ( 