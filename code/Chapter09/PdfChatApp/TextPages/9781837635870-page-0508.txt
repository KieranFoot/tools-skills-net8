Chapter 9 489 For example, ASCII has a code space with 128 code points. .NET uses a standard called Unicode to encode text internally. Unicode has more than 1 million code points. Sometimes, you will need to move text outside .NET for use by systems that do not use Unicode or a variation of it, so it is important to learn how to convert between encodings. Some common text encodings used by computers are shown in Table 9.6: Encoding Description ASCII This encodes a limited range of characters using the lower seven bits of a byte. UTF-8 This represents each Unicode code point as a sequence of one to four bytes. This is designed to be more efficient over 7-bit channels than UTF-8, but it has UTF-7 security and robustness issues, so UTF-8 is recommended over UTF-7. This represents each Unicode code point as a sequence of one or two 16-bit UTF-16 integers. This represents each Unicode code point as a 32-bit integer and is, therefore, a UTF-32 fixed-length encoding unlike the other Unicode encodings, which are all variable- length encodings. ANSI/ISO This provides support for a variety of code pages that are used to support a specific encodings language or group of languages. Table 9.6: Common text encodings Good Practice: In most cases today, UTF-8 is a good default, which is why it is literally the default encoding, that is, Encoding.Default. You should avoid using Encoding.UTF7 because it is not secure. Due to this, the C# compiler will warn you when you try to use UTF-7. Of course, you might need to generate text using that encoding for compatibility with another system, so it needs to remain an option in .NET. Encoding strings as byte arrays Letâ€™s explore text encodings: 1. Use your preferred code editor to add a new Console App / console project named WorkingWithEncodings to the Chapter09 solution. System.Console class. 2. In the project file, add an element to statically and globally import the Program.cs, delete the existing statements, import the System.Text namespace, add state- 3. In string using an encoding chosen by the user, loop through each byte, and ments to encode a then decode it back into a string and output it, as shown in the following code: using System.Text; // To use Encoding. WriteLine("Encodings"); WriteLine("[1] ASCII"); 