Chapter 8 347 X-Client-Id: console-client-d54c61ba-66bb-4e39-9c1a-7af6e2bf647e info: AspNetCoreRateLimit.ClientRateLimitMiddleware[0] Request get:/api/products from ClientId console-client-d54c61ba- 66bb-4e39-9c1a-7af6e2bf647e has been blocked, quota 2/10s exceeded by 3. Blocked by rule *, TraceIdentifier 0HMIKGNJQEK5P:0000000E. MonitorMode: False info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[2] Response: StatusCode: 429 Content-Type: text/plain Retry-After: 6 info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[4] ResponseBody: API calls quota exceeded! maximum admitted 2 per 10s. 16. In the Northwind.WebApi.Client.Console project, in Program.cs, before writing the error message to the console in dark red, add statements to read the Retry-After header to get the number of seconds to wait for, as shown highlighted in the following code: string retryAfter = response.Headers .GetValues("Retry-After").ToArray()[0]; if (int.TryParse(retryAfter, out waitFor)) { retryAfter = string.Format( "I will retry after {0} seconds.", waitFor); } WriteInColor(string.Format("{0}: {1} {2}", (int)response.StatusCode, await response.Content.ReadAsStringAsync(), retryAfter), ConsoleColor.DarkRed); Note the waitFor variable is set from the Retry-After header value. This is later used to pause the console app using an asynchronous delay, as shown in the following code: await Task.Delay(TimeSpan.FromSeconds(waitFor)); 17. Start the Northwind.WebApi.Client.Console project without debugging. 18. In the console app, press Enter to generate a GUID-based client ID. 