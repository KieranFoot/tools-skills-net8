Packaging and Distributing .NET Types 390 The second way is to add a flag when publishing, as shown highlighted in the following command: dotnet publish ... -p:PublishTrimmed=True There are two ways to enable assembly-level, aka partial, trimming. The first way is to add two elements in the project file, as shown in the following markup: <PublishTrimmed>true</PublishTrimmed> <!--Enable trimming.--> <TrimMode>partial</TrimMode> <!--Set assembly-level trimming.--> The second way is to add two flags when publishing, as shown highlighted in the following command: dotnet publish ... -p:PublishTrimmed=True -p:TrimMode=partial Controlling where build artifacts are created Traditionally, each project has its own bin and obj subfolders where temporary files are created during the build process. When you publish, the files are created in the bin folder. You might prefer to put all these temporary files and folders somewhere else. Introduced with .NET 8 is the ability to control where build artifacts are created. Letâ€™s see how: 1. At the command prompt or terminal for the Chapter07 folder, enter the following command: dotnet new buildprops --use-artifacts 2. Note the success message, as shown in the following output: The template "MSBuild Directory.Build.props file" was created successfully. We could have created this file in the cs12dotnet8 folder, and it would then affect all projects in all chapters. 3. In the Chapter07 folder, open the Directory.Build.props file, as shown in the following markup: <Project> <!-- See https://aka.ms/dotnet/msbuild/customize for more details on customizing your build --> <PropertyGroup> <ArtifactsPath>$(MSBuildThisFileDirectory)artifacts</ArtifactsPath> </PropertyGroup> </Project> 