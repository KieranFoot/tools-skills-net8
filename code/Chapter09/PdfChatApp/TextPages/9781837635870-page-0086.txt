Chapter 2 67 To simplify our code, the Console App project template for every version of .NET before 6.0 added a statement at the top of the code file to tell the compiler to always look in the System namespace for types that havenâ€™t been prefixed with their namespace, as shown in the following code: using System; // Import the System namespace. We call this importing the namespace. The effect of importing a namespace is that all available types in that namespace will be available to your program without needing to enter the namespace prefix. All available types in that namespace will be seen in IntelliSense while you write code. Implicitly and globally importing namespaces Traditionally, every .cs file that needs to import namespaces would have to start with using state- ments to import those namespaces. Namespaces like System and System.Linq are needed in almost all .cs files, so the first few lines of every .cs file often had at least a few using statements, as shown in the following code: using System; using System.Linq; using System.Collections.Generic; When creating websites and services using ASP.NET Core, there are often dozens of namespaces that each file would have to import. C# 10 introduced a new keyword combination and .NET SDK 6 introduced a new project setting that works together to simplify importing common namespaces. The global using keyword combination means you only need to import a namespace in one .cs file and it will be available throughout all .cs files instead of having to import the namespace at the top global using statements in the Program.cs file, but I recom- of every file that needs it. You could put mend creating a separate file for those statements named something like GlobalUsings.cs with the global using statements, as shown in the following code: contents being all your global using System; global using System.Linq; global using System.Collections.Generic; Good Practice: As developers get used to this new C# feature, I expect one naming con- vention for this file to become the de facto standard. As you are about to see, the related .NET SDK feature uses a similar naming convention. 