Building Entity Models for SQL Server Using EF Core 100 To disable tracking for an individual query, but retain identity resolution, call the AsNoTrackingWith method as part of the query, as shown in the following code: IdentityResolution var products = db.Products .AsNoTrackingWithIdentityResolution() .Where(p => p.UnitPrice > price) .Select(p => new { p.ProductId, p.ProductName, p.UnitPrice }); To disable tracking but perform identity resolution by default for the data context, set the change track- er’s query-tracking behavior to NoTrackingWithIdentityResolution, as shown in the following code: db.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTrackingWithIdentityResolution; To set defaults for all new instances of a data context, in the OnConfiguring method, call the UseQueryTrackingBehavior method, as shown in the following code: protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) { optionsBuilder.UseSqlServer(connectionString) .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking); } A scenario using default tracking The default is change tracking with identity resolution. Once an entity is loaded into the data context, underlying changes are not reflected and only one copy exists. Entities have local changes tracked and a call to SaveChanges updates the database, as shown in Table 3.2: Action Entity in data context Row in database Query for customers in Germany Alfred’s Futterkiste, 123-4567 Alfred’s Futterkiste, 123-4567 Change telephone in database Alfred’s Futterkiste, 123-4567 Alfred’s Futterkiste, 123-9876 Query for customers starting with A Alfred’s Futterkiste, 123-4567 Alfred’s Futterkiste, 123-9876 Query for customers in Germany Alfred’s Futterkiste, 123-4567 Alfred’s Futterkiste, 123-9876 Change telephone in entity Alfred’s Futterkiste, 123-1928 Alfred’s Futterkiste, 123-9876 Save changes Alfred’s Futterkiste, 123-1928 Alfred’s Futterkiste, 123-1928 Table 3.2: Default tracking scenario The same scenario using no tracking No tracking and no identity resolution. Every query loads another instance of a database row into the data context, including underlying changes, allowing duplicates and mixed out-of-date and updated data. No local entity changes are tracked, so SaveChanges does nothing, as shown in Table 3.3: 