Chapter 5 181 CallStoredProcedure(previousTask.Result)); WriteLine($"Result: {taskServiceThenSProc.Result}"); WriteLine($"{timer.ElapsedMilliseconds:#,##0}ms elapsed."); 3. Run the code and view the result, as shown in the following output: Starting call to web service... Thread Id: 4, Priority: Normal, Background: True, Name: .NET TP Worker Finished call to web service. Starting call to stored procedure... Thread Id: 6, Priority: Normal, Background: True, Name: .NET TP Worker Finished call to stored procedure. Result: 12 products cost more than £89.99. 5,463ms elapsed. The currency symbol is culture-specific so on my computer it uses a £. On your computer it will use your culture. You will learn how to control cultures in Chapter 7, Handling Dates, Times, and Internationalization. You might see two different threads running the web service and stored procedure calls as in the output above (for example, threads 4 and 6), or the same thread might be reused since it is no longer busy. Nested and child tasks As well as defining dependencies between tasks, you can define nested and child tasks. A nested task is a task that is created inside another task. A child task is a nested task that must finish before its parent task is allowed to finish. Let’s explore how these types of tasks work: 1. In Program.Methods.cs, add two methods, one of which starts a task to run the other, as shown in the following code: private static void OuterMethod() { TaskTitle("Outer method starting..."); Task innerTask = Task.Factory.StartNew(InnerMethod); TaskTitle("Outer method finished."); } private static void InnerMethod() { 