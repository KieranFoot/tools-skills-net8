Chapter 7 401 You can learn more from viewing source links than decompiling because they show best prac- tices for situations like how to divide up a class into partial classes for easier management. When we used the ILSpy compiler, all it could do was show all the hundreds of methods of Enumerable class. the You can learn more about how a source link works and how any NuGet package can support it at the following link: https://learn.microsoft.com/en-us/ dotnet/standard/library-guidance/sourcelink. 6. If you prefer decompiling, then you can disable the source link feature now. No, you cannot technically prevent decompilation I sometimes get asked if there is a way to protect compiled code to prevent decompilation. The quick answer is no, and if you think about it, youâ€™ll see why this must be the case. You can make it harder using obfuscation tools like Dotfuscator, but ultimately, you cannot completely prevent it. All compiled applications contain instructions for the platform, operating system, and hardware on which it runs. Those instructions must be functionally the same as the original source code but are just harder for a human to read. Those instructions must be readable to execute your code; therefore, they must be readable to be decompiled. If you were to protect your code from decompilation using some custom technique, then you would also prevent your code from running! Virtual machines simulate hardware and so can capture all interaction between your running appli- cation and the software and hardware that it thinks it is running on. If you could protect your code, then you would also prevent attaching to it with a debugger and step- pdb file, then you can attach a debugger and step ping through it. If the compiled application has a through the statements line by line. Even without the pdb file, you can still attach a debugger and get some idea of how the code works. This is true for all programming languages. Not just .NET languages like C#, Visual Basic, and F#, but also C, C++, Delphi, and assembly language: all can be attached to for debugging or to be disassembled or decompiled. Some tools used by professionals are shown in Table 7.7: Type Product Description Virtual Machine VMware Professionals like malware analysts always run software inside a VM. Debugger SoftICE Runs underneath the operating system, usually in a VM. Useful for understanding Windows internals because it knows more Debugger WinDbg about Windows data structures than other debuggers. Disassembler IDA Pro Used by professional malware analysts. Decompiler HexRays Decompiles C apps. Plugin for IDA Pro. Decompiler DeDe Decompiles Delphi apps. Decompiler dotPeek .NET decompiler from JetBrains. Table 7.7: Professional debugger, decompiler, and disassembler tools 