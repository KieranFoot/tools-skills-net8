Chapter 4 151 Manipulating data with the Core (SQL) API The most common API for working with data in Azure Cosmos DB is Core (SQL). The full documentation for the Core (SQL) API can be found at the following link: https:// learn.microsoft.com/en-us/azure/cosmos-db/sql/. Performing CRUD operations with the Cosmos SQL API You can perform CRUD operations on JSON documents in Cosmos with the SQL API by calling the fol- lowing most common overloads of methods on an instance of the Microsoft.Azure.Cosmos.Container class: • ReadItemAsync<T>(id, partitionKey): Where T is the item type to get, id is its unique iden- partitionKey is its partition key value. tifier, and ReadManyItemsAsync<T>(idsAndPartitionKeys): Where T is the item type to get, and • idsAndPartitionKeys are the unique identifiers and partition key values of a read-only list of items to retrieve. CreateItemAsync(object): Where object is an instance of the item type to insert. • DeleteItemAsync<T>(id, partitionKey): Where T is the item type to delete, id is its unique • partitionKey is its partition key value. identifier, and PatchItemAsync<T>(id, partitionKey, patchOperations): Where T is the item type to update, • id is its unique identifier, partitionKey is its partition key value, and patchOperations is a read-only list of property changes. ReplaceItemAsync<T>(object, id): Where T is the item type to replace, id is its unique iden- • tifier, and object is an instance of the item type to replace it with. UpsertItemAsync<T>(object, id): Where T is the item type to either insert or replace, id is • its unique identifier, and object is an instance of the item type to insert or replace the existing item with. Good Practice: Cosmos DB uses HTTP as its underlying communication protocol and so the “patch” and “replace” operations are implemented using PATCH and PUT. Just like those HTTP methods, PATCH is more efficient because only the properties that need to change are sent in the request. Each method returns a response that has the following common properties: • Resource: The item that was created/retrieved/updated/deleted. RequestCharge: A double value indicating the request charge measured in RUs. • StatusCode: An HTTP status code value; for example, 404 when a ReadItemAsync<T> request • fails to find the item. 