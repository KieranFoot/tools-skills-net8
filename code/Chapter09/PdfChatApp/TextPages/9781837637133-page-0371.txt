Building and Securing Web Services Using Minimal APIs 338 db.Products.Where(p => p.ProductName.Contains(name))) .WithName("GetProductsByName") .WithOpenApi() .Produces<Product[]>(StatusCodes.Status200OK) .RequireCors(policyName: "Northwind.Mvc.Policy"); 3. Start the Northwind.WebApi.Service project using the https profile without debugging. Northwind.WebApi.Client.Mvc project using the https profile without debugging. 4. Start the 5. Show Developer Tools and Console. On the home page, in the text box, enter cha, click Get Products, and note that the console shows 6. the JSON document returned from the web service and the table is filled with three products. 7. Close the browser and shut down the web servers. Understanding other CORS policy options You can control the: • Allowed origins, for example, https://*.example.com/. GET, POST, DELETE, and so on. • Allowed HTTP methods, for example, Allowed HTTP request headers, for example, Content-Type, Content-Language, x-custom- • header, and so on. Exposed HTTP response headers, meaning which headers to include unredacted in a response • (because, by default, response headers are redacted), for example, x-custom-header. You can learn more about options for CORS policies at the following link: https://learn. microsoft.com/en-us/aspnet/core/security/cors#cors-policy-options Now that you know that CORS does not secure a web service, let’s look at a useful technique that can prevent a common form of attack. Preventing denial of service attacks using rate limiting A denial of service (DoS) attack is a malicious attempt to disrupt a web service by overwhelming it with requests. If the requests all came from the same place, for example, the same IP address, then it would be relatively easy to cut them off as soon as the attack is detected. But these attacks are often implemented as distributed DoS (DDoS) attacks from many locations so you cannot separate attackers from genuine clients. A different approach is to apply rate limiting to everyone but let through more requests for genuine identified clients. Genuine clients should only make the minimum requests they need. How many is reasonable will depend on your service. One way to prevent DDoS attacks would be to limit how many requests are allowed from any client per minute. 