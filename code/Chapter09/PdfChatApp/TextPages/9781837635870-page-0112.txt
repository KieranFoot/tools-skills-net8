Chapter 2 93 Using target-typed new to instantiate objects With C# 9, Microsoft introduced another syntax for instantiating objects, known as target-typed new. When instantiating an object, you can specify the type first and then use new without repeating the type, as shown in the following code: XmlDocument xml3 = new(); // Target-typed new in C# 9 or later. If you have a type with a field or property that needs to be set, then the type can be inferred, as shown in the following code: // In Program.cs. Person kim = new(); kim.BirthDate = new(1967, 12, 26); // i.e. new DateTime(1967, 12, 26) // In a separate Person.cs file or at the bottom of Program.cs. class Person { public DateTime BirthDate; } This way of instantiating objects is especially useful with arrays and collections because they have multiple objects, often of the same type, as shown in the following code: List<Person> people = new() // Instead of: new List<Person>() { new() { FirstName = "Alice" }, // Instead of: new Person() { ... } new() { FirstName = "Bob" }, new() { FirstName = "Charlie" } }; You will learn about arrays in Chapter 3, Controlling Flow, Converting Types, and Handling Exceptions, and collections in Chapter 8, Working with Common .NET Types. Good Practice: Use target-typed new to instantiate objects because it requires fewer char- acters, when reading a statement from left to right, as in English, you immediately know the type of the variable, and it is not limited to local variables like var is. IMHO, the only reason not to use target-typed new is if you must use a pre-version 9 C# compiler. I do acknowledge that my opinion is not accepted by the whole C# community. I have used target-typed new throughout the remainder of this book. Please let me know if you spot any cases that I missed! 