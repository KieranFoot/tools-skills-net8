Chapter 5 185 public Task DeleteCustomerAsync() { // ... return Task.CompletedTask; } When running tasks in parallel, the code will often need to access resources, and those resources are sometimes shared between tasks and threads. We, therefore, need to learn how to safely access those shared resources. Synchronizing access to shared resources When you have multiple threads executing at the same time, there is a possibility that two or more of the threads may access the same variable or another resource at the same time, and as a result, may cause a problem. For this reason, you should carefully consider how to make your code thread-safe. The simplest mechanism for implementing thread safety is to use an object variable as a flag or traffic light to indicate when a shared resource has an exclusive lock applied. In William Golding’s Lord of the Flies, Piggy and Ralph find a conch shell and use it to call a meeting. The boys impose a “rule of the conch” on themselves, deciding that no one can speak unless they’re holding the conch. I like to name the object variable I use for implementing thread-safe code the “conch.” When a thread has the conch, no other thread should access the shared resource(s) represented by that conch. Note that I say should. Only code that respects the conch enables synchronized access. A conch is not a lock. We will explore a couple of types that can be used to synchronize access to shared resources: • Monitor: An object that can be used by multiple threads to check if they should access a shared resource within the same process. Interlocked: An object for manipulating simple numeric types at the CPU level. • Accessing a resource from multiple threads Let’s create a console app to explore sharing resources between multiple threads: 1. Use your preferred code editor to add a new Console App / console project to the Chapter05 SynchronizingResourceAccess. solution named System.Console class and treat warnings as errors. 2. Globally and statically import the SharedObjects.cs. 3. Add a new class file named SharedObjects.cs, delete any existing statements and then define a static class with a field 4. In to store a message that is a shared resource, as shown in the following code: public static class SharedObjects { public static string? Message; // a shared resource } 