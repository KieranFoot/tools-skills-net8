Chapter 4 131 "productName": "Chai", "supplier": { "supplierId": 1, "companyName": "Exotic Liquids", "contactName": "Charlotte Cooper", "Address": "49 Gilbert St.", "City": "London", "Country": "UK", "Phone": "(171) 555-2222" }, "category": { "categoryId": 1, "categoryName": "Beverages", "description": "Soft drinks, coffees, teas, beers, and ales", "image": "https://myaccount.blob.core.windows.net/categories/beverages.png" }, "quantityPerUnit": "10 boxes x 20 bags", "unitPrice": 18.0000, "unitsInStock": 39, "unitsOnOrder": 0, "reorderLevel": 10, "discontinued": false } Unlike with a relational database model, it is common to embed related data, which involves duplicat- ing data such as the category and supplier information across multiple products. This is good practice if the related data is bounded. For example, for a product, there will only ever be one supplier and one category, so those relationships are bounded to one, which means limited to one each. If we were modeling a category and decided to embed its related products, then that could be poor practice because having all the product details as an array would be unbounded. Instead, we might choose to only store a unique identifier for each product and reference the product details stored elsewhere. You should also consider how frequently the related data is updated. The more frequently it needs to be updated, the more you should avoid embedding it. If related data is unbounded but infrequently updated, then embedding might still be a good choice. Deliberately but carefully denormalizing parts of your data model implies that you will need to execute fewer queries and updates for common operations, reducing costs both in money and performance. Use embedding (denormalized data) when: • The relationships are contained, like property owned by a person, or the children of a parent. • The relationships are one-to-one or one-to-few, i.e., the related data is bounded. 