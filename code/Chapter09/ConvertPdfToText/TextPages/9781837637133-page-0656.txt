Chapter 14 623 Creating an ASP.NET Core MVC website You will use a project template to create an ASP.NET Core MVC website project that has a local database for authenticating and authorizing users. Visual Studio 2022 defaults to using SQL Server LocalDB for the accounts database. Visual Studio Code (or more accurately the dotnet CLI tool) uses SQLite by default and you can specify a switch to use SQL Server LocalDB instead. Let’s see it in action: 1. Use your preferred code editor to create an ASP.NET Core MVC website project with authen- tication accounts stored in a database, as defined in the following list: • Project template: ASP.NET Core Web App (Model-View-Controller) [C#] / mvc • Project file and folder: Northwind.Mvc • Solution file and folder: Chapter14 • Authentication type: Individual Accounts / --auth Individual • Configure for HTTPS: Selected. • Enable Docker: Cleared. • Do not use top-level statements: Cleared. Northwind.Mvc project. 2. Build the • If you created the MVC project using Visual Studio 2022, then the database for authen- tication and authorization will be stored in SQL Server LocalDB. But the database does not yet exist. At a command prompt or terminal, in the Northwind.Mvc folder, enter the command to run database migrations so that the database used to store credentials for authentication is created, as shown in the following command: dotnet ef database update • If you created the MVC project using dotnet new, then the database for authentica- tion and authorization will be stored in SQLite and the file has already been created, named app.db. 3. In the root folder for the MVC website project, in the appsettings.json file, note the con- nection string for the authentication database named DefaultConnection, as shown in the following configuration: • Using SQL Server LocalDB: { "ConnectionStrings": { "DefaultConnection": "Server=(localdb)\\ mssqllocaldb;Database=aspnet-Northwind.Mvc-...;Trusted_ Connection=True;MultipleActiveResultSets=true" }, 