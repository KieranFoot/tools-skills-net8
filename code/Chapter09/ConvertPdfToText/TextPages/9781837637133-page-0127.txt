Building Entity Models for SQL Server Using EF Core 94 Note the following: • The NorthwindDb data context class is partial to allow you to extend it and regener- NorthwindDb because Northwind is used for a ate it in the future. We used the name namespace. NorthwindDb has two constructors: a default parameter-less one and one that allows • options to be passed in. This is useful in apps where you want to specify the connection string at runtime. DbSet<T> properties that represent tables like Categories. • The OnConfiguring method, if options have not been specified in the constructor, • In the then it defaults to using the connection string used during scaffolding. It has a com- piler warning to remind you that you should not hardcode security information in this connection string. OnModelCreating method, the Fluent API is used to configure the entity classes, • In the and then a partial method named OnModelCreatingPartial is invoked. This allows you to implement that partial method in your own partial Northwind class to add your own Fluent API configuration, which will not be lost if you regenerate the model classes. 10. At the top of the NorthwindDb.cs file, import the namespace for working with ADO.NET types, as shown in the following code: using Microsoft.Data.SqlClient; // To use SqlConnectionStringBuilder. 11. Modify the OnConfiguring method to dynamically set the connection string and set any sen- sitive parameters using environment variables, as shown in the following code: protected override void OnConfiguring( DbContextOptionsBuilder optionsBuilder) { if (!optionsBuilder.IsConfigured) { SqlConnectionStringBuilder builder = new(); builder.DataSource = "."; // "ServerName\InstanceName" e.g. @".\ sqlexpress" builder.InitialCatalog = "Northwind"; builder.TrustServerCertificate = true; builder.MultipleActiveResultSets = true; // Because we want to fail faster. Default is 15 seconds. builder.ConnectTimeout = 3; // If using Windows Integrated authentication. builder.IntegratedSecurity = true; 