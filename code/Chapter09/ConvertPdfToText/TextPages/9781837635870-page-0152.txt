Chapter 3 133 The case statement shown in the following code: case Cat fourLeggedCat when fourLeggedCat.Legs == 4: Can also be written using the more concise property pattern-matching syntax, as shown in the following code: case Cat { Legs: 4 } fourLeggedCat: 4. Run the code and note that the array named animals is declared to contain the Animal? type, Animal, such as a Cat or a Spider, or a null value. In this code, so it could be any subtype of we create four instances of Animal of different types with different properties, and one null one, so the result will be five messages that describe each of the animals, as shown in the following output: switch statement: The cat named Karen has four legs. switch statement: The animal is null. switch statement: The non-domestic cat is named Mufasa. switch statement: The Sid Vicious spider is poisonous. Run! switch statement: Captain Furry is a Spider. Simplifying switch statements with switch expressions In C# 8 or later, you can simplify switch statements using switch expressions. Most switch statements are very simple, yet they require a lot of typing. switch expressions are de- signed to simplify the code you need to type while still expressing the same intent in scenarios where switch expressions use a lambda, =>, to indicate a all cases return a value to set a single variable. return value. Letâ€™s implement the previous code that used a switch statement using a switch expression so that you can compare the two styles: 1. In Program.cs, at the bottom and inside the foreach loop, add statements to set the message based on what type and attributes the animal has, using a switch expression, as shown in the following code: message = animal switch { Cat fourLeggedCat when fourLeggedCat.Legs == 4 => $"The cat named {fourLeggedCat.Name} has four legs.", Cat wildCat when wildCat.IsDomestic == false => $"The non-domestic cat is named {wildCat.Name}.", Cat cat => $"The cat is named {cat.Name}.", Spider spider when spider.IsPoisonous 