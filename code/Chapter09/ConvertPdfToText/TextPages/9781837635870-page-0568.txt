Chapter 10 549 If you used SQL Server, the generated SQL will be slightly different. For example, it uses square brackets instead of double quotes around object names, as shown in the following output: Info > ToQueryString: DECLARE @__stock_0 smallint = CAST(95 AS smallint); SELECT [c].[CategoryId], [c].[CategoryName], [c].[Description], [t]. [ProductId], [t].[CategoryId], [t].[UnitPrice], [t].[Discontinued], [t]. [ProductName], [t].[UnitsInStock] FROM [Categories] AS [c] LEFT JOIN ( SELECT [p].[ProductId], [p].[CategoryId], [p].[UnitPrice], [p]. [Discontinued], [p].[ProductName], [p].[UnitsInStock] FROM [Products] AS [p] WHERE [p].[UnitsInStock] >= @__stock_0 ) AS [t] ON [c].[CategoryId] = [t].[CategoryId] ORDER BY [c].[CategoryId] Logging EF Core To monitor the interaction between EF Core and the database, we can enable logging. Logging could Debug or Trace, or to a file. be to the console, to Good Practice: By default, EF Core logging will exclude any data that is sensitive. You can include this data by calling the EnableSensitiveDataLogging method, especially during development. You should disable it before deploying to production. You can also call EnableDetailedErrors. Letâ€™s see an example of this in action: 1. In NorthwindDb.cs, at the bottom of the OnConfiguring method, add statements to log to the console and to include sensitive data like parameter values for commands being sent to the database if we compile the debug configuration, as shown in the following code: optionsBuilder.LogTo(WriteLine) // This is the Console method. #if DEBUG .EnableSensitiveDataLogging() // Include SQL parameters. .EnableDetailedErrors() #endif ; LogTo requires an Action<string> delegate. EF Core will call this delegate, pass- ing a string value for each log message. Passing the Console class WriteLine method, therefore, tells the logger to write each method to the console. 