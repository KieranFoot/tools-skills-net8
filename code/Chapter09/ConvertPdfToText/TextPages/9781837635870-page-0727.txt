Building and Consuming Web Services 708 7. Start the Northwind.WebApi web service project using the https launch profile. 8. In the command prompt or terminal, note that there are four default output formatters, in- cluding ones that convert null values into 204 No Content and ones to support responses that are plain text, byte streams, and JSON, as shown in the following output: Default output formatters: HttpNoContentOutputFormatter StringOutputFormatter, Media types: text/plain StreamOutputFormatter SystemTextJsonOutputFormatter, Media types: application/json, text/ json, application/*+json 9. Shut down the web server. Registering dependency services You can register dependency services with different lifetimes, as shown in the following list: • Transient: These services are created each time they’re requested. Transient services should be lightweight and stateless. • Scoped: These services are created once per client request and are disposed of then the re- sponse returns to the client. Singleton: These services are usually created the first time they are requested and then shared, • although you can provide an instance at the time of registration too. Introduced in .NET 8 is the ability to set a key for a dependency service. This allows multiple services to be registered with different keys and then retrieved later using that key. builder.Services.AddKeyedsingleton<IMemoryCache, BigCache>("big"); builder.Services.AddKeyedSingleton<IMemoryCache, SmallCache>("small"); class BigCacheConsumer([FromKeyedServices("big")] IMemoryCache cache) { public object? GetData() => cache.Get("data"); } class SmallCacheConsumer(IKeyedServiceProvider keyedServiceProvider) { public object? GetData() => keyedServiceProvider .GetRequiredKeyedService<IMemoryCache>("small"); } In this book, you will use all three types of lifetime but we will not need to use keyed services. 