Chapter 10 573 2. In Program.cs, comment out the statements to update the product, and then add statements to call DeleteProducts, as shown in the following code: WriteLine("About to delete all products whose name starts with Bob."); Write("Press Enter to continue or any other key to exit: "); if (ReadKey(intercept: true).Key == ConsoleKey.Enter) { int deleted = DeleteProducts(productNameStartsWith: "Bob"); WriteLine($"{deleted} product(s) were deleted."); } else { WriteLine("Delete was canceled."); } 3. Run the code, press Enter, and view the result, as shown in the following partial output: 1 product(s) were deleted. If multiple product names started with Bob, then they would all be deleted. As an optional challenge, Bob and then delete them. modify the statements to add three new products that start with More efficient updates and deletes You have now seen the traditional way of modifying data using EF Core, as summarized in the fol- lowing steps: 1. Create a database context. Change tracking is enabled by default. 2. To insert data, create a new instance of an entity class and then pass it as an argument to the Add method of the appropriate collection, for example, db.Products.Add(product). 3. To update data, retrieve the entities that you want to modify and then change their properties. To delete data, retrieve the entities that you want to remove and then pass them as an argument 4. to the Remove or RemoveRange methods of the appropriate collection, for example, db.Products. Remove(product). SaveChanges method of the database context. This uses the change tracker to gener- 5. Call the ate SQL statements to perform the needed inserts, updates, and deletes, and then returns the number of entities affected. EF Core 7 introduced two methods that can make updates and deletes more efficient because they do not require entities to be loaded into memory and have their changes tracked. The methods are named ExecuteDelete and ExecuteUpdate (and their Async equivalents). They are called on a LINQ query and affect the entities in the query result, although the query is not used to retrieve entities, so no entities are loaded into the data context. 