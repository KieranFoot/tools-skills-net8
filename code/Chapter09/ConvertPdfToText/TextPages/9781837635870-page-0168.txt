Chapter 3 149 4 00000000000000000000000000000100 3 00000000000000000000000000000011 2 00000000000000000000000000000010 1 00000000000000000000000000000001 0 00000000000000000000000000000000 -1 11111111111111111111111111111111 -2 11111111111111111111111111111110 -3 11111111111111111111111111111101 -4 11111111111111111111111111111100 -5 11111111111111111111111111111011 -6 11111111111111111111111111111010 -7 11111111111111111111111111111001 -8 11111111111111111111111111111000 -2147483648 10000000000000000000000000000000 3. Note that all the positive binary number representations start with 0 and all the negative bi- nary number representations start with 1. The decimal value -1 is represented by all ones in binary. That is why when you have an integer too large to fit in a 32-bit integer, it becomes -1. More Information: If you are interested in learning more about how signed numbers can be represented in computer systems, then you can read the following article: https:// en.wikipedia.org/wiki/Signed_number_representations. Converting with the System.Convert type You can only cast between similar types, for example, between whole numbers like byte, int, and long, or between a class and its subclasses. You cannot cast a long to a string or a byte to a DateTime. An alternative to using the cast operator is to use the System.Convert type. The System.Convert type can convert to and from all the C# number types, as well as Booleans, strings, and date and time values. Letâ€™s write some code to see this in action: 1. At the top of Program.cs, statically import the System.Convert class, as shown in the following code: using static System.Convert; // To use the ToInt32 method. Alternatively, add an entry to CastingConverting.csproj, as shown in the fol- lowing markup: <Using Include="System.Convert" Static="true" />. 