Chapter 4 153 public string? phone { get; set; } public string? fax { get; set; } public string? homePage { get; set; } } 5. In the Models folder, add a class file named ProductCosmos.cs, and modify its content to define a ProductCosmos class, as shown in the following code: namespace Northwind.CosmosDb.Items; public class ProductCosmos { public string id { get; set; } = null!; public string productId { get; set; } = null!; public string productName { get; set; } = null!; public string? quantityPerUnit { get; set; } public decimal? unitPrice { get; set; } public short? unitsInStock { get; set; } public short? unitsOnOrder { get; set; } public short? reorderLevel { get; set; } public bool discontinued { get; set; } public CategoryCosmos? category { get; set; } public SupplierCosmos? supplier { get; set; } } Good Practice: All JSON document items in Cosmos must have an id property. To control the value, it is good practice to explicitly define that property in the model. Otherwise, the system will assign a GUID value, as you saw earlier in this chapter when using the Data Explorer to manually add a new item. 6. In Program.Methods.cs, add statements to import namespaces for the Northwind data con- text and entities types, the Northwind Cosmos types, and EF Core extensions, as shown in the following code: using Northwind.EntityModels; // To use NorthwindContext and so on. using Northwind.CosmosDb.Items; // To use ProductCosmos and so on. using Microsoft.EntityFrameworkCore; // To use Include extension method. 7. In Program.Methods.cs, add statements to define a method to get all the products in the Northwind SQL database, including their related category and supplier, and then insert them as new items in the Products container in Cosmos, as shown in the following code: static async Task CreateProductItems() { SectionTitle("Creating product items"); 