Combining Data Sources Using GraphQL 530 11. Click Run, and note the response, as shown in the following output: { "data": { "products": [ { "productId": 1, "productName": "Chai" }, { "productId": 2, "productName": "Chang" }, { "productId": 39, "productName": "Chartreuse verte" } ] } } 12. In the GraphQL service command prompt or terminal, note the EF Core-generated SQL filters using parameters, as shown in the following output: info: Microsoft.EntityFrameworkCore.Database.Command[20101] Executed DbCommand (2ms) [Parameters=[@__p_0_rewritten='?' (Size = 40)], CommandType='Text', CommandTimeout='30'] SELECT [p].[ProductId], [p].[CategoryId], [p].[Discontinued], [p].[ProductName], [p].[QuantityPerUnit], [p].[ReorderLevel], [p]. [SupplierId], [p].[UnitPrice], [p].[UnitsInStock], [p].[UnitsOnOrder], [c].[CategoryId], [c].[CategoryName], [c].[Description], [c].[Picture] FROM [Products] AS [p] LEFT JOIN [Categories] AS [c] ON [p].[CategoryId] = [c]. [CategoryId] WHERE [p].[ProductName] LIKE @__p_0_rewritten ESCAPE N'\' 13. Close Chrome, and shut down the web server. Implementing sorting support To enable sorting with a GraphQL service, call the AddSorting method, as highlighted in the following code: builder.Services .AddGraphQLServer() 