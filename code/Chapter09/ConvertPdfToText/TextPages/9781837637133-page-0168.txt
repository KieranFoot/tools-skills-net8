Chapter 4 135 Most throughput settings are applied at the container level, or you can do so at the database level and have the settings shared across all containers. Throughput is distributed equally among partitions. Once provisioned throughput is exhausted, Cosmos DB will start rate-limiting access requests, and your code will have to wait and retry later. Luckily, we will use the .NET SDK for Cosmos DB, which automatically reads the retry-after response header and retries after that time limit. Using the Azure portal, you can provision between 400 RU/s and 250,000 RU/s. At the time of writing, the 400 RU/s minimum would cost about US$35 per month. You would then also need to add the cost of storage depending on how many GBs you want to store, for example, US$5 for a few GBs. The free tier of Cosmos DB allows up to 1,000 RU/s and 25 GB of storage. You can use a calculator at the following link: https://cosmos.azure.com/capacitycalculator/. Factors that affect RUs: • Item size: A 2KB document costs twice as much as a 1KB document. • Indexed properties: Indexing all item properties costs more than indexing a subset of prop- erties. • Consistency: Strict consistency costs twice as many RUs as looser consistency. • Query complexity: The number of predicates (filters), the number of results, the number of custom functions, projections, the size of the dataset, and so on, all increase the cost in RUs. Partition strategies A good partition strategy allows a Cosmos DB database to grow and efficiently run queries and trans- actions. A good partition strategy is about choosing a suitable partition key. It is set for a container and cannot be changed. The partition key should be chosen to evenly distribute operations across the database to avoid hot partitions, meaning a partition that handles more requests, so it is busier than other partitions. A property that will be unique for an item and will often be used to look up an item might be a good choice. For example, for US citizens, a person’s social security number. However, partition keys do not have to be unique. The partition key value will be combined with an item ID to uniquely identify an item. Partitions are automatically created by Cosmos DB when needed. There is no negative impact on your applications and services from the automatic creation and deletion of partitions. Each partition can grow up to a maximum of 20 GB. Cosmos DB will automatically split partitions when needed. A container should have a partition key that possesses these attributes: • High cardinality so that items are distributed evenly across partitions. • Evenly distributed requests across partitions. • Evenly distributed storage across partitions. 