Chapter 2 99 Console.WriteLine(); Console.WriteLine(format: "{0,-10} {1,6}", arg0: "Name", arg1: "Count"); Console.WriteLine(format: "{0,-10} {1,6:N0}", arg0: applesText, arg1: applesCount); Console.WriteLine(format: "{0,-10} {1,6:N0}", arg0: bananasText, arg1: bananasCount); 2. Run the code and note the effect of the alignment and number format, as shown in the fol- lowing output: Name Count Apples 1,234 Bananas 56,789 Custom number formatting You can take complete control of number formatting using custom format codes, as shown in Table 2.8: Format code Description Zero placeholder. Replaces the zero with the corresponding digit if present; otherwise, 0 it uses zero. For example, 0000.00 formatting the value 123.4 would give 0123.40. Digit placeholder. Replaces the hash with the corresponding digit if present; otherwise, # it uses nothing. For example, ####.## formatting the value 123.4 would give 123.4. Decimal point. Sets the location of the decimal point in the number. Respects culture . formatting, so it is a . (dot) in US English but a , (comma) in French. Group separator. Inserts a localized group separator between each group. For example, 0,000 formatting the value 1234567 would give 1,234,567. Also used to scale a , number by dividing by multiples of 1,000 for each comma. For example, 0.00,, formatting the value 1234567 would give 1.23 because the two commas mean divide by 1,000 twice. % Percentage placeholder. Multiplies the value by 100 and adds a percentage character. Escape character. Makes the next character a literal instead of a format code. For \ example, \##,###\# formatting the value 1234 would give #1,234#. Section separator. Defines different format strings for positive, negative, and zero ; numbers. For example, [0];(0);Zero formatting: 13 would give [13], -13 would give (13), and 0 would give Zero. Others All other characters are shown in the output as is. Table 2.8: Custom numeric format codes 