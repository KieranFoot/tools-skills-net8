Caching, Queuing, and Resilient Background Services 374 10. In ProductsController.cs, modify its contents to define a controller-based Web API to work with products in the Northwind database, as we did for minimal APIs, as shown in the follow- ing code: using Microsoft.AspNetCore.Mvc; // To use [HttpGet] and so on. using Northwind.EntityModels; // To use NorthwindContext, Product. namespace Northwind.WebApi.Service.Controllers; [Route("api/products")] [ApiController] public class ProductsController : ControllerBase { private int pageSize = 10; private readonly ILogger<ProductsController> _logger; private readonly NorthwindContext _db; public ProductsController(ILogger<ProductsController> logger, NorthwindContext context) { _logger = logger; _db = context; } // GET: api/products [HttpGet] [Produces(typeof(Product[]))] public IEnumerable<Product> Get(int? page) { return _db.Products .Where(p => p.UnitsInStock > 0 && !p.Discontinued) .OrderBy(product => product.ProductId) .Skip(((page ?? 1) - 1) * pageSize) .Take(pageSize); } // GET: api/products/outofstock [HttpGet] [Route("outofstock")] [Produces(typeof(Product[]))] 