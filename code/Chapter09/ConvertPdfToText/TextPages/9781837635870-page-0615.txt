Querying and Manipulating Data Using LINQ 596 { WriteLine(description); } Write(" "); WriteLine(string.Join(", ", cohort.ToArray())); WriteLine(); } 2. In Program.Functions.cs, add a method that defines three arrays of names, outputs them, and then performs various set operations on them, as shown in the following code: static void WorkingWithSets() { string[] cohort1 = { "Rachel", "Gareth", "Jonathan", "George" }; string[] cohort2 = { "Jack", "Stephen", "Daniel", "Jack", "Jared" }; string[] cohort3 = { "Declan", "Jack", "Jack", "Jasmine", "Conor" }; SectionTitle("The cohorts"); Output(cohort1, "Cohort 1"); Output(cohort2, "Cohort 2"); Output(cohort3, "Cohort 3"); SectionTitle("Set operations"); Output(cohort2.Distinct(), "cohort2.Distinct()"); Output(cohort2.DistinctBy(name => name.Substring(0, 2)), "cohort2.DistinctBy(name => name.Substring(0, 2)):"); Output(cohort2.Union(cohort3), "cohort2.Union(cohort3)"); Output(cohort2.Concat(cohort3), "cohort2.Concat(cohort3)"); Output(cohort2.Intersect(cohort3), "cohort2.Intersect(cohort3)"); Output(cohort2.Except(cohort3), "cohort2.Except(cohort3)"); Output(cohort1.Zip(cohort2,(c1, c2) => $"{c1} matched with {c2}"), "cohort1.Zip(cohort2)"); } 