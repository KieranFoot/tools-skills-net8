Building Websites Using ASP.NET Core Razor Pages 664 With ASP.NET Core 6 and later, this code is executed automatically so it is no longer included in the project template Program.cs source code. How does ASP.NET Core know when we are running in development mode so that the IsDevelopment method returns true, and this extra code executes to set up the developer exception page? Letâ€™s find out. ASP.NET Core can read from settings files and environment variables to determine what hosting en- vironment to use, for example, DOTNET_ENVIRONMENT or ASPNETCORE_ENVIRONMENT. You can override these settings during local development: 1. In the Northwind.Web folder, expand the folder named Properties, and open the file named launchSettings.json. Note the https launch profile sets the environment variable for the Development, as shown highlighted in the following configuration: hosting environment to "https": { "commandName": "Project", "dotnetRunMessages": true, "launchBrowser": true, "applicationUrl": "https://localhost:5131;http://localhost:5130", "environmentVariables": { "ASPNETCORE_ENVIRONMENT": "Development" } }, 2. Change the ASPNETCORE_ENVIRONMENT environment variable from Development to Production. 3. If you are using Visual Studio 2022, optionally, change launchBrowser to false to prevent Visual Studio from automatically launching a browser. This setting is ignored when you start a website project using dotnet run or JetBrains Rider. Program.cs, modify the MapGet statement, as shown highlighted in the following code: 4. In app.MapGet("/", () => $"Environment is {app.Environment.EnvironmentName}"); 5. Start the website project using the https launch profile and note the hosting environment is Production, as shown in the following output: info: Microsoft.Hosting.Lifetime[0] Hosting environment: Production 6. In Chrome, note that the plain text is Environment is Production. 7. Shut down the web server. launchSettings.json, change the environment variable back to Development. 8. In 