Building Efficient Microservices Using gRPC 616 3. In appsettings.json, modify the Protocols option to enable HTTP/1.1 as well as HTTP/2, as shown highlighted in the following markup: { "Logging": { "LogLevel": { "Default": "Information", "Microsoft.AspNetCore": "Warning" } }, "AllowedHosts": "*", "Kestrel": { "EndpointDefaults": { "Protocols": "Http1AndHttp2" } } } Good Practice: By default, a gRPC project will be configured to only allow HTTP/2 requests. To support clients like .http files in your code editor, or Unity, enable both HTTP/1.1 and HTTP/2. Allowing HTTP/1.1 and HTTP/2 on the same port re- quires TLS for protocol negotiation, which is another good reason to leave HTTPS enabled in a gRPC service and therefore not use CreateSlimBuilder. 4. In Program.cs, add a call to add JSON transcoding after the call to add gRPC, as shown high- lighted in the following code: builder.Services.AddGrpc().AddJsonTranscoding(); 5. In the Northwind.Grpc.Service project/folder, add a folder named google. google folder, add a folder named api. 6. In the api folder, add two .proto files named http.proto and annotations.proto. 7. In the 8. Copy and paste the raw contents for the two files from the files found at the following link: https://github.com/dotnet/aspnetcore/tree/main/src/Grpc/JsonTranscoding/test/ testassets/Sandbox/google/api. Protos folder, in employee.proto, import the annotations .proto file, and use it to add 9. In the an option to expose an endpoint to make an HTTP request to the GetEmployee method, as shown in the following code: syntax = "proto3"; option csharp_namespace = "Northwind.Grpc.Service"; 