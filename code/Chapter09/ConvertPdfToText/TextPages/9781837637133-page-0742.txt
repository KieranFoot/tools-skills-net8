Chapter 16 709 Understanding .NET MAUI To create a mobile app that only needs to run on iPhones, you might choose to build it with either the Objective-C or Swift language and the UIkit libraries using the Xcode development tool. To create a mobile app that only needs to run on Android phones, you might choose to build it with either the Java or Kotlin language and the Android SDK libraries using the Android Studio develop- ment tool. But what if you need to create a mobile app that can run on iPhones and Android phones? And what if you only want to create that mobile app once using a programming language and development platform that you are already familiar with? And what if you realized that with a bit more coding effort to adapt the UI to desktop-size devices, you could target macOS and Windows desktops too? .NET MAUI enables developers to build cross-platform mobile apps for Apple iOS (iPhone), iPadOS, macOS using Catalyst, Windows using WinUI 3, and Google Android using C# and .NET, which are then compiled to native APIs and executed on native phone and desktop platforms. Business logic layer code can be written once and shared between all platforms. UI interactions and APIs are different on various mobile and desktop platforms, so the UI layer is sometimes custom for each platform. Like WPF and UWP apps, .NET MAUI uses XAML to define the UI once for all platforms using abstrac- tions of platform-specific UI components. Applications built with .NET MAUI draw the UI using native platform widgets, so the appâ€™s look and feel fits naturally with the target mobile platform. A user experience built using .NET MAUI will not perfectly fit a specific platform in the same way that one custom built with native tools for that platform would, but for mobile and desktop apps that will not have millions of users, it is good enough. With some effort, you can build beautiful apps, as illustrated by the Microsoft challenge that you can read about at the following link: https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-beautiful-ui-challenge/ .NET MAUI and Xamarin support Major versions of .NET MAUI ship with .NET starting with .NET 7 but as an optional workload. This means that .NET MAUI does not follow the same Short Term Support (STS)/Long Term Support (LTS) as the main .NET platform. Every version of .NET MAUI only has 18 months of support, so .NET MAUI effectively is always an STS release, and this includes the .NET MAUI version that ships as a workload with .NET 8. .NET MAUI has dependencies on other OSes like iOS and macOS so it gets complicated. Major versions of iOS usually release in September, and major versions of iPadOS and macOS often release later in October or November. This does not give the .NET MAUI team much time to make sure their platform works well with those operating systems before a major version of .NET is released in early November. 