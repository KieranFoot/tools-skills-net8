Chapter 5 269 Deconstruction has the effect of splitting the tuple into its parts and assigning those parts to new variables. Let’s see it in action: 1. In Program.cs, add statements to deconstruct the tuple returned from the GetFruit method, as shown in the following code: (string fruitName, int fruitNumber) = bob.GetFruit(); WriteLine($"Deconstructed tuple: {fruitName}, {fruitNumber}"); 2. Run the PeopleApp project and view the result, as shown in the following output: Deconstructed tuple: Apples, 5 Deconstructing other types using tuples Tuples are not the only type that can be deconstructed. Any type can have special methods, named Deconstruct, that break down an object into parts. You can have as many Deconstruct methods as you like as long as they have different signatures. Let’s implement some for the Person class: 1. In Person.cs, add two Deconstruct methods with out parameters defined for the parts we want to deconstruct into, as shown in the following code: // Deconstructors: Break down this object into parts. public void Deconstruct(out string? name, out DateTimeOffset dob) { name = Name; dob = Born; } public void Deconstruct(out string? name, out DateTimeOffset dob, out WondersOfTheAncientWorld fav) { name = Name; dob = Born; fav = FavoriteAncientWonder; } 2. In Program.cs, add statements to deconstruct bob, as shown in the following code: var (name1, dob1) = bob; // Implicitly calls the Deconstruct method. WriteLine($"Deconstructed person: {name1}, {dob1}"); var (name2, dob2, fav2) = bob; WriteLine($"Deconstructed person: {name2}, {dob2}, {fav2}"); 