Writing, Debugging, and Testing Functions 190 3. In Program.cs, delete any existing statements and then, at the bottom of the file, add a function with a deliberate bug, as shown in the following code: double Add(double a, double b) { return a * b; // Deliberate bug! } 4. Above the Add function, write statements to declare and set some variables and then add them together using the buggy function, as shown in the following code: double a = 4.5; double b = 2.5; double answer = Add(a, b); WriteLine($"{a} + {b} = {answer}"); WriteLine("Press Enter to end the app."); ReadLine(); // Wait for user to press Enter. 5. Run the console application and view the result, as shown in the following output: 4.5 + 2.5 = 11.25 Press Enter to end the app. But wait, there’s a bug! 4.5 added to 2.5 should be 7, not 11.25! We will use the debugging tools to hunt for and squish the bug. Setting a breakpoint and starting debugging Breakpoints allow us to mark a line of code that we want to pause at to inspect the program state and find bugs. Using Visual Studio 2022 Let’s set a breakpoint and then start debugging using Visual Studio 2022: 1. Click in line 1, which is the statement that declares the variable named a. 2. Navigate to Debug | Toggle Breakpoint or press F9. A red circle will appear in the margin bar on the left-hand side and the statement will be highlighted in red to indicate that a breakpoint has been set, as shown in Figure 4.3: 