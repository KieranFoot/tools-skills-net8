Chapter 9 507 SectionTitle("Reading all environment variables for machine"); IDictionary varsMachine = GetEnvironmentVariables( EnvironmentVariableTarget.Machine); DictionaryToTable(varsMachine); SectionTitle("Reading all environment variables for user"); IDictionary varsUser = GetEnvironmentVariables( EnvironmentVariableTarget.User); DictionaryToTable(varsUser); 6. Run the code and view the result, as shown in the following partial output: *** Reading all environment variables for process *** ┌─────────────────┬──────────────────────────────────────────────────┐ │ Key │ Value │ ├─────────────────┼──────────────────────────────────────────────────┤ │ HOMEPATH │ \Users\markj │ ... └─────────────────┴──────────────────────────────────────────────────┘ Expanding, setting, and getting an environment variables Often you need to format a string that contains embedded environment variables. They are defined by surrounding the variable name with percent symbols, as shown in the following text: My username is %USERNAME%. My CPU is %PROCESSOR_IDENTIFIER%. To set an environment variable at the command prompt on Windows, use the set or setx command, as shown in Table 9.8: Scope Level Command set MY_ENV_VAR="Alpha" Session/Shell setx MY_ENV_VAR "Beta" User setx MY_ENV_VAR "Gamma" /M Machine Table 9.8: Commands to set an environment variable on Windows The set command defines a temporary environment variable that can be read immediately in the current shell or session. Note that it uses an equal sign = to assign the value. The setx command defines a permanent environment variable, but after defining it, you must close the current shell or session and restart the shell for the environment variable to be read. Note that it does not use an equal sign to assign the value! 