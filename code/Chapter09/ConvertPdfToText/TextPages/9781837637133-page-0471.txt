Building Serverless Nanoservices Using Azure Functions 438 Table 10.1 shows some more examples: Expression Description 0 5 * * * * Once every hour of the day at minute 5 of each hour. 0 0,10,30,40 * * * * Four times an hour – at minutes 0, 10, 30, and 40 during every hour. * * */2 * * * Every 2 hours. 0,15 * * * * * At 0 and 15 seconds every minute. 0/15 * * * * * At 0, 15, 30, and 45 seconds every minute, aka every 15 seconds. 0-15 * * * * * At 0, 1, 2, 3, and so on up to 15 seconds past each minute, but not 16 to 59 seconds past each minute. 0 30 9-16 * * * Eight times a day – at hours 9:30 A.M, 10:30 A.M, and so on up to 4:30 P.M. th 0 */5 * * * * 12 times an hour – at second 0 of every 5 minute of every hour. th 0 0 */4 * * * 6 times a day – at minute 0 of every 4 hour of every day. 0 30 9 * * * 9:30 AM every day. 0 30 9 * * 1-5 9:30 AM every workday. 0 30 9 * * Mon-Fri 9:30 AM every workday. 0 30 9 * Jan Mon 9:30 AM every Monday in January. Table 10.1: Examples of NCRONTAB expressions Now let’s build a simple console app to test your understanding of NCRONTAB expressions: 1. Use your preferred code editor to add a new console app named NCrontab.Console to a Chapter10 solution. NCrontab.Console project, treat warnings as errors, globally and statically import the 2. In the System.Console class, and add a package reference for NCrontab.Signed, as shown in the following markup: <ItemGroup> <PackageReference Include="NCrontab.Signed" Version="3.3.3" /> </ItemGroup> The NCRONTAB library is only for parsing expressions. It is not itself a scheduler. You can learn more about it in the GitHub repository at the following link: https:// github.com/atifaziz/NCrontab. 3. Build the NCrontab.Console project to restore packages. Program.cs, delete the existing statements. Add statements to define a date range for the 4. In year 2023, output a summary of NCRONTAB syntax, and construct an NCRONTAB schedule, and then use it to output the next 40 occurrences that would occur in 2023, as shown in the following code: 