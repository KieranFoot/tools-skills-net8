Chapter 16 739 Good Practice: A resource can be an instance of any object. To share it within an application, define it in the App.xaml file and give it a unique key. To set an element’s property with a resource once when the app first starts, use {StaticResource key}. To set an element’s property with a resource whenever the resource value changes during the lifetime of the app, use {DynamicResource key}. To load a resource using code, use the TryGetValue method of the Resources property. If you treat the Resources property as a dictionary and use array-style syntax, like Resources[key], it will only find resources defined directly in the dictionary, not in any merged dictionaries. Resources can be defined and stored inside any element of XAML, not just at the app level. For exam- ple, if a resource is only needed on MainPage, then it can be defined there. You can also dynamically load XAML files at runtime. More Information: You can read more about .NET MAUI resource dictionaries at the following link: https://learn.microsoft.com/en-us/dotnet/maui/fundamentals/ resource-dictionaries. In particular, note the section about resource lookup behavior. Using data binding When building graphical UIs, you will often want to bind a property of one control to another, or to some data. Binding to elements The simplest type of binding is between two elements. One element acts as a source for a value and the other elements acts as the target. Let’s take the following steps: 1. In CategoriesPage.xaml, under the existing button in the vertical stack layout, add a label for instructions, another label to show the current degree of rotation, a slider for selecting a rotation, and a rainbow square to rotate, as shown highlighted in the following markup: <?xml version="1.0" encoding="utf-8" ?> <ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui" xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml" x:Class="Northwind.Maui.Client.CategoriesPage" Background="{StaticResource Rainbow}" Title="Categories"> <VerticalStackLayout> <Button Text="Click Me" WidthRequest="100" x:Name="ClickMeButton" 