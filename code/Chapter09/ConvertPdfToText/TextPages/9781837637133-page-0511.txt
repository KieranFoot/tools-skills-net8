Broadcasting Real-Time Communication Using SignalR 478 public string To { get; set; } public string Body { get; set; } } public void SendMessage(Message message) The reason for this good practice is that it allows future changes like adding a third property for the message Title. For the bad practice example, a third string parameter named title would need to be added and existing clients would get errors because they are not sending the extra string value. But using the good practice example will not break the method signature so existing clients can continue to call it as before the change. On the server side, the extra Title property will just have a null value that can be checked for, and perhaps be set to a default value. SignalR method parameters are serialized as JSON, so all nested objects are accessible in JavaScript if needed. Now that we’ve explored the fundamentals of SignalR and its various aspects like good practices for method signature design, let’s walk through how to build a live communication service using SignalR. Building a live communication service using SignalR The SignalR server library is included in ASP.NET Core, but the JavaScript client library is not auto- matically included in the project. Remember, SignalR supports multiple client types, and a web page using JavaScript is just one of them. We will use the Library Manager CLI to get the client library from unpkg, a content delivery network (CDN) that can deliver anything found in the Node.js package manager. Let’s add a SignalR server-side hub and client-side JavaScript to an ASP.NET Core MVC project to implement a chat feature that allows visitors to send messages to: • Everyone currently using the website. • Dynamically defined groups. • A single specified user. Good Practice: In a production solution, it would be better to host the SignalR hub in a separate web project so that it can be hosted and scaled independently from the rest of the website. Live communication can often put excessive load on a website. Defining some shared models First, we will define two shared models that can be used on both the server-side and client-side .NET projects that will work with our chat service: 1. Use your preferred code editor to create a new project, as defined in the following list: • Project template: Class Library / classlib 