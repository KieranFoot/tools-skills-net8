Controlling Flow, Converting Types, and Handling Exceptions 134 => $"The {spider.Name} spider is poisonous. Run!", null => "The animal is null.", _ => $"{animal.Name} is a {animal.GetType().Name}." }; WriteLine($"switch expression: {message}"); The main differences are the removal of the case and break keywords. The un- derscore character _ is used to represent the default return value. It is known as a discard and you can read more about it at the following link: https://learn. microsoft.com/en-us/dotnet/csharp/fundamentals/functional/discards. 2. Run the code, and note that the result is the same as before, as shown in the following output: switch statement: The cat named Karen has four legs. switch expression: The cat named Karen has four legs. switch statement: The animal is null. switch expression: The animal is null. switch statement: The non-domestic cat is named Mufasa. switch expression: The non-domestic cat is named Mufasa. switch statement: The Sid Vicious spider is poisonous. Run! switch expression: The Sid Vicious spider is poisonous. Run! switch statement: Captain Furry is a Spider. switch expression: Captain Furry is a Spider. Understanding iteration statements Iteration statements repeat a block of statements either while a condition is true (while and for state- ments) or for each item in a collection (foreach statement). The choice of which statement to use is based on a combination of ease of understanding to solve the logic problem and personal preference. Looping with the while statement The while statement evaluates a Boolean expression and continues to loop while it is true. Letâ€™s ex- plore iteration statements: 1. Use your preferred coding tool to add a new Console App / console project named IterationStatements to the Chapter03 solution. Program.cs, delete the existing statements and then add statements to define a while state- 2. In ment that loops while an integer variable has a value less than 10, as shown in the following code: int x = 0; while (x < 10) 