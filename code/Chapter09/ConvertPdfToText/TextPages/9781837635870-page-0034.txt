Chapter 1 15 Understanding .NET runtime and .NET SDK versions If you have not built a standalone app, then the .NET runtime is the minimum needed to install so that an operating system can run a .NET application. The .NET SDK includes the .NET runtime as well as the compilers and other tools needed to build .NET code and apps. .NET runtime versioning follows semantic versioning, that is, a major increment indicates breaking changes, minor increments indicate new features, and patch increments indicate bug fixes. .NET SDK versioning does not follow semantic versioning. The major and minor version numbers are tied to the runtime version it is matched with. The patch number follows a convention that indicates the major and minor versions of the SDK. You can see an example of this in Table 1.3: Change Runtime SDK Initial release 8.0.0 8.0.100 SDK bug fix 8.0.0 8.0.101 Runtime and SDK bug fix 8.0.1 8.0.102 SDK new feature 8.0.1 8.0.200 Table 1.3: Examples of changes and versions for a .NET runtime and SDK Listing and removing versions of .NET .NET runtime updates are compatible with a major version such as 8.x, and updated releases of the .NET SDK maintain the ability to build applications that target previous versions of the runtime, which enables the safe removal of older versions. You can see which SDKs and runtimes are currently installed using the following commands: dotnet --list-sdks dotnet --list-runtimes dotnet --info Good Practice: To make it easier to enter commands at the command prompt or terminal, the following link lists all commands throughout the book as a single statement that can be easily copied and pasted: https://github.com/markjprice/cs12dotnet8/blob/ main/docs/command-lines.md. On Windows, use the Apps & features section to remove .NET SDKs. On Linux, there is no single mechanism, but you can learn more at the following link: https ://le a r n . mic r o s oft. c o m/e n - u s/dotn et/c o r e/in stall/r e m o v e - r u ntim e - sdk- versions?pivots=os-linux 