Managing NoSQL Data Using Azure Cosmos DB 132 • The related data needs infrequent updates. • The related data often or always needs to be included in query results. Good Practice: Denormalized data models provide better read performance but worse write performance. Imagine that you want to model an article and its comments on a popular news website. The com- ments are unbounded and, for an engaging article, would frequently be added to, especially during the hours or days after it is published while it is topical news. Or imagine an investor with stock they trade. The current price of that stock would be frequently updated. In these scenarios, you would want to normalize the related data either wholly or partially. For ex- ample, you could choose to embed the most liked comments that will be shown at the top of the list directly under the article. Other comments could be stored separately and referenced using their primary keys. You could choose to embed stock information for long-term investments that are held for many years, like the price the investment was purchased at and the price on the first day of each month since then (but not the live current price), but reference stock information for short-term investments for day trading. Use referencing (normalized data) when: • The relationships are one-to-many or many-to-many and unbounded. • The related data needs frequent updates. Good Practice: Normalized data models require more queries, which worsens read per- formance but provides better write performance. You can read more about modeling documents in Azure Cosmos DB at the following link: https://learn.microsoft.com/en-us/azure/cosmos-db/sql/modeling-data. Consistency levels Azure Cosmos DB is distributed globally and scales elastically. It relies on replication to provide low latency and high availability all over the world. To achieve this, you must accept and choose tradeoffs. To ease the life of a programmer, you want total consistency of data. If data is modified anywhere in the world, then any subsequent read operation should see that change. The best consistency is known as linearizability. Linearizability increases the latency of write operations and reduces the availability of read operations because it must wait for replication to occur globally. 