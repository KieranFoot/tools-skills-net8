Caching, Queuing, and Resilient Background Services 382 Letâ€™s go! 1. In the Northwind.WebApi.Service project, in Program.cs, after the call to CreateBuilder, in the section for configuring services, register the implementation for the distributed memory cache, as shown in the following code: builder.Services.AddDistributedMemoryCache(); 2. In ProductsController.cs, import the namespace for working with a distributed cache im- plementation and serialized JSON, as shown in the following code: using Microsoft.Extensions.Caching.Distributed; // To use IDistributedCache. using System.Text.Json; // To use JsonSerializer. 3. In ProductsController.cs, declare some fields to store the distributed cache implementation and an item key for discontinued products, as highlighted in the following code: private readonly IMemoryCache _memoryCache; private const string OutOfStockProductsKey = "OOSP"; private readonly IDistributedCache _distributedCache; private const string DiscontinuedProductsKey = "DISCP"; public ProductsController(ILogger<ProductsController> logger, NorthwindContext context, IMemoryCache memoryCache, IDistributedCache distributedCache) { _logger = logger; _db = context; _memoryCache = memoryCache; _distributedCache = distributedCache; } 4. In ProductsController.cs, define a private method to get the discontinued products from the database, and set them in the distributed cache, using a sliding expiration of 5 seconds and an absolute expiration of 20 seconds, as shown in the following code: private Product[]? GetDiscontinuedProductsFromDatabase() { Product[]? cachedValue = _db.Products .Where(product => product.Discontinued) .ToArray(); DistributedCacheEntryOptions cacheEntryOptions = new() 