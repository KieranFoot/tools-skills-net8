Chapter 9 389 { "productId": 77, "productName": "Original Frankfurter grüne Soße", "supplierId": 12, "categoryId": 2, "quantityPerUnit": "12 boxes", "unitPrice": 85.0, "unitsInStock": 32, "unitsOnOrder": 0, "reorderLevel": 15, "discontinued": false, "category": null, "orderDetails": [], "supplier": null } 8. Close the browser and shut down the web server. Good Practice: Response caching should only be enabled for anonymous requests. Au- thenticated requests and responses should not be cached. Caching is one of the best ways to improve the performance and scalability of your services. Next, we will learn how to improve a service’s resilience when inevitable failures occur. Fault tolerance with Polly Polly is “a .NET resilience and transient-fault-handling library that allows developers to express policies such as Retry, Circuit Breaker, Timeout, Bulkhead Isolation, and Fallback in a fluent and thread-safe manner,” https:// as stated on the official Polly GitHub repository, which can be found at the following link: . github.com/App-vNext/Polly Transient faults are errors caused by temporary conditions, such as temporary service unavailability or network connectivity issues. It is essential to handle transient faults in distributed systems, or they can become almost unusable. Understanding retry and circuit breaker patterns The Retry pattern enables clients to automatically retry a failed action with the expectation that the fault will succeed if retried after a short delay. Be careful, because if you implement the Retry pattern naively, then it can make the problem worse! For example, if you set a fixed time between retries, then all the clients who received a fault will at- tempt to retry at the same time, overloading the service. To avoid this issue, retries are often set with an exponentially increasing time between retries, or they might use jitter (aka randomizer) algorithms. 