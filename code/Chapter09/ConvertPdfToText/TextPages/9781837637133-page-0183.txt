Managing NoSQL Data Using Azure Cosmos DB 150 8. Run the console app and note the results, as shown in the following output: * * Creating Cosmos resources * Database Id: Northwind, Status: exists. Container Id: Products, Status: exists. PartitionKeyPath: /productId LastModified: 04/07/2022 11:11:31 IndexingPolicy.IndexingMode: Consistent IndexingPolicy.IncludedPaths: /* 9. In the Azure Cosmos DB Emulator or Azure portal, use Data Explorer to delete the Northwind database. (You must hover your mouse cursor over the database and then click the … ellipsis button.) You will be prompted to enter its name to confirm deletion because this operation cannot be undone. It is important to delete the Northwind database at this point. Later in this chapter, you will programmatically add the 77 products from the SQL Server Northwind database to the Cosmos DB Northwind database. If you still have the three sample products in its Products container, then you will have issues. 10. Run the console app and note that because we have just deleted the database, the code we have executed has (re)created the database, as shown in the following output: * * Creating Cosmos resources * Database Id: Northwind, Status: created. Container Id: Products, Status: created. PartitionKeyPath: /productId LastModified: 04/07/2022 11:11:31 IndexingPolicy.IndexingMode: Consistent IndexingPolicy.IncludedPaths: /* You do not need to delete the database again because it will be empty of any products. We now have a Cosmos DB database resource to work with, either in the local emulator or in the Azure cloud. Now, let’s learn how to perform CRUD operations on it using the SQL API. 