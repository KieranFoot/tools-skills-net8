Chapter 5 179 It is even likely that the console app will end before one or even all the tasks have a chance to start and write to the console! Waiting for tasks Sometimes, you need to wait for a task to complete before continuing. To do this, you can use the Wait method on a Task instance, or the WaitAll or WaitAny static methods on an array of tasks, as described in Table 5.1: Method Description t.Wait() This waits for the task instance named t to complete execution. Task.WaitAny(Task[]) This waits for any of the tasks in the array to complete execution. Task.WaitAll(Task[]) This waits for all the tasks in the array to complete execution. Table 5.1: Task class Wait methods Using wait methods with tasks Letâ€™s see how we can use these wait methods to fix the problem with our console app: 1. In Program.cs, after creating the three tasks and before outputting the elapsed time, add statements to combine references to the three tasks into an array and pass them to the WaitAll method, as shown in the following code: Task[] tasks = { taskA, taskB, taskC }; Task.WaitAll(tasks); 2. Run the code and view the result, and note the original thread will pause on the call to WaitAll, waiting for all three tasks to finish before outputting the elapsed time, which is a little over 3 seconds, as shown in the following output: Starting Method A... Starting Method B... Thread Id: 4, Priority: Normal, Background: True, Name: .NET TP Worker Thread Id: 6, Priority: Normal, Background: True, Name: .NET TP Worker Starting Method C... Thread Id: 7, Priority: Normal, Background: True, Name: .NET TP Worker Finished Method C. Finished Method B. Finished Method A. 3,013ms elapsed. The three new threads execute their code simultaneously, and they can potentially start in any order. MethodC should finish first because it takes only 1 second, then MethodB, which takes 2 seconds, and finally, MethodA, because it takes 3 seconds. 