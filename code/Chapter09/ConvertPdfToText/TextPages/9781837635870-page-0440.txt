Chapter 8 421 The System.Guid type is a value type (struct) that represents a GUID value. It has Parse and TryParse methods to take an existing GUID value represented as a string and convert it into the Guid type. It has a NewGuid method to generate a new value. Let’s see how we can generate GUID values and output them: 1. In Program.cs, add statements to access the shared Random instance, and then call its methods to generate random numbers, as shown in the following code: WriteLine($"Empty GUID: {Guid.Empty}."); Guid g = Guid.NewGuid(); WriteLine($"Random GUID: {g}."); byte[] guidAsBytes = g.ToByteArray(); Write("GUID as byte array: "); for (int i = 0; i < guidAsBytes.Length; i++) { Write($"{guidAsBytes[i]:X2} "); } WriteLine(); 2. Run the code and view the result, as shown in the following output: Empty GUID: 00000000-0000-0000-0000-000000000000. Random GUID: c7a11eea-45a5-4619-964a-a9cce1e4220c. GUID as byte array: EA 1E A1 C7 A5 45 19 46 96 4A A9 CC E1 E4 22 0C Working with text One of the other most common types of data for variables is text. The most common types in .NET for working with text are shown in Table 8.2: Namespace Type Description System Char Storage for a single text character System String Storage for multiple text characters System.Text StringBuilder Efficiently manipulates strings System.Text.RegularExpressions Regex Efficiently pattern-matches strings Table 8.2: Common .NET types for working with text Getting the length of a string Let’s explore some common tasks when working with text; for example, sometimes you need to find out the length of a piece of text stored in a string variable: 1. Use your preferred code editor to add a new Console App / console project named WorkingWithText to the Chapter08 solution. 