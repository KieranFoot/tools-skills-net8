Building Web User Interfaces Using ASP.NET Core 640 <data name="Item Count" xml:space="preserve"> <value>Nombre d'éléments</value> </data> <data name="Order Date" xml:space="preserve"> <value>Date de commande</value> </data> <data name="Order ID" xml:space="preserve"> <value>Numéro de commande</value> </data> <data name="Order Total" xml:space="preserve"> <value>Total de la commande</value> </data> <data name="Orders" xml:space="preserve"> <value>Commandes (France)</value> </data> </root> 7. Copy and paste the file and rename it Index.fr.resx. Index.fr.resx, modify the last value to be Commandes (Neutral French). 8. In Localizing Razor views with an injected view localizer Now we can continue with these steps for both code editors: 1. In the Views/Home folder, in Index.cshtml, import the namespace for working with localization, inject the IViewLocalizer service, and make changes to use the labels in the view model, as shown highlighted in the following markup: @using Microsoft.AspNetCore.Mvc.Localization @model IEnumerable<Order> @inject IViewLocalizer Localizer @{ ViewData["Title"] = Localizer["Orders"]; } <div class="text-center"> <h1 class="display-4">@ViewData["Title"]</h1> <table class="table table-bordered table-striped"> <thead> <tr> <th>@Localizer["Order ID"]</th> <th>@Localizer["Order Date"]</th> <th>@Localizer["Company Name"]</th> <th>@Localizer["Country"]</th> 