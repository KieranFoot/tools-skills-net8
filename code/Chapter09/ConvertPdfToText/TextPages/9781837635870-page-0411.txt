Packaging and Distributing .NET Types 392 My guess is that .NET 9 will include support for ASP.NET Core MVC and some parts of EF Core, but it could take until .NET 10 before we can all confidently use most of .NET and know we can build our assemblies with native AOT to gain the benefits. The native AOT publishing process includes code analyzers to warn you if you use any features that are not supported, but not all packages have been annotated to work well with these yet. The most common annotation used to indicate that a type or member does not support AOT is the [RequiresDynamicCode] attribute. More Information: You can learn more about AOT warnings at the following link: https:// learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/fixing- warnings. Reflection and native AOT Reflection is frequently used for runtime inspection of type metadata, dynamic invocation of mem- bers, and code generation. Native AOT does allow some reflection features, but the trimming performed during the native AOT compilation process cannot statically determine when a type has members that might be only accessed via reflection. These members would be removed by AOT, which would then cause a runtime exception. Good Practice: Developers must annotate their types with [DynamicallyAccessedMembers] to indicate a member that is only dynamically accessed via reflection and should therefore be left untrimmed. Requirements for native AOT There are additional requirements for different operating systems: • On Windows, you must install the Visual Studio 2022 Desktop development with C++ workload with all default components. • On Linux, you must install the compiler toolchain and developer packages for libraries that sudo apt-get install the .NET runtime depends on. For example, for Ubuntu 18.04 or later: . clang zlib1g-dev Warning! Cross-platform native AOT publishing is not supported. This means that you must run the publish on the operating system that you will deploy to. For example, you cannot publish a native AOT project on Linux to later run on Windows, and vice versa. 