Chapter 12 523 productName unitPrice } } 19. In the Variables section, define a value for the variable, as shown in the following code: { "unitPrice": 100 } 20. Click Run, and note the response, as shown in the following output: { "data": { "productsByUnitPrice": [ { "productId": 29, "productName": "Thüringer Rostbratwurst", "unitPrice": 123.79 }, { "productId": 38, "productName": "Côte de Blaye", "unitPrice": 263.5 } ] } } 21. Close Chrome, and shut down the web server. Implementing paging support When we request products using the GetProducts method (the products query), all 77 products are returned. Let’s add paging support: 1. In Query.cs, add statements to define a query to return all products, using paging, and note that its implementation is the same as the query for products without paging, but it is decorated with the [UsePaging] attribute, as shown in the following code: [UsePaging] public IQueryable<Product> GetProductsWithPaging(NorthwindContext db) => db.Products.Include(p => p.Category); 