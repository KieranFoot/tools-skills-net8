Chapter 15 665 Good Practice: For new projects, Blazor Web App should be your choice of project template. If you need a pure SPA project that can be hosted on Azure Static Web Apps or a CDN, then Blazor WebAssembly Standalone App will be your best choice because Blazor Web App requires a web server. For static websites, Blazor WebAssembly is still the right solution rather than the new Blazor Full Stack. Instead of multiple hosting models, Blazor Full Stack has multiple equivalent rendering modes. The Blazor Server project template that hosted and executed its code on the server-side is now replaced by the interactive server rendering mode. The Blazor WebAssembly project templates that could be hosted even on a static website and execute their code on the client-side can now be replaced by the interactive WebAssembly rendering mode. Blazor supports the latest version of all four major web browsers – Chrome, Firefox, Edge, and Safari, on mobile and desktop platforms. Blazor Hybrid supports the latest web view components on the three major platforms – Chrome on Android, Safari on iOS and macOS, and Edge WebView2 on Windows. More Information: The official Blazor documentation has a useful table to help you choose between the hosting models. You can find it at the following link: https:// learn.microsoft.com/en-us/aspnet/core/blazor/hosting-models#which-blazor- hosting-model-should-i-choose. Blazor components Blazor is all about components. A component is a part of a web app, like a button, a grid, a form for gathering input from the visitor, or even a whole page. Components can be reused and nested to build more complex components. A Blazor component usually consists of a Razor file with the file extension .razor. Like Razor views in ASP.NET Core MVC or Razor Pages, Razor files used by Blazor components easily mix HTML and C# code. As well as the HTML elements that make up the user interface parts, and the CSS used to style them, the Razor file also has a code block to implement event handling, properties, and other statements to provide the functionality of the component. For example, a Blazor component named ProgressBar.razor could implement a progress bar using Bootstrap. It might define parameters for a minimum, maximum, and the current value of the prog- ress bar, and have Boolean parameters to enable animation style and show the current value as text, as shown in the following markup: <div class="progress"> <div class="progress-bar progress-bar-striped bg-info @(IsAnimated ? " progress-bar-animated" : "")" role="progressbar" aria-label="@LabelText" style="width: @Value%" aria-valuenow="@Value" aria-valuemin="@Minimum" aria-valuemax="@ Maximum"> @(ShowValue ? Value + "%" : "") 