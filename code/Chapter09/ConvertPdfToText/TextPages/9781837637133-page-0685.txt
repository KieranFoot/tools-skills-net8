Building Web User Interfaces Using ASP.NET Core 652 3. Refresh the home page several times over several seconds and note the left-hand time is always refreshed to show the live time, and the right-hand time is cached (for 20 minutes by default), as shown in Figure 14.10: Figure 14.10: Live and cached UTC times 4. Close the browser and shut down the web server. In the Views/Home folder, in Index.cshtml, modify the <cache> element to expire after 10 5. seconds, as shown highlighted in the following markup: <cache expires-after="@TimeSpan.FromSeconds(10)"> 6. Start the Northwind.Mvc website project. 7. Refresh the home page several times over several seconds and note the left-hand time is al- ways refreshed to show the live time, and the right-hand time is cached for 10 seconds before it then refreshes. 8. Close the browser and shut down the web server. Exploring the Environment Tag Helper The Environment Tag Helper renders its content only if the current environment matches one of the values in a comma-separated list of names. This is useful if you want to render some content like instructions to a tester when hosted in a staging environment, or content like customer-specific in- formation that developers and testers do not need to see while hosted in the production environment. As well as a names attribute to set the comma-separated list of environments, you can also use include (works the same as names) and exclude (renders for all environments except the ones in the list). Letâ€™s see an example: 1. In the Views/Home folder, in Privacy.cshtml, inject the dependency service for the web host environment, as shown in the following code: @inject IWebHostEnvironment webhost 2. After the heading, add two <environment> elements, the first to show output only for devel- opers and testers, and the second to show output only for product visitors, as shown in the following markup: 