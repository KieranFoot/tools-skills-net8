Chapter 14 707 <ItemGroup> <!-- change Sqlite to SqlServer if you prefer --> <ProjectReference Include= "..\Northwind.DataContext.Sqlite\Northwind.DataContext.Sqlite.csproj" /> </ItemGroup> 2. In the Northwind.WebApi project, globally and statically import the System.Console class. Northwind.WebApi project and fix any compile errors in your code. 3. Build the Program.cs, import namespaces for working with web media formatters and the shared 4. In Packt classes, as shown in the following code: using Microsoft.AspNetCore.Mvc.Formatters; // To use IOutputFormatter. using Northwind.EntityModels; // To use AddNorthwindContext method. 5. In Program.cs, add a statement before the call to AddControllers to register the Northwind database context class (it will use either SQLite or SQL Server depending on which database provider you referenced in the project file), as shown in the following code: builder.Services.AddNorthwindContext(); 6. In the call to AddControllers, add a lambda block with statements to write the names and supported media types of the default output formatters to the console, and then add XML serializer formatters, as shown in the following code: builder.Services.AddControllers(options => { WriteLine("Default output formatters:"); foreach (IOutputFormatter formatter in options.OutputFormatters) { OutputFormatter? mediaFormatter = formatter as OutputFormatter; if (mediaFormatter is null) { WriteLine($" {formatter.GetType().Name}"); } else // OutputFormatter class has SupportedMediaTypes. { WriteLine(" {0}, Media types: {1}", arg0: mediaFormatter.GetType().Name, arg1: string.Join(", ", mediaFormatter.SupportedMediaTypes)); } } }) .AddXmlDataContractSerializerFormatters() .AddXmlSerializerFormatters(); 