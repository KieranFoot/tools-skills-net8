Packaging and Distributing .NET Types 368 From .NET Core 2.0 onward, the support for a minimum of .NET Standard 2.0 is important because it provides many of the APIs that were missing from the first version of .NET Core. The 15 years’ worth of libraries and applications that .NET Framework developers had available to them that are relevant for modern development have now been migrated to .NET, and they can run cross-platform on macOS and Linux variants, as well as on Windows. .NET Standard 2.1 added about 3,000 new APIs. Some of those APIs need runtime changes that would break backward compatibility, so .NET Framework 4.8 only implements .NET Standard 2.0; .NET Core 3.0, Xamarin, and Mono, and Unity implements .NET Standard 2.1. .NET 5 removed the need for .NET Standard because all project types can now target a single version of .NET. The same applies to .NET 6 and later. Each version from .NET 5 onward is backward compatible with previous versions. This means a class library that targets .NET 5 can be used by any .NET 5 or later projects of any type. Now that .NET versions have been released with full support for mobile and desktop apps built using .NET MAUI, the need for .NET Standard has been further reduced. Since you might still need to create class libraries for legacy .NET Framework projects or legacy Xam- arin mobile apps, there is still a need to create .NET Standard 2.0 class libraries. And currently, you must also use a .NET Standard 2.0 class library to create a source generator. To summarize the progress that .NET has made since the first version of .NET Core in 2016, I have compared the major .NET Core and modern .NET versions with the equivalent .NET Framework versions in the following list: • .NET Core 1.x: Much smaller API compared to .NET Framework 4.6.1, which was the current version in March 2016. • .NET Core 2.x: Reached API parity with .NET Framework 4.7.1 for modern APIs because they both implement .NET Standard 2.0. .NET Core 3.x: Larger API compared to .NET Framework for modern APIs because .NET Frame- • work 4.8 does not implement .NET Standard 2.1. .NET 5: Even larger API compared to .NET Framework 4.8 for modern APIs, with much-im- • proved performance. • .NET 6: Continued improvements to performance and expanded APIs with optional support for mobile apps in .NET MAUI, which was added in May 2022. .NET 7: Final unification with support for mobile apps, with .NET MAUI available as an optional • workload. This book does not cover .NET MAUI development. Packt has multiple books that specialize in .NET MAUI, and you can find them by searching their website. • .NET 8: Continues to improve the platform and should be used for all new development. You can read more details in the GitHub repository at the following link: https://github.com/ markjprice/cs12dotnet8/blob/main/docs/ch07-features.md 