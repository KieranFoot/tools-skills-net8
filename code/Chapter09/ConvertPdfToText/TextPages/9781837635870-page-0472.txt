Chapter 8 453 WriteLine("You have given me a collection that I could change!"); } } Generic collections like List<T> and Dictionary<TKey, TValue> have an AsReadOnly method to create a ReadOnlyCollection<T> that references the original collection. Although the ReadOnlyCollection<T> has to have an Add and a Remove method because it implements ICollection<T>, it throws a NotImplementedException to prevent changes. If the original collection has items added or removed, the ReadOnlyCollection<T> will see those changes. You can think of a ReadOnlyCollection<T> as a protected view of a collection. Letâ€™s see how we can make sure a collection is read-only: 1. In the WorkingWithCollections project, in Program.Helpers.cs, add a method that should only be given a read-only dictionary with string for the type of key and value, but the naughty method tries to call Add, as shown in the following code: private static void UseDictionary( IDictionary<string, string> dictionary) { WriteLine($"Count before is {dictionary.Count}."); try { WriteLine("Adding new item with GUID values."); // Add method with return type of void. dictionary.Add( key: Guid.NewGuid().ToString(), value: Guid.NewGuid().ToString()); } catch (NotSupportedException) { WriteLine("This dictionary does not support the Add method."); } WriteLine($"Count after is {dictionary.Count}."); } Note the type of parameter is IDictionary<TKey, TValue>. Using an inter- face provides more flexibility because we can pass either a Dictionary<TKey, TValue>, a ReadOnlyDictionary<TKey, TValue>, or anything else that imple- ments that interface. 