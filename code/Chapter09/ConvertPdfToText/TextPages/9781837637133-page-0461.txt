Caching, Queuing, and Resilient Background Services 428 10. Close the browser window, and at the command prompt or terminal for the Hangfire service, press Ctrl + C to cleanly shut down the server, and note the messages, as shown in the follow- ing output: info: Microsoft.Hosting.Lifetime[0] Application is shutting down... info: Hangfire.Server.BackgroundServerProcess[0] Server desktop-j1pqhr7:14120:c8ea792b caught stopping signal... info: Hangfire.Server.BackgroundServerProcess[0] Server desktop-j1pqhr7:14120:c8ea792b All dispatchers stopped info: Hangfire.Server.BackgroundServerProcess[0] Server desktop-j1pqhr7:14120:c8ea792b successfully reported itself as stopped in 2.8874 ms info: Hangfire.Server.BackgroundServerProcess[0] Server desktop-j1pqhr7:14120:c8ea792b has been stopped in total 19.6204 ms Scheduling jobs using Hangfire Next, we will allow a client to schedule a job (in this case, just writing a message to the console a specified number of seconds in the future) by POSTing to the web service: 1. In the Northwind.Background.Hangfire project, add a new class file named WriteMessageJobDetail.cs. WriteMessageJobDetail.cs, define a class to represent a scheduled job, as shown in the 2. In following code: namespace Northwind.Background.Models; public class WriteMessageJobDetail { public string? Message { get; set; } public int Seconds { get; set; } } 3. In the Northwind.Background.Hangfire project, add a new class file named Program.Methods. cs. Program.Methods.cs, extend the partial Program class with a method to write a message to 4. In the console in green color, as shown in the following code: using static System.Console; partial class Program { public static void WriteMessage(string? message) 