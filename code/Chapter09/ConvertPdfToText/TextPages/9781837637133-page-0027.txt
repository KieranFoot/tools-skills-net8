Preface xxvi What this book covers Introduction Chapter 1, Introducing Apps and Services with .NET, is about setting up your development environment and using Visual Studio 2022, Visual Studio Code, or JetBrains Rider. You will also learn about some good places to look for help, and ways to contact me (the author of this book) to get help with an issue or give me feedback to improve the book. The online-only sections review the new features added to the language and libraries in modern C# and .NET, how to benchmark the performance of your code, and how to work with types for reflection and attributes, expression trees, and dynamically generating source code during the compilation process. Data Chapter 2, Managing Relational Data Using SQL Server, is about setting up SQL Server on Windows or in the Azure cloud using SQL Database. (An online-only section shows how to set SQL Server up in a Docker container on Windows, macOS, or Linux.) You will then set up an example database for a fictional organization named Northwind. You will learn how to read and write at a low level using Microsoft.Data.SqlClient) for maximum performance, and then by using the ADO.NET libraries ( object-to-data-store mapping technology named Dapper for ease of development. Chapter 3, Building Entity Models for SQL Server Using EF Core, is about using the higher-level object-to- data-store mapping technology named Entity Framework Core (EF Core). You will create class libraries to define an EF Core model to work with the Northwind database that you created in Chapter 2. These class libraries are then used in many of the subsequent chapters. Chapter 4, Managing NoSQL Data Using Azure Cosmos DB, is about the cloud-native non-SQL data store Azure Cosmos DB. You will learn how to read and write using its native API. An online-only section also covers the more specialized graph-based Gremlin API. Libraries Chapter 5, Multitasking and Concurrency, shows how to allow multiple actions to occur at the same time to improve performance, scalability, and user productivity by using threads and tasks. Chapter 6, Implementing Popular Third-Party Libraries, discusses the types that allow your code to perform common practical tasks, like formatting text and numbers using Humanizer, manipulating images with ImageSharp, logging with Serilog, mapping objects to other objects with AutoMapper, making unit test assertions with FluentAssertions, validating data with FluentValidation, and gener- ating PDFs with QuestPDF. Chapter 7, Handling Dates, Times, and Internationalization, covers the types that allow your code to perform common tasks like handling dates and times, time zones, and globalizing and localizing data and the user interface of an app for internationalization. To supplement the built-in date and time types, we look at the benefits of using the much better Noda Time third-party library. 