Speaking C# 76 Naming things and assigning values There are naming conventions for things, and it is a good practice to follow them, as shown in Table 2.7: Naming convention Examples Used for cost, orderDetail, and Camel case Local variables, private fields. dateOfBirth Title case aka Pascal String, Int32, Cost, Types, non-private fields, and other case DateOfBirth, and Run members like methods. Table 2.7: Naming conventions and what they should be used for Some C# programmers like to prefix the names of private fields with an underscore, for example, _dateOfBirth instead of dateOfBirth. The naming of private members of all kinds is not formally defined because they will not be visible outside the class, so writing them with or without an under- score prefix are both valid. Good Practice: Following a consistent set of naming conventions will enable your code to be easily understood by other developers (and yourself in the future!). The following code block shows an example of declaring a named local variable and assigning a value to it with the = symbol. You should note that you can output the name of a variable using a keyword nameof: introduced in C# 6, // Let the heightInMetres variable become equal to the value 1.88. double heightInMetres = 1.88; Console.WriteLine($"The variable {nameof(heightInMetres)} has the value {heightInMetres}."); Warning! The message in double quotes in the preceding code wraps onto a second line because the width of a printed page is too narrow. When entering a statement like this in your code editor, type it all in a single line. In C# 12, nameof can now access instance data from a static context. You will learn the difference between instance and static data in Chapter 5, Building Your Own Types with Object-Oriented Programming. 