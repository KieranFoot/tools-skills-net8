Chapter 1 25 Warning! Make sure you have selected the Do not use top-level statements check box, so we get to see the older style of Program.cs. 5. Click Create. In the AboutMyEnvironment project, in Program.cs, note the statements to define a namespace 6. that matches the project name, an internal class named Program, and a static method named Main with a parameter named args that returns nothing (void), as shown in the following code: namespace AboutMyEnvironment { internal class Program { static void Main(string[] args) { Console.WriteLine("Hello, World!"); } } } 7. In Program.cs, in the Main method, replace the existing Console.WriteLine statement with statements to output the current directory, the version of the operating system, and the name- Program class, as shown in the following code: space of the Console.WriteLine(Environment.CurrentDirectory); Console.WriteLine(Environment.OSVersion.VersionString); Console.WriteLine("Namespace: {0}", typeof(Program).Namespace); 8. In Solution Explorer, right-click the Chapter01 solution, and then select Configure Startup Projects…. In the Solution ‘Chapter01’ Property Pages dialog box, set Startup Project to Current selection, 9. and then click OK. In Solution Explorer, click the AboutMyEnvironment project (or any file or folder within it), 10. and note that Visual Studio indicates that AboutMyEnvironment is now the startup project by making the project name bold. Good Practice: I recommend this way of setting the startup project because it then makes it very easy to switch startup projects by simply clicking a project (or any file in a project) to make it the startup project. Although you can right-click a project and set it as a startup project, if you then want to run a different project, you must manually change it again. Simply clicking anywhere in the project is easier. In most chapters, you will only need to run one project at a time. In Chapter 14, Building and Consuming Web Services, I will show you how to configure multiple startup projects. 