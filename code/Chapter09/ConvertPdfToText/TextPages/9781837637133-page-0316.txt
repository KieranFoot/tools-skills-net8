Chapter 7 283 // If they do not enter a DOB then use // sensible defaults for their culture. dobText = ci.Name switch { "en-US" or "fr-CA" => "1/27/1990", "da-DK" or "fr-FR" or "pl-PL" => "27/1/1990", "fa-IR" => "1990/1/27", _ => "1/27/1990" }; } Write("Enter your salary: "); string? salaryText = ReadLine(); if (string.IsNullOrWhiteSpace(salaryText)) { salaryText = "34500"; } DateTime dob = DateTime.Parse(dobText); int minutes = (int)DateTime.Today.Subtract(dob).TotalMinutes; decimal salary = decimal.Parse(salaryText); WriteLine($"{name} was born on a {dob:dddd}. {name} is { minutes:N0} minutes old. {name} earns {salary:C}."); When you run an application, it automatically sets its thread to use the culture of the operating system. I am running my code in London, UK, so the thread is set to English (Great Britain). The code prompts the user to enter an alternative ISO code. This allows your applications to replace the default culture at runtime. The application then uses standard format codes to output the day of the week using format code dddd, the number of minutes with thousand separators using format code N0, and the salary with the currency symbol. These adapt automatically, based on the threadâ€™s culture. 4. Run the code and enter en-US for the ISO code (or press Enter), and then enter some sample data, including a date in a format valid for US English, as shown in the following output: *** Current culture The current globalization culture is en-GB: English (United Kingdom) The current localization culture is en-GB: English (United Kingdom) Days of the week: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday 