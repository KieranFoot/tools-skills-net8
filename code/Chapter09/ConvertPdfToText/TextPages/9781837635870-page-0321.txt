Implementing Interfaces and Inheriting Classes 302 A well-known biblical phrase is Go forth and multiply, meaning to procreate. Letâ€™s write code so that the * (multiply) symbol will allow two Person objects to procreate. And we will use the + operator to marry two people. We do this by defining a static operator for the * symbol. The syntax is rather like a method, because in effect, an operator is a method, but it uses a symbol instead of a method name, which makes the syntax more concise: 1. In Person.cs, create a static operator for the + symbol, as shown in the following code: #region Operators // Define the + operator to "marry". public static bool operator +(Person p1, Person p2) { Marry(p1, p2); // Confirm they are both now married. return p1.Married && p2.Married; } #endregion The return type for an operator does not need to match the types passed as pa- rameters to the operator, but the return type cannot be void. 2. In Person.cs, create a static operator for the * symbol, as shown in the following code: // Define the * operator to "multiply". public static Person operator *(Person p1, Person p2) { // Return a reference to the baby that results from multiplying. return Procreate(p1, p2); } 