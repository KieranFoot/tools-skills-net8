Working with Data Using Entity Framework Core 560 SELECT "p"."ProductId", "p"."CategoryId", "p"."UnitPrice", "p"."Discontinued", "p"."ProductName", "p"."UnitsInStock" FROM "Products" AS "p" WHERE NOT ("p"."Discontinued") AND "p"."CategoryId" = @__p_0 Beverages has 11 products. ... Explicit loading entities using the Load method Another type of loading is explicit loading. It works in a similar way to lazy loading, with the difference being that you are in control of exactly what related data is loaded and when: 1. At the top of Program.Queries.cs, import the change tracking namespace to enable us to use the CollectionEntry class to manually load related entities, as shown in the following code: // To use CollectionEntry. using Microsoft.EntityFrameworkCore.ChangeTracking; 2. In QueryingCategories, modify the statements to disable lazy loading and then prompt the user as to whether they want to enable eager loading and explicit loading, as shown highlighted in the following code: IQueryable<Category>? categories; // = db.Categories; // .Include(c => c.Products); db.ChangeTracker.LazyLoadingEnabled = false; Write("Enable eager loading? (Y/N): "); bool eagerLoading = (ReadKey().Key == ConsoleKey.Y); bool explicitLoading = false; WriteLine(); if (eagerLoading) { categories = db.Categories?.Include(c => c.Products); } else { categories = db.Categories; Write("Enable explicit loading? (Y/N): "); explicitLoading = (ReadKey().Key == ConsoleKey.Y); WriteLine(); } 