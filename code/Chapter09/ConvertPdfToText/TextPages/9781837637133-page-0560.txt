Chapter 12 527 } } 9. Close Chrome, and shut down the web server. Implementing filtering support When we explored queries earlier in this chapter, we predefined some queries with parameters, for example, a query that returns all the products in a category by passing a categoryId parameter. However, what if you do not know ahead of time what filtering you want to perform? Letâ€™s add filtering support to our GraphQL queries: 1. In Program.cs, add a call to AddFiltering after calling AddGraphQLServer, as highlighted in the following code: builder.Services .AddGraphQLServer() .AddFiltering() .RegisterDbContext<NorthwindContext>() .AddQueryType<Query>(); 2. In Query.cs, decorate the GetProducts method with the [UseFiltering] attribute, as high- lighted in the following code: [UseFiltering] public IQueryable<Product> GetProducts(NorthwindContext db) => db.Products.Include(p => p.Category); 3. Start the Northwind.GraphQL.Service project, using the https profile without debugging. 4. In Banana Cake Pop, click the + to open a new tab. Click Scheme Definition , and note that the products query now accepts a filter input, as 5. shown in the following markup: products(where: ProductFilterInput): [Product!]! 6. Scroll down the schema definition to find ProductFilterInput, and note the filtering options include Boolean operators like and and or, as well as field filters like IntOperationFilterInput and StringOperationFilterInput, as shown in the following markup: input ProductFilterInput { and: [ProductFilterInput!] or: [ProductFilterInput!] productId: IntOperationFilterInput productName: StringOperationFilterInput supplierId: IntOperationFilterInput categoryId: IntOperationFilterInput 