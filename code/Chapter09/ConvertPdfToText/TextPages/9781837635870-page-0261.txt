Building Your Own Types with Object-Oriented Programming 242 { } } // In the file, Program.cs using France; using Texas; Paris p = new(); If we build this project, then the compiler would complain with the following error: Error CS0104: 'Paris' is an ambiguous reference between 'France.Paris' and 'Texas.Paris' We can define an alias for one of the namespaces to differentiate it, as shown in the following code: using France; // To use Paris. using Tx = Texas; // Tx becomes alias for the namespace, and it is not imported. Paris p1 = new(); // Creates an instance of France.Paris. Tx.Paris p2 = new(); // Creates an instance of Texas.Paris. Renaming a type with a using alias Another situation where you might want to use an alias is if you would like to rename a type. For ex- ample, if you use the Environment class in the System namespace a lot, you could rename it with an alias to make it shorter, as shown in the following code: using Env = System.Environment; WriteLine(Env.OSVersion); WriteLine(Env.MachineName); WriteLine(Env.CurrentDirectory); Starting with C# 12, you can alias any type. This means you can rename existing types or give a type name to unnamed types like tuples, as you will see later in this chapter. Storing data in fields In this section, we will define a selection of fields in the class to store information about a person. 