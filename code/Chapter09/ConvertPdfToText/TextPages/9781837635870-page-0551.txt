Working with Data Using Entity Framework Core 532 [Column("UnitPrice", TypeName = "money")] public decimal? Cost { get; set; } [Column("UnitsInStock")] public short? Stock { get; set; } public bool Discontinued { get; set; } // These two properties define the foreign key relationship // to the Categories table. public int CategoryId { get; set; } public virtual Category Category { get; set; } = null!; } Note the following: • The Product class will be used to represent a row in the Products table, which has ten columns. You do not need to include all columns from a table as properties of a class. We will only • map six properties: ProductId, ProductName, UnitPrice, UnitsInStock, Discontinued, and CategoryId. • Columns that are not mapped to properties cannot be read or set using the class in- stances. If you use the class to create a new object, then the new row in the table will NULL or some other default value for the unmapped column values in that row. have You must make sure that those missing columns are optional or have default values set by the database or an exception will be thrown at runtime. In this scenario, the rows already have data values and I have decided that I do not need to read those values in this application. Cost, and • We can rename a column by defining a property with a different name, like then decorating the property with the [Column] attribute and specifying its column UnitPrice. name, like The final property, CategoryId, is associated with a Category property that will be • used to map each product to its parent category. The two properties that relate the two entities, Category.Products and Product.Category, are both marked as virtual. This allows EF Core to inherit and override the properties to provide extra fea- tures, such as lazy loading. Adding tables to the Northwind database context class Inside your DbContext-derived class, you must define at least one property of the DbSet<T> type. These properties represent the tables. To tell EF Core what columns each table has, the DbSet<T> properties use generics to specify a class that represents a row in the table. That entity model class has properties that represent its columns. 