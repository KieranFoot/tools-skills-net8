Chapter 8 439 ImmutableArray, System Designed for scenarios where the contents of the ImmutableDictionary, .Collections original collection will never change, although they ImmutableList, .Immutable can create modified collections as a new instance. ImmutableQueue Table 8.8: Common .NET collection types Common features of all collections All collections implement the ICollection interface; this means that they must have a Count property to tell you how many objects are in them, and three other members, as shown in the following code: namespace System.Collections; public interface ICollection : IEnumerable { int Count { get; } bool IsSynchronized { get; } object SyncRoot { get; } void CopyTo(Array array, int index); } For example, if we had a collection named passengers, we could do this: int howMany = passengers.Count; As you have probably surmised, CopyTo copies the collection to an array. IsSynchronized and SyncRoot are used in multithreading scenarios, so I do not cover them in this book. All collections implement the IEnumerable interface, which means that they can be iterated using the foreach statement. They must have a GetEnumerator method that returns an object that implements IEnumerator; this means that the returned object must have MoveNext and Reset methods for nav- Current property containing the current item in the collection, igating through the collection and a as shown in the following code: namespace System.Collections; public interface IEnumerable { IEnumerator GetEnumerator(); } public interface IEnumerator { object Current { get; } 