Building Websites Using ASP.NET Core Razor Pages 656 • Project file and folder: Northwind.Web. PracticalApps. • Solution file and folder: For Visual Studio 2022, leave all other options as their defaults, for example, Framework: • .NET 8.0 (Long Term Support), Configure for HTTPS: selected, Enable Docker: cleared, and Do not use top-level statements: cleared. For Visual Studio Code and the dotnet new web command, the defaults are the options • we want. In future projects, if you want to change from top-level statements to the old Program class style, then specify the switch --use-program-main. Summaries of Visual Studio 2022 and dotnet new options when creating new proj- ects can be found in the GitHub repository at the following link: https://github. com/markjprice/cs12dotnet8/blob/main/docs/ch01-project-options.md. 2. Build the Northwind.Web project. In Northwind.Web.csproj, note the project is like a class library except that the SDK is 3. Microsoft.NET.Sdk.Web, as shown highlighted in the following markup: <Project Sdk="Microsoft.NET.Sdk.Web"> <PropertyGroup> <TargetFramework>net8.0</TargetFramework> <Nullable>enable</Nullable> <ImplicitUsings>enable</ImplicitUsings> </PropertyGroup> </Project> 4. Add an element to import the System.Console class globally and statically. If you are using Visual Studio 2022, in Solution Explorer, toggle Show All Files. If you are 5. using JetBrains Rider, then mouse cursor over the Solution pane, then click the “eyeball” icon. Expand the obj folder, expand the Debug folder, expand the net8.0 folder, select the Northwind. 6. Web.GlobalUsings.g.cs file, and note how the implicitly imported namespaces include all the ones for a console app or class library, as well as some ASP.NET Core ones, such as Microsoft. , as shown in the following code: AspNetCore.Builder // <autogenerated /> global using global::Microsoft.AspNetCore.Builder; global using global::Microsoft.AspNetCore.Hosting; global using global::Microsoft.AspNetCore.Http; global using global::Microsoft.AspNetCore.Routing; global using global::Microsoft.Extensions.Configuration; global using global::Microsoft.Extensions.DependencyInjection; 