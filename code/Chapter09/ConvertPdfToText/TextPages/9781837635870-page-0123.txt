Speaking C# 104 Passing arguments to a console app When you run a console app, you often want to change its behavior by passing arguments. For exam- ple, with the dotnet command-line tool, you can pass the name of a new project template, as shown in the following commands: dotnet new console dotnet new mvc You might have been wondering how to get any arguments that might be passed to a console app. In every version of .NET prior to version 6, the console app project template made it obvious, as shown in the following code: using System; namespace Arguments { class Program { static void Main(string[] args) { Console.WriteLine("Hello World!"); } } } The string[] args arguments are declared and passed in the Main method of the Program class. Theyâ€™re an array used to pass arguments into a console app. But in top-level programs, as used by the console app project template in .NET 6 and later, the Program class and its Main method are hidden, along with the declaration of the args array. The trick is that you must know it still exists. Command-line arguments are separated by spaces. Other characters like hyphens and colons are treated as part of an argument value. To include spaces in an argument value, enclose the argument value in single or double quotes. Imagine that we want to be able to enter the names of some colors for the foreground and background and the dimensions of the terminal window at the command line. We would be able to read the colors and numbers by reading them from the args array, which is always passed into the Main method, aka the entry point of a console app: 1. Use your preferred code editor to add a new Console App / console project named Arguments to the Chapter02 solution. Open Arguments.csproj, and after the <PropertyGroup> section, add a new <ItemGroup> 2. section to statically import System.Console for all C# files using the implicit usings .NET SDK feature, as shown in the following markup: 