Building Web Components Using Blazor 674 7. In the Northwind.Blazor project, in the Components folder, open App.razor, as shown in the following markup: <!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8" /> <meta name="viewport" content="width=device-width, initial-scale=1.0" /> <base href="/" /> <link rel="stylesheet" href="bootstrap/bootstrap.min.css" /> <link rel="stylesheet" href="app.css" /> <link rel="stylesheet" href="Northwind.Blazor.styles.css" /> <link rel="icon" type="image/png" href="favicon.png" /> <HeadOutlet /> </head> <body> <Routes /> <script src="_framework/blazor.web.js"></script> </body> </html> Note the following: • A <HeadOutlet /> Blazor component to inject additional content into the <head> section. This is one of the built-in components available in all Blazor projects. <Routes /> Blazor component to define the custom routes in this project. This com- • A ponent can be completely customized by the developer because it is part of the current project, in a file named Routes.razor. blazor.web.js that manages communication back to the server for • A script block for Blazor’s dynamic features, like downloading WebAssembly components in the back- ground and later switching from server-side to client-side component execution. 8. In the Components folder, in Routes.razor, note that a <Router> enables routing for all Blazor components found in the current assembly, and that if a matching route is found, then RouteView is executed, which sets the default layout for the component to MainLayout and passes any route data parameters to the component. For that component, the first <h1> element in it will get the focus, as shown in the following code: <Router AppAssembly="@typeof(Program).Assembly"> <Found Context="routeData"> 