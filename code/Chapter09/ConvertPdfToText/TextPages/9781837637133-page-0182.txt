Chapter 4 149 WriteLine(" IndexingPolicy.IncludedPaths: {0}", arg0: string.Join(",", properties.IndexingPolicy .IncludedPaths.Select(path => path.Path))); WriteLine($" IndexingPolicy: {properties.IndexingPolicy}"); } } catch (HttpRequestException ex) { WriteLine($"Error: {ex.Message}"); WriteLine("Hint: If you are using the Azure Cosmos Emulator then please make sure that it is running."); } catch (Exception ex) { WriteLine("Error: {0} says {1}", arg0: ex.GetType(), arg1: ex.Message); } } } Note the following in the preceding code: • When using the emulator, the endpointUri and primaryKey are the same for everyone. • The constructor for a CosmosClient requires the endpointUri and primaryKey. Never store your primary key in your source code and then check it in to a public Git repository! You should get it from an environment variable or other secure place like Azure Key Vault. • When creating a database, you must specify a name and throughput in RUs per second. • When creating a container, you must specify a name and partition key path, and you can optionally set an indexing policy and override the throughput, which defaults to the database throughput. • The response to a request to create an Azure Cosmos DB resource includes an HTTP status code like 200 OK if the resource already exists, or 201 Created if the resource did not exist but has now been successfully creat- ed. The response also includes information about the resource like its Id. 7. In Program.cs, delete the existing statements and then add a statement to call the method to create Azure Cosmos resources, as shown in the following code: await CreateCosmosResources(); 