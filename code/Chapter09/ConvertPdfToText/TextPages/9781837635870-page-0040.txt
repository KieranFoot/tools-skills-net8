Chapter 1 21 6. In the Solution Explorer toolbar, toggle on the Show All Files button, , and note that the compiler-generated bin and obj folders are visible, as shown in Figure 1.7: Figure 1.7: Showing the compiler-generated folders and files Understanding the compiler-generated folders and files Two compiler-generated folders were created, named obj and bin, as described in the following list: • The obj folder contains one compiled object file for each source code file. These objects haven’t been linked together into a final executable yet. bin folder contains the binary executable for the application or class library. We will look • The at this in more detail in Chapter 7, Packaging and Distributing .NET Types. You do not need to look inside these folders or understand their files yet (but feel free to browse around if you are curious). Just be aware that the compiler needs to create temporary folders and files to do its work. You could delete these folders and their files, and they will be automatically recreated the next time you “build” or run the project. Developers often delete these temporary folders and files to “clean” a project. Vi- sual Studio even has a command on the Build menu named Clean Solution that deletes some of these temporary files for you. The equivalent command with Visual Studio Code is dotnet clean. Understanding top-level programs If you have seen older .NET projects before, then you might have expected more code, even just to output a simple message. This project has minimal statements because some of the required code is written for you by the compiler when you target .NET 6 or later. If you had created the project with .NET SDK 5 or earlier, or if you had selected the check box labeled Do not use top-level statements, then the Program.cs file would have more statements, as shown in the following code: using System; namespace HelloCS { 