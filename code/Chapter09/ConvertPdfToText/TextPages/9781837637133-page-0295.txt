Handling Dates, Times, and Internationalization 262 2. Add statements to show the current culture that is used to display date and time values, and then parse the United Statesâ€™ Independence Day and display it in various ways, as shown in the following code: SectionTitle("Globalization with dates and times"); // Same as Thread.CurrentThread.CurrentCulture. WriteLine($"Current culture: {CultureInfo.CurrentCulture.Name}"); string textDate = "4 July 2024"; DateTime independenceDay = DateTime.Parse(textDate); WriteLine($"Text: {textDate}, DateTime: {independenceDay:d MMMM}"); textDate = "7/4/2024"; independenceDay = DateTime.Parse(textDate); WriteLine($"Text: {textDate}, DateTime: {independenceDay:d MMMM}"); // Explicitly override the current culture by setting a provider. independenceDay = DateTime.Parse(textDate, provider: CultureInfo.GetCultureInfo("en-US")); WriteLine($"Text: {textDate}, DateTime: {independenceDay:d MMMM}"); Good Practice: Although you can create a CultureInfo instance using its con- structor, unless you need to make changes to it, you should get a read-only shared instance by calling the GetCultureInfo method. 3. At the top of Program.cs, set the culture to British English, as shown in the following code: ConfigureConsole("en-GB"); 4. Run the code, and note the results, as shown in the following output: *** Globalization with dates and times Current culture is: en-GB Text: 4 July 2024, DateTime: 4 July Text: 7/4/2024, DateTime: 7 April Text: 7/4/2024, DateTime: 4 July 