Building Entity Models for SQL Server Using EF Core 122 MaterializationInterceptionData materializationData, object entity) { if (entity is IHasLastRefreshed entityWithLastRefreshed) { entityWithLastRefreshed.LastRefreshed = DateTimeOffset.UtcNow; } return entity; } } 4. In the Northwind.Common.DataContext.SqlServer project, in NorthwindContext.cs, delete OnConfiguring method. the existing In the Northwind.Common.DataContext.SqlServer project, add a new file named 5. NorthwindContextPartial.cs, then declare and register the interceptor in the OnConfiguring method, as shown in the following code: using Microsoft.Data.SqlClient; // SqlConnectionStringBuilder using Microsoft.EntityFrameworkCore; // DbContext namespace Northwind.EntityModels; public partial class NorthwindContext : DbContext { private static readonly SetLastRefreshedInterceptor setLastRefreshedInterceptor = new(); protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) { if (!optionsBuilder.IsConfigured) { SqlConnectionStringBuilder builder = new(); builder.DataSource = "."; builder.InitialCatalog = "Northwind"; builder.TrustServerCertificate = true; builder.MultipleActiveResultSets = true; // Because we want to fail fast. Default is 15 seconds. builder.ConnectTimeout = 3; 