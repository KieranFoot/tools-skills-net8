Building Websites Using ASP.NET Core Razor Pages 658 "applicationUrl": "https://localhost:7155;http://localhost:5122", "environmentVariables": { "ASPNETCORE_ENVIRONMENT": "Development" } }, "IIS Express": { "commandName": "IISExpress", "launchBrowser": true, "environmentVariables": { "ASPNETCORE_ENVIRONMENT": "Development" } } } } The launchSettings.json file is only for use during development. It has no effect on the build process. It is not deployed with the compiled website project, so it has no effect on the production runtime. It is only processed by code editors like Visual Studio 2022 and JetBrains Rider to set up environment variables and define URLs for the web server to listen on when the project is started by a code editor. 9. For the https profile, for its applicationUrl, change the assigned port numbers for http to 5130 and https to 5131, and swap the order so http is first in the list so it will be used by default, as shown highlighted in the following markup: "applicationUrl": "http://localhost:5130;https://localhost:5131", The http and https launch profiles have a commandName of Project, meaning they use the web server configured in the project to host the website, which is Kestrel by default. There is also a profile and settings for IIS, which is a Windows-only web server. In this book, we will only use Kestrel as the web server since it is cross-platform. To declutter your launchSettings.json file, you could even delete the iisSettings and IIS Express sections. 10. In Program.cs, note the following: • An ASP.NET Core project is like a top-level console app, with a hidden <Main>$ method as its entry point that has an argument passed using the name args. It calls WebApplication.CreateBuilder, which creates a host for the website using • defaults for a web host that is then built. GET requests with plain text: Hello World!. • The website will respond to all HTTP Run method is a blocking call, so the hidden <Main>$ method does not • The call to the return until the web server stops running. 