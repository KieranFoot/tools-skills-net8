Chapter 5 253 3. Run the PeopleApp project and view the result, as shown in the following output: Bob Smith was born on Earth. Good Practice: Use read-only fields over constant fields for two important reasons: the value can be calculated or loaded at runtime and can be expressed using any executable statement. So, a read-only field can be set using a constructor or a field assignment. Every reference to the read-only field is a live reference, so any future changes will be correctly reflected by the calling code. You can also declare static readonly fields whose values will be shared across all instances of the type. Requiring fields to be set during instantiation C# 11 introduced the required modifier. If you use it on a field or property, the compiler will ensure that you set the field or property to a value when you instantiate it. It requires targeting .NET 7 or later, so we need to create a new class library first: 1. In the Chapter05 solution, add a new class library project named PacktLibraryModern that targets .NET 8. (The oldest supported version for the required modifier is .NET 7.) PacktLibraryModern project, rename Class1.cs to Book.cs. 2. In the required, as shown 3. Modify the code file contents to give the class four fields, with two set as in the following code: namespace Packt.Shared; public class Book { // Needs .NET 7 or later as well as C# 11 or later. public required string? Isbn; public required string? Title; // Works with any version of .NET. public string? Author; public int PageCount; } Note that all three string properties are nullable. Setting a property or field to be required does not mean that it cannot be null. It just means that it must be explicitly set to null. 