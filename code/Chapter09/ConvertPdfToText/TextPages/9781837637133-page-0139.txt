Building Entity Models for SQL Server Using EF Core 106 To use either of the other two mapping strategies, call the appropriate method, as shown in the fol- lowing code: modelBuilder.Entity<Person>().UseTptMappingStrategy(); modelBuilder.Entity<Person>().UseTpcMappingStrategy(); Next, you can optionally specify the table name to use for each entity class, as shown in the following code: modelBuilder.Entity<Student>().ToTable("Students"); modelBuilder.Entity<Employee>().ToTable("Employees"); The TPC strategy should have a shared sequence, so we should configure that too, as shown in the following code: modelBuilder.HasSequence<int>("PersonIds"); modelBuilder.Entity<Person>().UseTpcMappingStrategy() .Property(e => e.Id).HasDefaultValueSql("NEXT VALUE FOR [PersonIds]"); Example of hierarchy mapping strategies Now let’s see this in action using a new database and project named HierarchyMapping: 1. Use your preferred code editor to add a console app project, as defined in the following list: • Project template: Console App / console. Chapter03. • Solution file and folder: Northwind.Console.HierarchyMapping. • Project file and folder: • Do not use top-level statements: Cleared. • Enable native AOT publish: Cleared. Northwind.Console.HierarchyMapping. 2. Configure the startup project to run In the Northwind.Console.HierarchyMapping project, add package references to the EF Core 3. data provider for SQL Server, and globally and statically import the System.Console class, as shown in the following markup: <ItemGroup> <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.0" /> <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="8.0.0" /> </ItemGroup> 