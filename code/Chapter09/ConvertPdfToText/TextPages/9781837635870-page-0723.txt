Building and Consuming Web Services 704 • The [ApiController] attribute was introduced with ASP.NET Core 2.1 and it enables REST-specific behavior for controllers, like automatic HTTP 400 responses for invalid models, as you will see later in this chapter. [HttpGet] attribute registers the Get method in the Controller class to respond • The to HTTP GET requests, and its implementation uses the shared Random object to return an array of WeatherForecast objects with random temperatures and summaries like Bracing or Balmy for the next five days of weather. 7. In WeatherForecastController.cs, add a second Get method that allows the call to specify how many days ahead the forecast should be by implementing the following: • Add a comment above the original method to show the action method and URL path that it responds to. days. • Add a new method with an integer parameter named Get method implementation code statements into the new • Cut and paste the original Get method. We are cutting because we need to move the statements from the original method to the new method. Modify the new method to create an IEnumerable of integers up to the number of days • requested. Get method to call the new Get method and pass the value 5. • Modify the original Modify the registered name of the original Get method to GetWeatherForecastFiveDays. • Your modifications and additions should be as shown highlighted in the following code: // GET /weatherforecast [HttpGet(Name = "GetWeatherForecastFiveDays")] public IEnumerable<WeatherForecast> Get() { return Get(days: 5); // Five-day forecast. } // GET /weatherforecast/7 [HttpGet(template: "{days:int}", Name = "GetWeatherForecast")] public IEnumerable<WeatherForecast> Get(int days) { return Enumerable.Range(1, days).Select(index => new WeatherForecast { 