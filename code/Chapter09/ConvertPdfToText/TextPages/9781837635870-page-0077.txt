Speaking C# 58 In February 2025, Microsoft is likely to release the first preview of .NET 10, and, in November 2025, it will likely release .NET 10 for general availability in production. You will be able to install its SDK from the following link and explore C# 14 in the same way as described above for C# 13 with .NET 9: https://dotnet.microsoft.com/en-us/download/dotnet/10.0 Again, the preceding link is for future use! It will give a 404 Missing resource error until February 2025, so do not bother using it until then. Warning! Some C# language features depend on changes in the underlying .NET libraries. Even if you use the latest SDK with the latest compiler, you might not be able to use all the new language features while targeting an older version of .NET. For example, C# 11 introduced the required keyword, but it cannot be used in a project that targets .NET 6 because that language feature requires new attributes that are only available in .NET 7. Luckily, the compiler will warn you if you try to use a C# feature that is not supported. Just be prepared for that eventuality. Showing the compiler version We will start by writing code that shows the compiler version: 1. If you’ve completed Chapter 1, Hello, C#! Welcome, .NET!, then you will already have a cs12dotnet8 folder. If not, then you’ll need to create it. 2. Use your preferred code editor to create a new project, as defined in the following list: console • Project template: Console App [C#] / • Project file and folder: Vocabulary • Solution file and folder: Chapter02 • Do not use top-level statements: Cleared • Enable native AOT publish: Cleared Good Practice: If you have forgotten how, or did not complete the previous chapter, then step-by-step instructions for creating a solution with multiple projects are given in Chapter 1, Hello, C#! Welcome, .NET!. Vocabulary project, in Program.cs, after the comment, add a statement to show the C# 3. In the version as an error, as shown in the following code: #error version 4. Run the console app: • If you are using Visual Studio 2022, then navigate to Debug | Start Without Debugging. When prompted to continue and run the last successful build, click No. 