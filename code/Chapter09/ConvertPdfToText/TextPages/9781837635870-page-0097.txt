Speaking C# 78 Outputting emojis To output emojis at a command prompt on Windows, you must use Windows Terminal because Com- mand Prompt does not support emojis, and set the output encoding of the console to use UTF-8, as shown in the following code: Console.OutputEncoding = System.Text.Encoding.UTF8; string grinningEmoji = char.ConvertFromUtf32(0x1F600); Console.WriteLine(grinningEmoji); Verbatim strings When storing text in a string variable, you can include escape sequences, which represent special characters like tabs and new lines using a backslash, as shown in the following code: string fullNameWithTabSeparator = "Bob\tSmith"; But what if you are storing the path to a file on Windows, and one of the folder names starts with a T, as shown in the following code? string filePath = "C:\televisions\sony\bravia.txt"; The compiler will convert the \t into a tab character and you will get errors! You must prefix it with the @ symbol to use a verbatim literal string, as shown in the following code: string filePath = @"C:\televisions\sony\bravia.txt"; Raw string literals Introduced in C# 11, raw string literals are convenient for entering any arbitrary text without need- ing to escape the contents. They make it easy to define literals containing other languages like XML, HTML, or JSON. Raw string literals start and end with three or more double-quote characters, as shown in the follow- ing code: string xml = """ <person age="50"> <first_name>Mark</first_name> </person> """; Why three or more double-quote characters? This is for scenarios where the content itself needs to have three double-quote characters; you can then use four double-quote characters to indicate the beginning and end of the content. Where the content needs to have four double-quote characters, you can then use five double-quote characters to indicate the beginning and end of the content. And so on. 