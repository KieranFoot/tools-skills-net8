Handling Dates, Times, and Internationalization 300 DateTimeZone class Represents a time zone. It is easy to convert from the .NET TimeZoneInfo using BclDateTimeZone. Use DateTimeZoneProviders.Tzdb to get a time zone, based on the standard names listed at the following link: https:// en.wikipedia.org/wiki/List_of_tz_database_time_zones ZonedDateTime struct A date/time value in a particular calendaring system and in a specific time zone, so it does represent a fixed point on the global timeline. Offset struct Represents an offset. It is positive if the local time is ahead of UTC, and negative if the local time is behind UTC. OffsetDateTime struct You might know the offset from UTC, but that does not always cleanly map to a single time zone. This type should be used in this scenario instead of ZonedDateTime. Duration struct A fixed number of nanoseconds. Has properties to convert to common time units like Days, Hours, Minutes, and Seconds, rounded down or up to zero because they return an int, and non-rounded properties like TotalDays, TotalMinutes, and so on, because they return a double. Used for calculations on Instant and ZonedDateTime values. Use this instead of the .NET TimeSpan type. Period class A variable duration because the “two months” represented by January and February 2024 are different lengths to the “two months” of June and July 2024, or even the “two months” represented by January and February in a non-leap year (2024 is a leap year, so February 2024 has 29 days). Table 7.6: Common Noda Time types Good Practice: Use Instant to record the point in time when something happened. It is good for timestamps. It can then be represented to the user in their local time zone. Com- mon types used to record a user-entered date/time value are the following: ZonedDateTime, OffsetDateTime, LocalDateTime, LocalDate, and LocalTime. Converting between Noda Time date/time types To summarize common ways to convert between Noda Time types, review the following non-exhaus- tive diagram: 