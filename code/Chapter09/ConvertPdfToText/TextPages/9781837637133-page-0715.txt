Building Web Components Using Blazor 682 8. In Program.cs, at the end of the statement that maps Razor components, add a call to a method to add interactive server render mode, as shown highlighted in the following code: app.MapRazorComponents<App>() .AddInteractiveServerRenderMode(); 9. In the Components folder, in Counter.razor, at the top of the file, add a directive to set render mode to interactive server, as shown in the following markup: @rendermode InteractiveServer 10. Start the Northwind.Blazor project, using its https profile without debugging. In Developer Tools, click the Console tab, and note the blazor.web.js files establishes a 11. WebSocket connection, as shown in the following output: [2023-10-20T11:25:52.498Z] Information: Normalizing '_blazor' to 'https://localhost:5151/_blazor'. [2023-10-20T11:25:52.675Z] Information: WebSocket connected to wss:// localhost:5151/_blazor?id=j6Fc0Mbay_jWkZTWfIqs_w. 12. In Developer Tools, click the Network tab, click WS to filter by WebSockets, and refresh the home page. On the home page, click the Increment button, note the counter increments, note the _ 13. blazor?id=... request, select the request for _blazor?id=..., and click the Initiator tab, and note that the initiator was the blazor.web.js file that is added to all pages by the App.razor file, as shown in Figure 15.2: Figure 15.2: Blazor.web.js requests to SignalR on the server to update the DOM for live interactivity 14. Close the browser and shut down the web server. 