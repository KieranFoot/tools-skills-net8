Multitasking and Concurrency 178 Starting tasks We will look at three ways to start the methods using Task instances. There are links in the GitHub repository to articles that discuss the pros and cons. Each has a slightly different syntax, but they all define a Task and start it: 1. In Program.cs, comment out the previous statements that call methods A to C, and then add statements to create and start three tasks, one for each method, as shown highlighted in the following code: Stopwatch timer = Stopwatch.StartNew(); /* SectionTitle("Running methods synchronously on one thread."); MethodA(); MethodB(); MethodC(); */ SectionTitle("Running methods asynchronously on multiple threads."); Task taskA = new(MethodA); taskA.Start(); Task taskB = Task.Factory.StartNew(MethodB); Task taskC = Task.Run(MethodC); WriteLine($"{timer.ElapsedMilliseconds:#,##0}ms elapsed."); Instead of commenting out the previous statements, you could let them run, but then make sure to call the timer.Restart() method after outputting a new sec- tion title to reset the timings for each section. 2. Run the code, view the result, and note that the elapsed milliseconds appear almost immediately. This is because each of the three methods is now being executed by three new background worker threads allocated from the thread pool (TP), as shown in the following output: *** Running methods asynchronously on multiple threads. Starting Method A... Thread Id: 4, Priority: Normal, Background: True, Name: .NET TP Worker Starting Method C... Thread Id: 7, Priority: Normal, Background: True, Name: .NET TP Worker Starting Method B... Thread Id: 6, Priority: Normal, Background: True, Name: .NET TP Worker 6ms elapsed. 