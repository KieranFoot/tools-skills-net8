Chapter 14 733 Letâ€™s see HTTP logging in action: 1. In appsettings.Development.json, add an entry to set the HTTP logging middleware to Information level, as shown highlighted in the following code: { "Logging": { "LogLevel": { "Default": "Information", "Microsoft.AspNetCore": "Warning", "Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware": "Information" } } } Although the Default log level might be set to Information, more specific con- figurations take priority. For example, any logging systems in the Microsoft. AspNetCore namespace will use the Warning level. By making the change we did, any logging systems in the Microsoft.AspNetCore. HttpLogging. HttpLoggingMiddleware namespace will now use Information. 2. In Program.cs, import the namespace for working with HTTP logging, as shown in the fol- lowing code: using Microsoft.AspNetCore.HttpLogging; // To use HttpLoggingFields. 3. In the services configuration section, after the call to WebApplication.CreateBuilder, add a statement to configure HTTP logging, as shown in the following code: builder.Services.AddHttpLogging(options => { options.LoggingFields = HttpLoggingFields.All; options.RequestBodyLogLimit = 4096; // Default is 32k. options.ResponseBodyLogLimit = 4096; // Default is 32k. }); 4. In the HTTP pipeline configuration section, after the call to builder.Build, add a statement to add HTTP logging before the call to use routing, as shown in the following code: app.UseHttpLogging(); 5. Start the Northwind.WebApi web service using the https launch profile. https://localhost:5151/api/customers. 6. Start Chrome and navigate to 