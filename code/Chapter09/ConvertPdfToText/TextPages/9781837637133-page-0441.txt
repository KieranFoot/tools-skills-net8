Caching, Queuing, and Resilient Background Services 408 // The queue can be shared with multiple consumers. // The queue will not be deleted when the last message is consumer. channel.QueueDeclare(queue: queueNameAndRoutingKey, durable: false, exclusive: false, autoDelete: false, arguments: null); byte[] body = JsonSerializer.SerializeToUtf8Bytes(model.Message); // The exchange is empty because we are using the default exchange. channel.BasicPublish(exchange: string.Empty, routingKey: queueNameAndRoutingKey, basicProperties: null, body: body); model.Info = "Message sent to queue successfully."; return View(model); } 16. In Views\Home, add a new empty Razor View named SendMessage.cshtml. 17. Define a web page with a form to send a message, as shown in the following markup: @model HomeSendMessageViewModel @{ ViewData["Title"] = "Send a Message"; } <div class="text-center"> <h1 class="display-4">@ViewData["Title"]</h1> @if (Model is not null) { if (Model.Error is not null) { <div class="alert alert-danger"> <h2>Error</h2> <p>@Model.Error</p> </div> } if (Model.Info is not null) { <div class="alert alert-info"> <h2>Information</h2> <p>@Model.Info</p> 