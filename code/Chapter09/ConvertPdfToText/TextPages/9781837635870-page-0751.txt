Building and Consuming Web Services 732 You added the code to implement this in the section titled Specifying problem de- tails, where you checked for an id of bad and then returned a bad request with problem details. 13. Use the GET methods to confirm that the new customer has been deleted from the database (there were originally only two customers in Denmark). I will leave testing updates to an existing customer by using PUT to the reader. 14. Close Chrome and shut down the web server. Enabling HTTP logging HTTP logging is an optional middleware component that is useful when testing a web service. It logs information about HTTP requests and HTTP responses including the following: • Information about the HTTP request • Headers • Body • Information about the HTTP response This is valuable in web services for auditing and debugging scenarios but beware because it can neg- atively impact performance. You might also log Personally Identifiable Information (PII), which can cause compliance issues in some jurisdictions. Log levels can be set to the following: Error: Only Error level logs. • Warning: Error and Warning level logs. • Information: Error, Warning, and Information level logs. • Verbose: All level logs. • Log levels can be set for the namespace in which the functionality is defined. Nested namespaces allow us to control which functionality has logging enabled: • Microsoft: Include all log types in the Microsoft namespace. Microsoft.AspNetCore: Include all log types in the Microsoft.AspNetCore namespace. • Microsoft.AspNetCore.HttpLogging: Include all log types in the Microsoft.AspNetCore. • HttpLogging namespace. 