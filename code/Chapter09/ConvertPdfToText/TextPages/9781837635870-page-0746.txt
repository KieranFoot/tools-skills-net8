Chapter 14 727 For example, if you have set an environment variable to store a secret value like a password to connect to a SQL Server database that must be kept out of any files committed to a GitHub repository, you can use the following command: {{$processEnv MY_SQL_PWD}} More Information: You can learn more about using environment variables with REST Client at the following link: https://marketplace.visualstudio.com/ items?itemName=humao.rest-client#environments. You can learn more about us- ing environment variables and Secret Manager with HTTP Editor at the following link: https://devblogs.microsoft.com/visualstudio/safely-use-secrets-in-http- requests-in-visual-studio-2022/. Now that we’ve seen a quick and easy way to test our service, which also happens to be a great way to learn HTTP, what about external developers? We want it to be as easy as possible for them to learn about and then call our service. For that purpose, we will use Swagger. Understanding Swagger The most important part of Swagger is the OpenAPI Specification, which defines a REST-style contract for your API, detailing all its resources and operations in a human- and machine-readable format for easy development, discovery, and integration. Developers can use the OpenAPI Specification for a Web API to automatically generate strongly typed client-side code in their preferred language or library. For us, another useful feature is Swagger UI, because it automatically generates documentation for your API with built-in visual testing capabilities. Let’s review how Swagger is enabled for our web service using the Swashbuckle package: 1. If the web service is running, shut down the web server. Northwind.WebApi.csproj, note the package reference for Swashbuckle.AspNetCore that 2. In was added by the project template, as shown in the following markup: <PackageReference Include="Swashbuckle.AspNetCore" Version="6.4.0" /> 3. In Program.cs, import Swashbuckle’s SwaggerUI namespace, as shown in the following code: using Swashbuckle.AspNetCore.SwaggerUI; // To use SubmitMethod. 4. In Program.cs, in the section for adding services to the container, note the services registered by the project template to use Swagger and the endpoints API explorer, as shown in the fol- lowing code: // Learn more about configuring Swagger/OpenAPI at https://aka.ms/ aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen(); 