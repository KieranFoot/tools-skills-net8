Building Efficient Microservices Using gRPC 578 Project file item configuration Before we continue, let’s quickly review common project file item configuration syntax. Item configuration generated by Visual Studio 2022 commonly uses attributes for the item properties, as shown in the following markup: <Protobuf Include="Protos\greet.proto" GrpcServices="Client" /> Properties not explicitly set will have their default values. Item configuration generated by other tools like JetBrains Rider commonly uses child elements for the item properties, as shown in the following markup: <Protobuf> <Include>Protos\greet.proto</Include> <GrpcServices>Client</> <Access>Public</Access> <ProtoCompile>True</ProtoCompile> <CompileOutputs>True</CompileOutputs> <OutputDir>obj\Debug\net8.0\</OutputDir> <Generator>MSBuild:Compile</Generator> <Protobuf> They both usually achieve the same ends. The first is more concise and recommended for use. Building a Hello World gRPC client We will add an ASP.NET Core MVC website project and then add the gRPC client packages to enable it to call the gRPC service: 1. Use your preferred code editor to add a new project, as defined in the following list: • Project template: ASP.NET Core Web App (Model-View-Controller) / mvc • Solution file and folder: Chapter13 • Project file and folder: Northwind.Grpc.Client.Mvc • Authentication type: None. • Configure for HTTPS: Selected. • Enable Docker: Cleared. • Do not use top-level statements: Cleared. Northwind.Grpc.Client.Mvc project, treat warnings as errors, add package references 2. In the for Microsoft’s gRPC client factory and tools, and Google’s .NET library for Protocol Buffers, as shown in the following markup: <ItemGroup> <PackageReference Include="Google.Protobuf" Version="3.24.4" /> <PackageReference Include="Grpc.Net.ClientFactory" Version="2.57.0" /> 