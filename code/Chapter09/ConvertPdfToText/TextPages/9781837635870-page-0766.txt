Chapter 15 747 • A .NET MAUI Blazor App, aka Blazor Hybrid, project renders its web UI to a web view control using a local interop channel and is hosted in a .NET MAUI app. It is conceptually like an Electron app. Unification of Blazor hosting models in .NET 8 With .NET 8, the Blazor team has created a unified hosting model where each individual component can be set to execute using a different rendering model: • Server-Side Rendering (SSR): Executes code on the server side like Razor Pages and MVC do. The complete response is then sent to the browser for display to the visitor and there is no further interaction between the server and client until the browser makes a new HTTP request. • Streaming rendering: Executes code on the server side. HTML markup can be returned and displayed in the browser, and while the connection is still open, any asynchronous operations can continue to execute. When all asynchronous operations are complete, the final markup is sent by the server to update the contents of the page. This improves the experience for the visitor because they see some content like a “Loading…” message while waiting for the rest. Interactive server rendering: Executes code on the server side during live interactions, which • means the code has full and easy access to server-side resources like databases. This can sim- plify implementing functionality. Interactive requests are made using SignalR, which is more efficient than a full request. A permanent connection is needed between the browser and server, which limits scalability. A good choice for intranet websites where there are a limited number of clients and high bandwidth networking. • Interactive WebAssembly rendering: Executes code on the client side, which means the code only has access to resources within the browser. This can complicate the implementation because a callback to the server must be made whenever new data is required. A good choice for public websites where there are potentially a large number of clients and low bandwidth connections for some of them. • Interactive automatic rendering: Starts by rendering on the server for faster initial display, downloads WebAssembly components in the background, and then switches to WebAssembly for subsequent interactivity. This unified model means that, with careful planning, a developer can write Blazor components once and then choose to run them on the web server side, or the web client side, or dynamically switch. This gives the best of all worlds. In .NET 8, any Blazor WebAssembly components must still be defined in a separate project. This might change in .NET 9 or later. Understanding Blazor components It is important to understand that Blazor is used to create user interface components. Components define how to render the user interface and react to user events, and can be composed and nested, and compiled into a Razor class library for packaging and distribution. 