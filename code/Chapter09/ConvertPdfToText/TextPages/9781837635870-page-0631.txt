Querying and Manipulating Data Using LINQ 612 Instead of using the CategoryId values as the key to the lookup, we could use the category names from the related categories table. Letâ€™s do this in a code example: 1. In Program.Functions.cs, add a method to join products to category names, and then con- vert them into a lookup, enumerate through the whole lookup, using an IGrouping<string, to represent each row in the lookup dictionary, and then look up an individual col- Product> lection of products for a specific category, as shown in the following code: private static void ProductsLookup() { SectionTitle("Products lookup"); using NorthwindDb db = new(); // Join all products to their category to return 77 matches. var productQuery = db.Categories.Join( inner: db.Products, outerKeySelector: category => category.CategoryId, innerKeySelector: product => product.CategoryId, resultSelector: (c, p) => new { c.CategoryName, Product = p }); ILookup<string, Product> productLookup = productQuery.ToLookup( keySelector: cp => cp.CategoryName, elementSelector: cp => cp.Product); foreach (IGrouping<string, Product> group in productLookup) { // Key is Beverages, Condiments, and so on. WriteLine($"{group.Key} has {group.Count()} products."); foreach (Product product in group) { WriteLine($" {product.ProductName}"); } } // We can look up the products by a category name. Write("Enter a category name: "); string categoryName = ReadLine()!; WriteLine(); WriteLine($"Products in {categoryName}:"); 