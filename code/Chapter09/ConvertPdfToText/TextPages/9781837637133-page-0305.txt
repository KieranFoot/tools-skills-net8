Handling Dates, Times, and Internationalization 272 // 2023-11-04 09:30:00 UTC which is a Saturday. Mock.Get(timeProvider).Setup(s => s.GetUtcNow()).Returns( new DateTimeOffset(year: 2023, month: 11, day: 4, hour: 9, minute: 30, second: 0, offset: TimeSpan.Zero)); DiscountService service = new(timeProvider); 7. Run the unit tests, and note that they both succeed. Working with time zones In the code example about the .NET release party, using a TimeOnly was not actually a good idea because the TimeOnly value did not include information about the time zone. It is only useful if you are in the correct time zone. TimeOnly is, therefore, a poor choice for an event. For events, we need to understand and handle time zones. Understanding DateTime and TimeZoneInfo The DateTime class has many useful members related to time zones, as shown in Table 7.4: Member Description Now property A DateTime value that represents the current date and time in the local time zone. UtcNow property A DateTime value that represents the current date and time in the UTC time zone. Kind property A DateTimeKind value that indicates whether the DateTime value is Unspecified, Utc, or Local. IsDaylightSavingTime A bool that indicates if the DateTime value is during DST. method ToLocalTime method Converts a UTC DateTime value to the equivalent local time. ToUniversalTime method Converts a local DateTime value to the equivalent UTC time. Table 7.4: DateTime members related to time zones The TimeZoneInfo class has many useful members, as shown in Table 7.5: Member Description Id property A string that uniquely identifies the time zone. Local property A TimeZoneInfo value that represents the current local time zone. Varies depending on where the code executes. Utc property A TimeZoneInfo value that represents the UTC time zone. StandardName property A string for the name of the time zone when Daylight Saving is not active. 