Chapter 6 353 2. Your coding tool displays a red squiggle and a compile error, as shown in Figure 6.5: Figure 6.5: A missing explicit cast compile error 3. Change the statement to prefix the assigned variable name with a cast to the Employee type, as shown highlighted in the following code: Employee explicitAlice = (Employee)aliceInPerson; Avoiding casting exceptions The compiler is now happy; however, because aliceInPerson might be a different derived type, like Student instead of Employee, we need to be careful. In a real application with more complex code, the current value of this variable could have been set to a Student instance, and then this statement would throw an InvalidCastException error at runtime. Using is to check a type We can handle this by writing a try statement, but there is a better way. We can check the type of an is keyword: object using the 1. Wrap the explicit cast statement in an if statement, as highlighted in the following code: if (aliceInPerson is Employee) { WriteLine($"{nameof(aliceInPerson)} is an Employee."); Employee explicitAlice = (Employee)aliceInPerson; // Safely do something with explicitAlice. } 2. Run the PeopleApp project and view the result, as shown in the following output: aliceInPerson is an Employee. 