Handling Dates, Times, and Internationalization 264 In the US in springtime, the clocks “spring” forward one hour at 2 AM. In the fall, they “fall” back one hour at 2 AM. Wikipedia explains this at the following link: https://en.wikipedia.org/wiki/ Daylight_saving_time_in_the_United_States In the UK in springtime, the clocks spring forward one hour at 1 AM. In the autumn, they fall back one hour at 2 AM. The UK government explains this at the following link: https://www.gov.uk/when- do-the-clocks-change Imagine that you need to set an alarm to wake you up at 1:30 AM to catch a flight from Heathrow airport in the UK. Your flight happens to depart on the day that DST takes effect. In the UK spring, the clocks are at 12:59 AM, and then the next minute they spring forward to 2:00AM. 1:30 AM never happens, your alarm does not go off, and you miss your flight! 1:30 AM is an invalid time in .NET, and if you try to store that value in a variable, it will throw an exception. In the UK autumn, the clocks are at 1:59, and then the next minute, they fall back to 1:00 and repeat that hour. In this case, 1:30 AM happens twice. Localizing the DayOfWeek enum DayOfWeek is an enum, so it cannot be localized as you might expect or hope. Its string values are hardcoded in English, as shown in the following code: namespace System { public enum DayOfWeek { Sunday = 0, Monday = 1, Tuesday = 2, Wednesday = 3, Thursday = 4, Friday = 5, Saturday = 6 } } There are two solutions to this problem. First, you could apply the dddd date format code to a whole date value. For example, WriteLine($"The day of the week is {DateTime.Now:dddd}."); Second, you can use a helper method of the DateTimeFormatInfo class to convert a DayOfWeek value into a localized string for output as text. 