Building Web User Interfaces Using ASP.NET Core 634 • Editor and EditorFor: Use this to generate HTML markup for the expression relative to the cur- rent model using an editor template. There are built-in editor templates for .NET types that use <label> and <input> elements, and custom templates can be created in the EditorTemplates folder. The folder name is case-sensitive on case-sensitive filesystems. EditorForModel: Use this to generate HTML markup for an entire model instead of a single • expression. Encode: Use this to safely encode an object or string into HTML. For example, the string value • "<script>" would be encoded as "&lt;script&gt;". This is not normally necessary since the @ symbol encodes string values by default. Razor Raw: Use this to render a string value without encoding as HTML. • PartialAsync and RenderPartialAsync: Use these to generate HTML markup for a partial • view. You can optionally pass a model and view data. Defining a strongly-typed Razor view To improve the IntelliSense when writing a view, you can define what type the view can expect us- @model directive at the top. Let’s modify the home page to display a table of orders from the ing an Northwind database: 1. In the Controllers folder, in HomeController.cs, import the namespace for the Northwind entity models and EF Core features, as shown in the following code: using Northwind.EntityModels; // To use Northwind entity models. using Microsoft.EntityFrameworkCore; // To use Include method. 2. In the controller class, define a field to store the Northwind data context and set it in the con- structor, as shown highlighted in the following code: private readonly NorthwindContext _db; public HomeController(ILogger<HomeController> logger , NorthwindContext db) { _logger = logger; _db = db; } 3. In the Index action method, add statements to create a view model containing all the orders and their related order details, as shown highlighted in the following code: public IActionResult Index() { IEnumerable<Order> model = _db.Orders .Include(order => order.Customer) .Include(order => order.OrderDetails) 