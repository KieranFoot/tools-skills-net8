Building Your Own Types with Object-Oriented Programming 280 Pattern-matching flight passengers In this example, we will define some classes that represent various types of passengers on a flight, and then we will use a switch expression with pattern matching to determine the cost of their flight: 1. In the PacktLibraryNetStandard2 project/folder, add a new file named FlightPatterns.cs. If you use Visual Studio 2022, in FlightPatterns.cs, delete the existing statements, including 2. the class named FlightPatterns, because we will define multiple classes, and none match the name of the code file. FlightPatterns.cs, add statements to define three types of passenger with different prop- 3. In erties, as shown in the following code: // All the classes in this file will be defined in the following namespace. namespace Packt.Shared; public class Passenger { public string? Name { get; set; } } public class BusinessClassPassenger : Passenger { public override string ToString() { return $"Business Class: {Name}"; } } public class FirstClassPassenger : Passenger { public int AirMiles { get; set; } public override string ToString() { return $"First Class with {AirMiles:N0} air miles: {Name}"; } } public class CoachClassPassenger : Passenger { public double CarryOnKG { get; set; } 