Chapter 16 733 7. In the Resources folder, in the Styles folder, add a new .NET MAUI Resource Dictionary (XAML) project item named SystemModeTheme.xaml. ResourceDictionary element to define styles to use with light 8. Add markup inside the existing and dark mode depending on how the operating system has had its option set, as shown in the following markup: <?xml version="1.0" encoding="utf-8" ?> <ResourceDictionary xmlns="http://schemas.microsoft.com/dotnet/2021/maui" xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml" x:Class="Northwind.Maui.Client.Resources.Styles.SystemModeTheme"> <Style TargetType="Shell"> <Setter Property="FlyoutBackgroundColor" Value="{AppThemeBinding Light={StaticResource LightNavigationBarColor}, Dark={StaticResource DarkNavigationBarColor}}" /> </Style> <Style TargetType="ContentPage"> <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource LightPageBackgroundColor}, Dark={StaticResource DarkPageBackgroundColor}}" /> </Style> <Style TargetType="Button"> <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource LightPrimaryColor}, Dark={StaticResource DarkPrimaryColor}}" /> <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource LightSecondaryColor}, Dark={StaticResource DarkSecondaryColor}}" /> <Setter Property="HeightRequest" Value="45" /> <Setter Property="WidthRequest" Value="190" /> <Setter Property="CornerRadius" Value="18" /> </Style> </ResourceDictionary> Note the use of the AppThemeBinding extension to dynamically bind to two pre-de- fined special filters, Light and Dark. These are bound to system modes. 