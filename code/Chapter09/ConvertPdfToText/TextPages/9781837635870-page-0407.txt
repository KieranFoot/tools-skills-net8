Packaging and Distributing .NET Types 388 If you copy any of those publish folders to the appropriate operating system, the console app will run; this is because it is a self-contained deployable .NET application. For example, here it is on macOS with Intel: I can run everywhere! OS Version is Unix 13.5.2 I am macOS. Press any key to stop me. This example used a console app, but you could just as easily create an ASP.NET Core website or web service, or a Windows Forms or WPF app. Of course, you can only deploy Windows desktop apps to Windows computers, not Linux or macOS. Publishing a single-file app If you can assume that .NET is already installed on the computer on which you want to run your app, then you can use the extra flags when you publish your app for release to say that it does not need to be self-contained and that you want to publish it as a single file (if possible), as shown in the following command (which must be entered on a single line): dotnet publish -r win10-x64 -c Release --no-self-contained /p:PublishSingleFile=true This will generate two files: DotNetEverywhere.exe and DotNetEverywhere.pdb. The .exe file is the .pdb file is a program debug database file that stores debugging information. executable. The If you prefer the .pdb file to be embedded in the .exe file, for example, to ensure it is deployed with <DebugType> element to the <PropertyGroup> element in your .csproj file its assembly, then add a and set it to embedded, as shown highlighted in the following markup: <PropertyGroup> <OutputType>Exe</OutputType> <TargetFramework>net8.0</TargetFramework> <Nullable>enable</Nullable> <ImplicitUsings>enable</ImplicitUsings> <RuntimeIdentifiers> win10-x64;osx-x64;osx.11.0-arm64;linux-x64;linux-arm64 </RuntimeIdentifiers> <DebugType>embedded</DebugType> </PropertyGroup> 