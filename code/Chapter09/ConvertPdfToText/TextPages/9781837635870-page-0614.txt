Chapter 11 595 { new ArgumentException(), new SystemException(), new IndexOutOfRangeException(), new InvalidOperationException(), new NullReferenceException(), new InvalidCastException(), new OverflowException(), new DivideByZeroException(), new ApplicationException() }; IEnumerable<ArithmeticException> arithmeticExceptionsQuery = exceptions.OfType<ArithmeticException>(); foreach (ArithmeticException exception in arithmeticExceptionsQuery) { WriteLine(exception); } } 2. In Program.cs, comment out the call to FilteringUsingWhere, and then add a call to the FilteringByType method, as shown in the following code: // FilteringUsingWhere(names); FilteringByType(); 3. Run the code and note that the results only include exceptions of the ArithmeticException type, or the ArithmeticException-derived types, as shown in the following output: System.OverflowException: Arithmetic operation resulted in an overflow. System.DivideByZeroException: Attempted to divide by zero. Working with sets and bags Sets are one of the most fundamental concepts in mathematics. A set is a collection of one or more unique objects. A multiset, aka a bag, is a collection of one or more objects that can have duplicates. You might remember being taught about Venn diagrams in school. Common set operations include the intersect or union between sets. Letâ€™s write some code that will define three arrays of string values for cohorts of apprentices and then perform some common set and multiset operations on them: 1. In Program.Functions.cs, add a method that outputs any sequence of string variables as a comma-separated single string to the console output, along with an optional description, as shown in the following code: static void Output(IEnumerable<string> cohort, string description = "") { if (!string.IsNullOrEmpty(description)) 