Writing, Debugging, and Testing Functions 196 To improve the experience, we can change a setting to use the integrated terminal instead. First, letâ€™s modify the code to require interaction with the user: 1. At the top of Program.cs, add statements to prompt the user to enter a number and parse that as a double into the variable a, as shown highlighted in the following code: Write("Enter a number: "); string number = ReadLine()!; double a = double.Parse(number); 2. Set a breakpoint on line 1 that writes the prompt, Enter a number. 3. At the top of the RUN AND DEBUG window, click the Run and Debug button, and then select the Debugging project. Enter a number prompt is not written to either TERMINAL or DEBUG CONSOLE 4. Note that the and neither window is waiting for the user to enter a number and press Enter. 5. Stop debugging. 6. At the top of the RUN AND DEBUG window, click the create a launch.json file link, and then, when prompted for the debugger, select C#, as shown in Figure 4.9: Figure 4.9: Selecting a debugger for the launch.json file 7. In the launch.json file editor, click the Add Configuration... button, and then select .NET: Launch .NET Core Console App, as shown in Figure 4.10: Figure 4.10: Adding a launch configuration for a .NET Console App 