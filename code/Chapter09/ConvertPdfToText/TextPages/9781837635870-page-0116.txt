Chapter 2 97 "{0} {1} lived in {2} and worked in the {3} team at {4}.", "Roger", "Cevung", "Stockholm", "Education", "Optimizely"); Good Practice: Once you become more comfortable with formatting strings, you should stop naming the parameters, for example, stop using format:, arg0:, and arg1:. The preceding code uses a non-canonical style to show where the 0 and 1 came from while you are learning. JetBrains Rider and its warnings about boxing If you use JetBrains Rider and you have installed the Unity Support plugin, then it will complain a lot about boxing. A common scenario when boxing happens is when value types like int and DateTime are passed as positional arguments to string formats. This is a problem for Unity projects because they use a different memory garbage collector to the normal .NET runtime. For non-Unity projects, like all the projects in this book, you can ignore these boxing warnings because they are not relevant. https://docs.unity3d.com/ You can read more about this Unity-specific issue at the following link: . Manual/performance-garbage-collection-best-practices.html#boxing Formatting using interpolated strings C# 6 and later have a handy feature named interpolated strings. A string prefixed with $ can use curly braces around the name of a variable or expression to output the current value of that variable string, as the following shows: or expression at that position in the 1. Enter a statement at the bottom of the Program.cs file, as shown in the following code: // The following statement must be all on one line when using C# 10 // or earlier. If using C# 11 or later, we can include a line break // in the middle of an expression but not in the string text. Console.WriteLine($"{numberOfApples} apples cost {pricePerApple * numberOfApples:C}"); 2. Run the code and view the result, as shown in the following partial output: 12 apples cost £4.20 For short, formatted string values, an interpolated string can be easier for people to read. But for code examples in a book, where statements need to wrap over multiple lines, this can be tricky. For many of the code examples in this book, I will use numbered positional arguments. Another reason to avoid interpolated strings is that they can’t be read from resource files to be localized. The next code example is not meant to be entered in your project. 