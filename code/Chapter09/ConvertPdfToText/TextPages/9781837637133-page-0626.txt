Chapter 13 593 5. In Program.cs, we could alter a statement to use the slim builder for the web application, as shown in the following code: // Use the slim builder to reduce the size of the application // when using the publish AOT project option. // var builder = WebApplication.CreateSlimBuilder(args); The CreateSlimBuilder method does not include support for HTTPS or HTTP/3, although you can add those back in yourself if you need them. If we switch to the slim builder, then we must also switch from using HTTPS to HTTP to communicate with the gRPC service. In this task, we will continue to use the “full fat” builder so we can continue to use HTTPS. 6. In the Northwind.Grpc.Service project file, add an element to emit compiler-generated files, as shown highlighted in the following markup: <PropertyGroup> <TargetFramework>net8.0</TargetFramework> ... <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles> </PropertyGroup> 7. Build the Northwind.Grpc.Service project. 8. If you are using Visual Studio 2022, toggle Show All Files in Solution Explorer. If you are using JetBrains Rider, hover over and then click the eyeball icon. Expand the obj\Debug\net8.0\generated folder, and then note the folders and files that have 9. been created by the source generators for AOT and JSON serialization, as shown in Figure 13.6: Figure 13.6: Folders and files created by source generators in an AOT gRPC project 10. At the command prompt or terminal, publish the gRPC service using native AOT, as shown in the following command: dotnet publish 