Building and Consuming Web Services 742 6. List four ways that you can test a web service. HttpClient in a using statement to dispose of it when 7. Why should you not wrap your use of you are finished even though it implements the IDisposable interface, and what should you use instead? 8. What are the benefits of HTTP/2 and HTTP/3 compared to HTTP/1.1? 9. How can you enable clients to detect if your web service is healthy with ASP.NET Core 2.2 and later? 10. What benefits does endpoint routing provide? Exercise 14.2 – Practice creating and deleting customers with HttpClient Extend the Northwind.Mvc website project to have pages where a visitor can fill in a form to create a new customer, or search for a customer and then delete them. The MVC controller should make calls to the Northwind web service to create and delete customers. Exercise 14.3 – Implementing advanced features for web services If you would like to learn about web service health checks, OpenAPI analyzers, adding security HTTP HttpClient, then you can read the optional online-only headers, and enabling HTTP/3 support for section at the following link: https://github.com/markjprice/cs12dotnet8/blob/main/docs/ch14-advanced.md Exercise 14.4 – Building web services using Minimal APIs If you would like to learn how to build web services using Minimal APIs, then you can read the optional online-only section at the following link: https://github.com/markjprice/cs12dotnet8/blob/main/docs/ch14-minimal-apis.md Exercise 14.5 – Explore topics Use the links in the following GitHub repository to learn more details about the topics covered in this chapter: https://github.com/markjprice/cs12dotnet8/blob/main/docs/book-links.md#chapter-14--- building-and-consuming-web-services Summary In this chapter, you learned: • How to build an ASP.NET Core Web API service that can be called by any app on any platform that can make an HTTP request and process an HTTP response. • How to test and document web service APIs with Swagger. 