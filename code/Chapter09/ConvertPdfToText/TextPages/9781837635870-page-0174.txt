Chapter 3 155 3. Run the code and view the result, as shown in the following output: I have 27 friends to invite to my party. My birthday is 6/4/1980 12:00:00 AM. My birthday is Wednesday, June 4, 1980. By default, a date and time value outputs with the short date and time format. You can use format codes such as D to output only the date part using the long date format. Good Practice: Use the standard date and time format specifiers, as shown at the fol- lowing link: https://learn.microsoft.com/en-us/dotnet/standard/base-types/ standard-date-and-time-format-strings#table-of-format-specifiers. Avoiding Parse exceptions by using the TryParse method One problem with the Parse method is that it gives errors if the string cannot be converted: 1. Type a statement to attempt to parse a string containing letters into an integer variable, as shown in the following code: int count = int.Parse("abc"); 2. Run the code and view the result, as shown in the following output: Unhandled Exception: System.FormatException: Input string was not in a correct format. As well as the preceding exception message, you will see a stack trace. I have not included stack traces in this book because they take up too much space. To avoid errors, you can use the TryParse method instead. TryParse attempts to convert the input string and returns true if it can convert it and false if it cannot. Exceptions are a relatively expensive operation so they should be avoided when you can. The out keyword is required to allow the TryParse method to set the count variable when the con- version works. Letâ€™s see TryParse in action: 1. Replace the int count declaration with statements to use the TryParse method and ask the user to input a count for a number of eggs, as shown in the following code: Write("How many eggs are there? "); string? input = ReadLine(); if (int.TryParse(input, out int count)) { 