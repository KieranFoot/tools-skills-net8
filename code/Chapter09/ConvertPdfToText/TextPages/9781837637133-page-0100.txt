Chapter 2 67 { if (int.TryParse(statistics[key]?.ToString(), out int value)) { WriteLineInColor($"{key}: {value:N0}", ConsoleColor.Cyan); } } } } 3. In Program.cs, after writing the SQL Server version to the console, add a statement to enable statistics for the connection, as shown highlighted in the following code: WriteLine($"SQL Server version: {connection.ServerVersion}"); connection.StatisticsEnabled = true; 4. In Program.cs, before closing the connection, add a statement to output statistics for the connection, as shown highlighted in the following code: OutputStatistics(connection); connection.Close(); 5. Run the console app and note the statistics, as shown in the following partial output: BytesReceived: 3,888 BytesSent: 336 SelectRows: 77 ExecutionTime: 25 Working with ADO.NET asynchronously You can improve the responsiveness of data access code by making it asynchronous. You will see more details of how asynchronous operations work in Chapter 5, Multitasking and Concurrency. For now, just enter the code as instructed. Letâ€™s see how to change the statements to work asynchronously: 1. In Program.cs, change the statement to open the connection to make it asynchronous, as shown highlighted in the following code: await connection.OpenAsync(); 2. In Program.cs, change the statement to execute the command to make it asynchronous, as shown highlighted in the following code: SqlDataReader r = await cmd.ExecuteReaderAsync(); 