Chapter 8 447 IsProperSubsetOf, A subset is a set whose items are all in the other set. A proper subset is IsProperSupersetOf, a set whose items are all in the other set but there is at least one item IsSubsetOf, IsSupersetOf in the other set that is not in the set. A superset is a set that contains all the items in the other set. A proper superset is a set that contains all the items in the other set and at least one more not in the other set. Overlaps The set and the other set share at least one common item. SetEquals The set and the other set contain exactly the same items. SymmetricExceptWith Removes the items not in the set passed as the parameter from the set and adds any that are missing. UnionWith Adds any items in the set passed as the parameter to the set that are not already in the set. Table 8.12: Set methods Letâ€™s explore example code for sets: 1. In Program.cs, add some statements to add items to a set, as shown in the following code: HashSet<string> names = new(); foreach (string name in new[] { "Adam", "Barry", "Charlie", "Barry" }) { bool added = names.Add(name); WriteLine($"{name} was added: {added}."); } WriteLine($"names set: {string.Join(',', names)}."); 2. Run the code and view the result, as shown in the following output: Adam was added: True. Barry was added: True. Charlie was added: True. Barry was added: False. names set: Adam,Barry,Charlie. You will see more set operations in Chapter 11, Querying and Manipulating Data Using LINQ. Stacks are a good choice when you want to implement last-in, first-out (LIFO) behavior. With a stack, you can only directly access or remove the one item at the top of the stack, although you can enu- merate to read through the whole stack of items. You cannot, for example, directly access the second item in a stack. 