Chapter 5 277 if (!Enum.IsDefined(typeof(WondersOfTheAncientWorld), value)) { throw new ArgumentException( $"{value} is not a member of the WondersOfTheAncientWorld enum.", paramName: nameof(FavoriteAncientWonder)); } _favoriteAncientWonder = value; } } We could simplify the validation by only checking if the value is defined in the original enum because IsDefined returns false for multiple values and undefined values. However, I want to show a different exception for multiple values, so I will use the fact that multiple values formatted as a string would include a comma in the list of names. This also means we must check for multiple values before we check if the value is defined. A comma-separated list is how multiple enum values are represented as a string, but you cannot use commas to set multiple enum values. You should use | (the bitwise OR). 3. In Program.cs, in the Storing a value using an enum type region, set Bob’s favorite wonder to more than one enum value, as shown in the following code: bob.FavoriteAncientWonder = WondersOfTheAncientWorld.StatueOfZeusAtOlympia | WondersOfTheAncientWorld.GreatPyramidOfGiza; 4. Run the PeopleApp project and note the exception, as shown in the following output: Unhandled exception. System.ArgumentException: Favorite ancient wonder can only have a single enum value. (Parameter 'FavoriteAncientWonder') at Packt.Shared.Person.set_ FavoriteAncientWonder(WondersOfTheAncientWorld value) in C:\cs12dotnet8\ Chapter05\PacktLibraryNetStandard2\PersonAutoGen.cs:line 67 at Program.<Main>$(String[] args) in C:\cs12dotnet8\Chapter05\ PeopleApp\Program.cs:line 57 5. In Program.cs, set Bob’s favorite wonder to an invalid enum value like 128, as shown in the following code: bob.FavoriteAncientWonder = (WondersOfTheAncientWorld)128; 