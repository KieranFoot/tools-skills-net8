Chapter 9 379 3. In ProductsController.cs, import the namespace to work with the in-memory cache, as shown in the following code: using Microsoft.Extensions.Caching.Memory; // To use IMemoryCache. 4. In ProductsController.cs, declare some fields to store the in-memory cache and a key for the out-of-stock products, as shown in the following code: private readonly IMemoryCache _memoryCache; private const string OutOfStockProductsKey = "OOSP"; public ProductsController(ILogger<ProductsController> logger, NorthwindContext context, IMemoryCache memoryCache) { _logger = logger; _db = context; _memoryCache = memoryCache; } 5. In ProductsController.cs, in the GetOutOfStockProducts action method, add statements to try to get the cached out-of-stock products, and if they are not cached, get them from the database and set them in the cache, using a sliding expiration of five seconds, as highlighted in the following code: // GET: api/products/outofstock [HttpGet] [Route("outofstock")] [Produces(typeof(Product[]))] public IEnumerable<Product> GetOutOfStockProducts() { // Try to get the cached value. if (!_memoryCache.TryGetValue(OutOfStockProductsKey, out Product[]? cachedValue)) { // If the cached value is not found, get the value from the database. cachedValue = _db.Products .Where(p => p.UnitsInStock == 0 && !p.Discontinued) .ToArray(); MemoryCacheEntryOptions cacheEntryOptions = new() { SlidingExpiration = TimeSpan.FromSeconds(5), Size = cachedValue?.Length 