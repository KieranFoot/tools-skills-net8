Chapter 1 11 Broadcast real-time SignalR has great support for broadcasting real-time communication to communication many clients. Polyglot environment gRPC tooling supports all popular development languages, making gRPC a good choice for multi-language and platform environments. Network-bandwidth- gRPC messages are serialized with Protobuf, a lightweight message constrained environment format. A gRPC message is always smaller than an equivalent JSON message. Serverless nanoservice Azure Functions do not need to be hosted 24/7 so they are a good choice for nanoservices that usually do not need to be running constantly. Amazon Web Services (AWS) Lambdas are an alternative. Table 1.3: Service scenarios and the recommended implementation technology Building Windows-only apps Technologies for building Windows-only apps, primarily for desktop, include: • Windows Forms, 2002 • Windows Presentation Foundation (WPF), 2006 • Windows Store, 2012 • Universal Windows Platform (UWP), 2015 • Windows App SDK (formerly WinUI 3 and Project Reunion), 2021 Understanding legacy Windows application platforms With the Microsoft Windows 1.0 release in 1985, the only way to create Windows applications was to use the C language and call functions in three core DLLs named KERNEL, USER, and GDI. Once Windows became 32-bit with Windows 95, the DLLs were suffixed with 32 and became known as Win32 API. In 1991, Microsoft introduced Visual Basic, which provided developers with a visual, drag-and-drop- from-a-toolbox-of-controls way to build the user interface for Windows applications. It was immensely popular, and the Visual Basic runtime is still distributed as part of Windows 11 today. With the first version of C# and .NET Framework released in 2002, Microsoft provided technology for building Windows desktop applications named Windows Forms. The equivalent at the time for web development was named Web Forms, hence the complementary names. The code could be written in either Visual Basic or C# languages. Windows Forms had a similar drag-and-drop visual designer, although it generated C# or Visual Basic code to define the user interface, which can be difficult for humans to understand and edit directly. In 2006, Microsoft released a more powerful technology for building Windows desktop applications, named Windows Presentation Foundation (WPF), as a key component of .NET Framework 3.0 along- side WCF and Windows Workflow (WF). Although a WPF app can be created by writing only C# statements, it can also use eXtensible Applica- tion Markup Language (XAML) to specify its user interface, which is easy for both humans and code to understand. Visual Studio 2022 is partially built with WPF. 