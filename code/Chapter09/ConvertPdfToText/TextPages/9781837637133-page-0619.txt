Building Efficient Microservices Using gRPC 586 { return new ShipperReply { ShipperId = shipper.ShipperId, CompanyName = shipper.CompanyName, Phone = shipper.Phone }; } } The .proto file generates classes that represent the messages sent to and from a gRPC service. We therefore cannot use the entity classes defined for the EF Core model. We need a helper method like ToShipperReply that can map an instance of an entity class to an instance of the .proto-generated classes like ShipperReply. This could be a good use for AutoMapper, although in this case, the mapping is simple enough to hand-code. 7. In Program.cs, import the namespace for the Northwind database context, as shown in the following code: using Northwind.EntityModels; // To use AddNorthwindContext method. 8. In the section that configures services, add a call to register the Northwind database context, as shown in the following code: builder.Services.AddNorthwindContext(); 9. In the section that configures the HTTP pipeline, after the call to register GreeterService, add a statement to register ShipperService, as shown in the following code: app.MapGrpcService<ShipperService>(); Implementing the gRPC client Now we can add client capabilities to the Northwind MVC website: 1. Copy the shipper.proto file from the Protos folder in the Northwind.Grpc.Service project to the Protos folder in the Northwind.Grpc.Client.Mvc project. In the Northwind.Grpc.Client.Mvc project, in shipper.proto, modify the namespace to 2. match the namespace for the current project so that the automatically generated classes will be in the same namespace, as shown highlighted in the following code: option csharp_namespace = "Northwind.Grpc.Client.Mvc"; 