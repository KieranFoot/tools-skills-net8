Managing NoSQL Data Using Azure Cosmos DB 152 • Headers: A dictionary of HTTP response headers. Diagnostics: Useful information for diagnostics. • ActivityId: A GUID value that is useful for tracking this activity through multi-tiered services. • Let’s copy all the products from the Northwind database in SQL Server to Cosmos. Since the entity classes in the EF Core for SQL Server class libraries are designed for the normalized data structure in the Northwind SQL database, we will create new classes to represent items in Cos- mos that have embedded related data. They will use JSON casing conventions since they represent JSON documents: 1. In the Northwind.CosmosDb.SqlApi project, add a new folder named Models. Models folder, add a class file named CategoryCosmos.cs. 2. In the CategoryCosmos class, as shown in the following code: 3. Modify its content to define a namespace Northwind.CosmosDb.Items; public class CategoryCosmos { public int categoryId { get; set; } public string categoryName { get; set; } = null!; public string? description { get; set; } } We must deliberately not follow usual .NET casing conventions because we can- not dynamically manipulate the serialization and the resulting JSON must use camel case. 4. In the Models folder, add a class file named SupplierCosmos.cs, and modify its content to define a SupplierCosmos class, as shown in the following code: namespace Northwind.CosmosDb.Items; public class SupplierCosmos { public int supplierId { get; set; } public string companyName { get; set; } = null!; public string? contactName { get; set; } public string? contactTitle { get; set; } public string? address { get; set; } public string? city { get; set; } public string? region { get; set; } public string? postalCode { get; set; } public string? country { get; set; } 