Chapter 11 611 Aniseed Syrup Chef Anton's Cajun Seasoning ... Grouping for lookups Instead of writing a LINQ query expression to join and group and running it once, you might want to use a LINQ extension method to create and then store a reusable in-memory collection that has entities that have been grouped. We have a table named Products in the Northwind database that includes a column for the category that they reside in, as shown in Table 11.3: ProductName CategoryID Chai 1 Chang 1 Aniseed Syrup 2 Chef Anton’s Cajun Seasoning 2 Chef Anton’s Gumbo Mix 2 ... ... Table 11.3: Simplified Products table You might want to create a data structure in memory that can group the Product entities by their category, and then provide a quick way to look up all the products in a specific category. You can create this using the ToLookup LINQ method, as shown in the following code: ILookup<int, Product>? productsByCategoryId = db.Products.ToLookup(keySelector: category => category.CategoryId); When you call the ToLookup method, you must specify a key selector to choose what value you want to group by. This value can then later be used to look up the group and its items. The ToLookup method creates a dictionary-like data structure of key-value pairs in memory that has unique category IDs for the key and a collection of Product objects for the value, as shown in Table 11.4: Key Value (each one is a collection of Product objects) 1 [Chai] [Chang] and so on. 2 [Aniseed Syrup] [Chef Anton’s Cajun Seasoning] [Chef Anton’s Gumbo Mix] and so on. ... ... Table 11.4: Simplified product lookup Note the product names in square brackets, such as [Chai], represent an entire Product object. 