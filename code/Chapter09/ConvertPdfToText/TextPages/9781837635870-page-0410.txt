Chapter 7 391 4. Build any project or the whole solution. Chapter07 folder, note there is now an artifacts folder that contains subfolders for 5. In the any recently built projects. Directory. 6. Optionally, but recommended, is to delete this file or rename it to something like so that it does not affect the rest of this chapter. Build.props.disabled Warning! If you leave this build configuration enabled, then remember that your build artifacts are now created in this new folder structure. Native ahead-of-time compilation Native AOT produces assemblies that are: • Self-contained, meaning they can run on systems that do not have the .NET runtime installed. Ahead-of-time (AOT) compiled to native code, meaning a faster startup time and a potentially • smaller memory footprint. Native AOT compiles IL code to native code at the time of publishing, rather than at runtime using the Just In Time (JIT) compiler. But native AOT assemblies must target a specific runtime environment like Windows x64 or Linux Arm. Since native AOT happens at publish time, you should remember that while you are debugging and working live on a project in your code editor, it is still using the runtime JIT compiler, not native AOT, even if you have AOT enabled in the project! However, some features that are incompatible with native AOT will be disabled or throw exceptions, and a source analyzer is enabled to show warnings about potential code incompatibilities. Limitations of native AOT Native AOT has limitations, some of which are shown in the following list: • No dynamic loading of assemblies. System.Reflection.Emit. • No runtime code generation, for example, using • It requires trimming, which has its own limitations, as we covered in the previous section. They must be self-contained, so they must embed any libraries they call, which increases • their size. Although your own assemblies might not use the features listed above, major parts of .NET itself do. For example, ASP.NET Core MVC (including Web API services that use controllers) and EF Core do runtime code generation to implement their functionality. The .NET teams are hard at work making as much of .NET compatible with native AOT as possible, as soon as possible. But .NET 8 only includes basic support for ASP.NET Core if you use Minimal APIs, and no support for EF Core. 