Building and Consuming Web Services 710 6. In CustomerRepository.cs, define a class that will implement the interface and uses the sin- gleton in-memory cache with a 30-minute sliding expiration for its cache entries (its methods will be implemented over the next few steps), as shown in the following code: using Microsoft.EntityFrameworkCore.ChangeTracking; // To use EntityEntry<T>. using Northwind.EntityModels; // To use Customer. using Microsoft.Extensions.Caching.Memory; // To use IMemoryCache. using Microsoft.EntityFrameworkCore; // To use ToArrayAsync. namespace Northwind.WebApi.Repositories; public class CustomerRepository : ICustomerRepository { private readonly IMemoryCache _memoryCache; private readonly MemoryCacheEntryOptions _cacheEntryOptions = new() { SlidingExpiration = TimeSpan.FromMinutes(30) }; // Use an instance data context field because it should not be // cached due to the data context having internal caching. private NorthwindContext _db; public CustomerRepository(NorthwindContext db, IMemoryCache memoryCache) { _db = db; _memoryCache = memoryCache; } } Warning! Make sure you use MemoryCacheEntryOptions and not MemoryCacheOptions! 7. Implement the create method, as shown in the following code: public async Task<Customer?> CreateAsync(Customer c) { c.CustomerId = c.CustomerId.ToUpper(); // Normalize to uppercase. 