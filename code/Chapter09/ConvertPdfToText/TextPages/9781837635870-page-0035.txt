Hello, C#! Welcome, .NET! 16 You could use a third-party tool like Dots, the friendly .NET SDK manager, found at the following link: https://johnnys.news/2023/01/Dots-a-dotnet-SDK-manager. At the time of writing, you must build the app from source on its GitHub repository, so I only recommend that for advanced developers. Understanding intermediate language The C# compiler (named Roslyn) used by the dotnet CLI tool converts your C# source code into inter- mediate language (IL) code and stores the IL in an assembly (a DLL or EXE file). IL code statements are like assembly language instructions, which are executed by .NETâ€™s virtual machine, known as CoreCLR. At runtime, CoreCLR loads the IL code from the assembly, the just-in-time (JIT) compiler compiles it into native CPU instructions, and then it is executed by the CPU on your machine. The benefit of this two-step compilation process is that Microsoft can create Common language runtimes (CLRs) for Linux and macOS, as well as for Windows. The same IL code runs everywhere because of the second compilation step, which generates code for the native operating system and CPU instruction set. Regardless of which language the source code is written in, for example, C#, Visual Basic, or F#, all .NET applications use IL code for their instructions stored in an assembly. Microsoft and others provide disassembler tools that can open an assembly and reveal this IL code, such as the ILSpy .NET Decom- piler extension. You will learn more about this in Chapter 7, Packaging and Distributing .NET Types. Comparing .NET technologies We can summarize and compare the current .NET technologies as shown in Table 1.4: Host operating Technology Description systems A modern feature set, with full C# 8 to C# 12 language Windows, macOS, support. It can be used to port existing apps or create new Linux, Android, iOS, Modern .NET desktop, mobile, and web apps and services. It can target tvOS, Tizen older .NET platforms. A legacy feature set with limited C# 8 support and no C# .NET 9 or later support. It should be used to maintain existing Windows only Framework applications only. Xamarin Mobile and desktop apps only. Android, iOS, macOS Table 1.4: Comparison of .NET technologies 