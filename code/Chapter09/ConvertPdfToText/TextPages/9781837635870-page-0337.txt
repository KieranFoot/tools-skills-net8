Implementing Interfaces and Inheriting Classes 318 Richard After sorting using Person's IComparable implementation: Adam Jenny Richard Simon <null> Name <null> Person Good Practice: If you want to sort an array or collection of instances of your type, then implement the IComparable interface. Comparing objects using a separate class Sometimes, you wonâ€™t have access to the source code for a type, and it might not implement the IComparable interface. Luckily, there is another way to sort instances of a type. You can create a sep- arate type that implements a slightly different interface, named IComparer: 1. In the PacktLibrary project, add a new class file named PersonComparer.cs, containing a IComparer interface that will compare two people, that is, two Person class implementing the instances. Implement it by comparing the length of their Name fields, or if the names are the same length, then compare the names alphabetically, as shown in the following code: namespace Packt.Shared; public class PersonComparer : IComparer<Person?> { public int Compare(Person? x, Person? y) { int position; if ((x is not null) && (y is not null)) { if ((x.Name is not null) && (y.Name is not null)) { // If both Name values are not null... // ...then compare the Name lengths... int result = x.Name.Length.CompareTo(y.Name.Length); // ...and if they are equal... 