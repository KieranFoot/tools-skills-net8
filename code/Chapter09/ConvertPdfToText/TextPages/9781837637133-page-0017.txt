Table of Contents xvi Practicing and exploring ...................................................................................................... 365 Exercise 8.1 – Test your knowledge • 365 Exercise 8.2 – Review Microsoft HTTP API design policy • 366 Exercise 8.3 – Explore topics • 366 Exercise 8.4 – Exposing data via the web using OData services • 366 Exercise 8.5 – Auth0 project templates • 366 Summary ............................................................................................................................. 367 Chapter 9: Caching, Queuing, and Resilient Background Services 369 Understanding service architecture ...................................................................................... 369 What parts of a system are slowest? • 369 Numbers every (developer) should know • 370 Caching with ASP.NET Core .................................................................................................. 371 General caching guidelines • 371 Building a controller-based Web API service • 371 Caching objects using in-memory caching • 377 Caching objects using distributed caching • 381 A new abstraction for distributed caching • 384 Caching web responses using HTTP caching • 385 Fault tolerance with Polly ..................................................................................................... 389 Understanding retry and circuit breaker patterns • 389 Defining and executing policies • 390 Defining wait intervals between retries • 390 Applying policies to HTTP clients • 391 Adding random faults to the web service • 392 Building an MVC project to call the faulty web service • 392 Implementing the Retry pattern for transient fault handling • 398 Queuing with RabbitMQ ....................................................................................................... 400 Setting up RabbitMQ using Docker • 402 Sending messages to a queue using an MVC website • 404 Consuming message from a queue using a console app • 409 Implementing long-running background services ................................................................. 414 Building a worker service • 414 Processing queued message using a worker service • 417 Executing code on a timed schedule • 420 Building a website to host Hangfire • 422 Scheduling jobs using Hangfire • 428 