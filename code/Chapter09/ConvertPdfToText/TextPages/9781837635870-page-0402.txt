Chapter 7 383 { WriteLine("I am Windows 10."); } else { WriteLine("I am some other mysterious OS."); } WriteLine("Press any key to stop me."); ReadKey(intercept: true); // Do not output the key that was pressed. 4. Run the DotNetEverywhere project and note the results when run on Windows 11, as shown in the following output: I can run everywhere! OS Version is Microsoft Windows NT 10.0.22000.0. I am Windows 11. Press any key to stop me. 5. In DotNetEverywhere.csproj, add the runtime identifiers (RIDs) to target five operating sys- tems inside the <PropertyGroup> element, as shown highlighted in the following markup: <Project Sdk="Microsoft.NET.Sdk"> <PropertyGroup> <OutputType>Exe</OutputType> <TargetFramework>net8.0</TargetFramework> <Nullable>enable</Nullable> <ImplicitUsings>enable</ImplicitUsings> <RuntimeIdentifiers> win10-x64;osx-x64;osx.11.0-arm64;linux-x64;linux-arm64 </RuntimeIdentifiers> </PropertyGroup> </Project> • The win10-x64 RID value means Windows 10 or Windows Server 2016 64-bit. You could also use the win10-arm64 RID value to deploy to a Microsoft Surface Pro X. osx-x64 RID value means macOS Sierra 10.12 or later. You can also specify ver- • The sion-specific RID values like osx.10.15-x64 (Catalina), osx.11.0-x64 (Big Sur on Intel), or osx.11.0-arm64 (Big Sur on Apple Silicon). The linux-x64 RID value means most desktop distributions of Linux, like Ubuntu, • CentOS, Debian, or Fedora. Use linux-arm for Raspbian or Raspberry Pi OS 32-bit. Use linux-arm64 for a Raspberry Pi running Ubuntu 64-bit. 