Chapter 6 303 Good Practice: Unlike methods, operators do not appear in IntelliSense lists for a type or a type instance when you enter a dot (.). For every operator that you define, make a method as well, because it may not be obvious to a programmer that the operator is available. The implementation of the operator can then call the method, reusing the code you have written. A second reason to provide a method is that operators are not supported by every language compiler; for ex- ample, although arithmetic operators like * are supported by Visual Basic and F#, there is no requirement that other languages support all operators supported by C#. You have to read the type definition or the documentation to discover whether operators are implemented. 3. In Program.cs, comment out the statement that calls the static Marry method to marry Zillah if statement that uses the + operator to marry them, as and Lamech, and replace it with an shown in the following code: // Person.Marry(lamech, zillah); if (lamech + zillah) { WriteLine($"{lamech.Name} and {zillah.Name} successfully got married."); } 4. In Program.cs, after calling the Procreate method and before the statements that write the children to the console, use the * operator for Lamech to make two more babies with his wives, Adah and Zillah, as highlighted in the following code: // Use the * operator to "multiply". Person baby3 = lamech * adah; baby3.Name = "Jubal"; Person baby4 = zillah * lamech; baby4.Name = "Naamah"; 5. Run the PeopleApp project and view the result, as shown in the following output: Lamech and Zillah successfully got married. Lamech is married to 2 people: Adah Zillah Adah is married to 1 person: Lamech Zillah is married to 1 person: Lamech 