Building Web Components Using Blazor 672 For JavaScript isolation, you do not use a naming convention in the same way as with CSS. Instead, Blazor enables JavaScript isolation using JavaScript modules, imported using the JavaScript interop feature of Blazor, as you will see later in this chapter. You can read more about JavaScript isolation at the following link: https://learn. microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call- javascript-from-dotnet#javascript-isolation-in-javascript-modules. Building Blazor components With ASP.NET Core 8, Blazor introduced a new project template to start a project that supports the most flexible hosting model and all rendering modes. It provides a basic template to run, and a Weather component, which shows a table with five rows of random temperatures that uses streaming rendering. Reviewing the new Blazor project template First, we will create a Blazor Web App project and review its important parts: 1. Use your preferred code editor to create a new project and solution, using the Blazor Web App project template, as defined in the following list: • Project template: Blazor Web App / blazor --interactivity None • Project file and folder: Northwind.Blazor Chapter15 • Solution file and folder: • Authentication type: None • Configure for HTTPS: Selected • Interactive render mode: None • Interactivity location: Per page/component • Include sample pages: Selected • Do not use top-level statements: Cleared If you are using Visual Studio Code or JetBrains Rider, then enter the following command at the command prompt or terminal in the Chapter15 folder: dotnet new blazor --interactivity None -o Northwind.Blazor. Good Practice: We have not selected the options to use interactive WebAssembly or server components so that we can build up your knowledge about how Blazor works step by step. In real-world projects, you are likely to want to select these options from the start. We have also selected sample pages, which you would likely want to clear in a real-world project. 