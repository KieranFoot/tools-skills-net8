Chapter 10 541 Configuring preconvention models Along with support for the DateOnly and TimeOnly types for use with the SQLite database provider, one of the features introduced with EF Core 6 was configuring preconvention models. As models become more complex, relying on conventions to discover entity types and their properties and successfully map them to tables and columns becomes harder. It would be useful if you could configure the conventions themselves before they are used to analyze and build a model. For example, you might want to define a convention to say that all string properties should have a maximum length of 50 characters as a default, or any property types that implement a custom inter- face should not be mapped, as shown in the following code: protected override void ConfigureConventions( ModelConfigurationBuilder configurationBuilder) { configurationBuilder.Properties<string>().HaveMaxLength(50); configurationBuilder.IgnoreAny<IDoNotMap>(); } In the rest of this chapter, we will use the classes that you manually created. Querying EF Core models Now that we have a model that maps to the Northwind database and two of its tables, we can write some simple LINQ queries to fetch data. You will learn much more about writing LINQ queries in Chapter 11, Querying and Manipulating Data Using LINQ. For now, just write the code and view the results: 1. In the WorkingWithEFCore project, add a new class file named Program.Helpers.cs. In Program.Helpers.cs, add a partial Program class with some methods, as shown in the 2. following code: partial class Program { private static void ConfigureConsole(string culture = "en-US", bool useComputerCulture = false) { // To enable Unicode characters like Euro symbol in the console. OutputEncoding = System.Text.Encoding.UTF8; if (!useComputerCulture) { CultureInfo.CurrentCulture = CultureInfo.GetCultureInfo(culture); } 