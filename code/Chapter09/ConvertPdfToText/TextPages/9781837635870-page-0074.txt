Chapter 2 55 Discovering your C# compiler version The .NET language compiler for C# and Visual Basic, also known as Roslyn, along with a separate compiler for F#, is distributed as part of the .NET SDK. To use a specific version of C#, you must have at least that version of the .NET SDK installed, as shown in Table 2.3: .NET SDK Roslyn compiler Default C# language 1.0.4 2.0-2.2 7.0 1.1.4 2.3-2.4 7.1 2.1.2 2.6-2.7 7.2 2.1.200 2.8-2.10 7.3 3.0 3.0-3.4 8.0 5.0 3.8 9.0 6.0 4.0 10.0 7.0 4.4 11.0 8.0 4.8 12.0 Table 2.3: .NET SDK versions and their C# compiler versions When you create class libraries, you can choose to target .NET Standard as well as versions of modern .NET. They have default C# language versions, as shown in Table 2.4: .NET Standard C# 2.0 7.3 2.1 8.0 Table 2.4: .NET Standard versions and their default C# compiler versions Although you must have a minimum version of the .NET SDK installed to have access to a specific compiler version, the projects that you create can target older versions of .NET and still use a modern compiler version. For example, if you have the .NET 7 SDK or later installed, then you can use C# 11 language features in a console app that targets .NET Core 3.0. How to output the SDK version Letâ€™s see what .NET SDK and C# language compiler versions you have available: 1. On Windows, start Windows Terminal or Command Prompt. On macOS, start Terminal. To determine which version of the .NET SDK you have available, enter the following command: 2. dotnet --version 