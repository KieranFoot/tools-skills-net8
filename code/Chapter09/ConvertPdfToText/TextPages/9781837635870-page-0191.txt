Writing, Debugging, and Testing Functions 172 Defining a partial Program class with a static function A better approach is to write any functions in a separate file and define them as static members of the Program class: 1. Add a new class file named Program.Functions.cs. The name of this file does not actually matter but using this naming convention is sensible. You could name the file Gibberish.cs and it would have the same behavior. In Program.Functions.cs, delete any existing statements and then add statements to define a 2. partial Program class. Cut and paste the WhatsMyNamespace function to move it from Program. cs into Program.Functions.cs, and then add the static keyword to the function, as shown highlighted in the following code: using static System.Console; // Do not define a namespace so this class goes in the default empty namespace // just like the auto-generated partial Program class. partial class Program { static void WhatsMyNamespace() // Define a static function. { WriteLine("Namespace of Program class: {0}", arg0: typeof(Program).Namespace ?? "null"); } } 3. In Program.cs, confirm that its entire content is now just three statements, as shown in the following code: using static System.Console; WriteLine("* Top-level functions example"); WhatsMyNamespace(); // Call the function. 4. Run the console app and note that it has the same behavior as before. What is automatically generated for a static function? When you use a separate file to define a partial Program class with static functions, the compiler defines a Program class with a <Main>$ function, and merges your function as a member of the Program class, as shown in the following highlighted code: 