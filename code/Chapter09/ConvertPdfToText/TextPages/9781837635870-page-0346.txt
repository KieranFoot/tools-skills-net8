Chapter 6 327 Boxing and unboxing operations have a negative impact on performance. Although it can be useful for a .NET developer to be aware of and to avoid boxing, for most .NET project types and for many scenarios, boxing is not worth worrying too much about because the overhead is dwarfed by other factors like making a network call or updating the user interface. But for games developed for the Unity platform, its garbage collector does not release boxed values as quickly or automatically and therefore it is more critical to avoid boxing as much as possible. For this reason, JetBrains Rider with its Unity Support plugin will complain about boxing operations whenever they occur in your code. Unfortunately, it does not differentiate between Unity and other project types. More Information: You can learn more about boxing at the following link: https:// learn.microsoft.com/en-us/dotnet/csharp/programming-guide/types/boxing- and-unboxing. Equality of types It is common to compare two variables using the == and != operators. The behavior of these two op- erators is different for reference types and value types. When you check the equality of two value type variables, .NET literally compares the values of those two variables on the stack and returns true if they are equal. 1. In Program.cs, add statements to declare two integers with equal values and then compare them, as shown in the following code: int a = 3; int b = 3; WriteLine($"a: {a}, b: {b}"); WriteLine($"a == b: {a == b}"); 2. Run the PeopleApp project and view the result, as shown in the following output: a: 3, b: 3 a == b: True When you check the equality of two reference type variables, .NET compares the memory addresses of those two variables and returns true if they are equal. 3. In Program.cs, add statements to declare two Person instances with equal names, and then compare the variables and their names, as shown in the following code: Person p1 = new() { Name = "Kevin" }; Person p2 = new() { Name = "Kevin" }; WriteLine($"p1: {p1}, p2: {p2}"); WriteLine($"p1.Name: {p1.Name}, p2.Name: {p2.Name}"); WriteLine($"p1 == p2: {p1 == p2}"); 