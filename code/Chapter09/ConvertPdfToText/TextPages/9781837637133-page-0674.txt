Chapter 14 641 <th>@Localizer["Item Count"]</th> <th>@Localizer["Order Total"]</th> </tr> </thead> Good Practice: The key values like "Order ID" are used to look up the localized values. If a value is missing, then it returns the key as a default. It is good practice to therefore use keys that also work as a good fallback, which is why I used US English proper titles with spaces as the keys above and in the .resx files. 2. In Program.cs, before the call to AddControllersWithViews, add a statement to add local- ization and set the path to find resource files to the Resources folder, and after the call to AddControllersWithViews, append a call to add view localization, as shown highlighted in the following code: builder.Services.AddLocalization( options => options.ResourcesPath = "Resources"); builder.Services.AddControllersWithViews() .AddViewLocalization(); 3. In Program.cs, after the call to Build the app object, add statements to declare four cultures that we will support: US English, British English, neutral French, and French in France. Then, create a new localization options object and add those cultures as supported for both localiza- UICultures) and globalization of data values like dates and currency tion of user interfaces ( (Cultures), as shown in the following code: string[] cultures = { "en-US", "en-GB", "fr", "fr-FR" }; RequestLocalizationOptions localizationOptions = new(); // cultures[0] will be "en-US" localizationOptions.SetDefaultCulture(cultures[0]) // Set globalization of data formats like dates and currencies. .AddSupportedCultures(cultures) // Set localization of user interface text. .AddSupportedUICultures(cultures); app.UseRequestLocalization(localizationOptions); 4. Start the Northwind.Mvc website project. 5. In Chrome, navigate to Settings. 