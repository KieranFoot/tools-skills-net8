Packaging and Distributing .NET Types 374 Letâ€™s see this in action with some code: 1. In Program.cs, declare two variables to hold string values, one using lowercase string and String, as shown in the following code: one using uppercase string s1 = "Hello"; String s2 = "World"; WriteLine($"{s1} {s2}"); 2. Run the AssembliesAndNamespaces project and note that string and String both work and literally mean the same thing. AssembliesAndNamespaces.csproj, add an entry to prevent the System namespace from 3. In being globally imported, as shown in the following markup: <ItemGroup> <Using Remove="System" /> </ItemGroup> 4. In Program.cs, and in the Error List or PROBLEMS window, note the compiler error message, as shown in the following output: CS0246 The type or namespace name 'String' could not be found (are you missing a using directive or an assembly reference?) 5. At the top of Program.cs, import the System namespace with a using statement that will fix the error, as shown in the following code: using System; // To use String. Good Practice: When you have a choice, use the C# keyword instead of the actual type because the keywords do not need a namespace to be imported. Mapping C# aliases to .NET types Table 7.3 shows the 18 C# type keywords along with their actual .NET types: Keyword .NET type Keyword .NET type string System.String char System.Char sbyte System.SByte byte System.Byte short System.Int16 ushort System.UInt16 int System.Int32 uint System.UInt32 long System.Int64 ulong System.UInt64 nint System.IntPtr nuint System.UIntPtr 