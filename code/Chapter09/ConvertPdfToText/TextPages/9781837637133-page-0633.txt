Building Efficient Microservices Using gRPC 600 The class generated will not use .NET types directly. Instead, there are intermediate types, as shown in the following code: public class Employee { public int EmployeeId; public Timestamp BirthDate; public Duration EarnedVacationTime; } There are conversion methods on the types FromDateTimeOffset, ToDateTimeOffset, FromTimeSpan, ToTimeSpan, as shown in the following code: and Employee employee = new() { EmployeeId = 1, BirthDate = Timestamp.FromDateTimeOffset(new DateTimeOffset( year: 1998, month: 11, day: 30, hour: 0, minute: 0, second: 0, offset: TimeSpan.FromHours(-5)), EarnedVacationTime = Duration.FromTimeSpan(TimeSpan.FromDays(15)) }; DateTimeOffset when = employee.BirthDate.ToDateTimeOffset(); TimeSpan daysoff = employee.EarnedVacationTime.ToTimeSpan(); gRPC also does not natively support decimal values. In the future, that support might be added, but for now, you must create a custom message to represent it. If you choose to do this, then keep in mind that developers on other platforms will have to understand your custom format and implement their own handling for it. Defining a custom decimal type and using date/time types Letâ€™s add gRPC services for working with products (which have a UnitPrice property that is a decimal) and employees (which have HireDate properties that are DateTime values): 1. In the Northwind.Grpc.Service project, in the Protos folder, add a new file named decimal. , and add statements to define a message format for safely storing a decimal value, as proto shown in the following code: syntax = "proto3"; option csharp_namespace = "Northwind.Grpc.Service"; package decimal; // Example: 12345.6789 -> { units = 12345, nanos = 678900000 } 