Working with Data Using Entity Framework Core 546 Sasquatch Ale has 111 units in stock. Rhönbräu Klosterbier has 125 units in stock. Condiments has 2 products with a minimum of 100 units in stock. Grandma's Boysenberry Spread has 120 units in stock. Sirop d'érable has 113 units in stock. Confections has 0 products with a minimum of 100 units in stock. Dairy Products has 1 products with a minimum of 100 units in stock. Geitost has 112 units in stock. Grains/Cereals has 1 products with a minimum of 100 units in stock. Gustaf's Knäckebröd has 104 units in stock. Meat/Poultry has 1 products with a minimum of 100 units in stock. Pâté chinois has 115 units in stock. Produce has 0 products with a minimum of 100 units in stock. Seafood has 3 products with a minimum of 100 units in stock. Inlagd Sill has 112 units in stock. Boston Crab Meat has 123 units in stock. Röd Kaviar has 101 units in stock. Unicode characters in the Windows console: There is a limitation with the console provid- ed by Microsoft on versions of Windows before the Windows 10 Fall Creators Update. By default, the console cannot display Unicode characters, for example, in the name Rhönbräu. If you have this issue, then you can temporarily change the code page (also known as the character set) in a console to Unicode UTF-8 by entering the following command at the prompt before running the app: chcp 65001 Filtering and sorting products Let’s explore a more complex query that will filter and sort data: 1. In Program.Queries.cs, define a QueryingProducts method, and add statements to do the following, as shown in the following code: • Create an instance of the Northwind class that will manage the database. • Prompt the user for a price for products. • Create a query for products that cost more than the price using LINQ. • Loop through the results, outputting the ID, name, cost (formatted in US dollars), and the number of units in stock: private static void QueryingProducts() { using NorthwindDb db = new(); 