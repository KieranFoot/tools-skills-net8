Controlling Flow, Converting Types, and Handling Exceptions 142 Letâ€™s look at how to use a jagged array: 1. At the bottom of Program.cs, add statements to declare and instantiate an array of arrays of string values, as shown in the following code: string[][] jagged = // An array of string arrays. { new[] { "Alpha", "Beta", "Gamma" }, new[] { "Anne", "Ben", "Charlie", "Doug" }, new[] { "Aardvark", "Bear" } }; 2. We can discover the lower and upper bounds of the array of arrays, and then each array with it, as shown in the following code: WriteLine("Upper bound of the array of arrays is: {0}", jagged.GetUpperBound(0)); for (int array = 0; array <= jagged.GetUpperBound(0); array++) { WriteLine("Upper bound of array {0} is: {1}", arg0: array, arg1: jagged[array].GetUpperBound(0)); } 3. Run the code and note the result, as shown in the following output: Upper bound of the array of arrays is: 2 Upper bound of array 0 is: 2 Upper bound of array 1 is: 3 Upper bound of array 2 is: 1 4. We can then use these values in nested for statements to loop through the string values, as shown in the following code: for (int row = 0; row <= jagged.GetUpperBound(0); row++) { for (int col = 0; col <= jagged[row].GetUpperBound(0); col++) { WriteLine($"Row {row}, Column {col}: {jagged[row][col]}"); } } 5. Run the code and note the result, as shown in the following output: Row 0, Column 0: Alpha Row 0, Column 1: Beta 