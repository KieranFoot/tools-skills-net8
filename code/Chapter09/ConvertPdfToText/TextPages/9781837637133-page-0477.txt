Building Serverless Nanoservices Using Azure Functions 444 You can read more about your choices at the following link: https://learn.microsoft. com/en-us/azure/azure-functions/functions-scale. Azure Storage requirements Azure Functions requires an Azure Storage account for storing information for some bindings and triggers. These Azure Storage services can also be used by your code for its implementation: • Azure Files: Stores and runs your function app code in a Consumption or Premium plan. • Azure Blob Storage: Stores state for bindings and function keys. • Azure Queue Storage: Used for failure and retry handling by some triggers. • Azure Table Storage: Task hubs in Durable Functions use Blob, Queue, and Table Storage. Testing locally with Azurite Azurite is an open-source local environment for testing Azure Functions with its related Blob, Queue, and Table Storage. Azurite is cross-platform on Windows, Linux, and macOS. Azurite supersedes the older Azure Storage Emulator. To install Azurite: • For Visual Studio 2022, Azurite is included. • For Visual Studio Code, search for and install the Azurite extension. • For JetBrains Rider, install the Azure Toolkit for Rider plugin, which includes Azurite. • For installation at the command prompt, you must have Node.js version 8 or later installed and then you can enter the following command: npm install -g azurite Once you have locally tested an Azure function, you can switch to an Azure Storage account in the cloud. You can learn more about Azurite at the following link: https://learn.microsoft.com/ en-us/azure/storage/common/storage-use-azurite. Azure Functions authorization levels Azure Functions has three authorization levels that control whether an API key is required: • Anonymous: No API key is required. • Function: A function-level key is required. • Admin: The master key is required. API keys are available through the Azure portal. 