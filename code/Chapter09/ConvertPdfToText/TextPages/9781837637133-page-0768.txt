Chapter 16 735 } public static readonly BindableProperty EnumTypeProperty = BindableProperty.Create( propertyName: nameof(EnumType), returnType: typeof(Type), declaringType: typeof(EnumPicker), propertyChanged: (bindable, oldValue, newValue) => { EnumPicker picker = (EnumPicker)bindable; if (oldValue != null) { picker.ItemsSource = null; } if (newValue != null) { if (!((Type)newValue).GetTypeInfo().IsEnum) throw new ArgumentException( "EnumPicker: EnumType property must be enumeration type"); picker.ItemsSource = Enum.GetValues((Type)newValue); } }); } 13. In SettingsPage.xaml, import a local namespace for using our custom EnumPicker control, an ios namespace for adding a special property that only applies to iOS apps, change the Title to Settings, and create an instance of EnumPicker for selecting a theme, as shown highlighted in the following markup: <?xml version="1.0" encoding="utf-8" ?> <ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui" xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml" xmlns:local="clr-namespace:Northwind.Maui.Client.Controls" xmlns:ios="clr-namespace:Microsoft.Maui.Controls. PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls" x:Class="Northwind.Maui.Client.SettingsPage" Title="Settings"> <VerticalStackLayout HorizontalOptions="Center"> 