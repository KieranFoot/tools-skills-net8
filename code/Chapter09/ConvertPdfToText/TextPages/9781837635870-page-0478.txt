Chapter 8 459 Working with spans, indexes, and ranges One of Microsoft’s goals with .NET Core 2.1 was to improve performance and resource usage. A key .NET feature that enables this is the Span<T> type. Using memory efficiently using spans When manipulating arrays, you will often create new copies or subsets of existing ones so that you can process just the subset. This is not efficient because duplicate objects must be created in memory. If you need to work with a subset of an array, use a span because it is like a window into the original array. This is more efficient in terms of memory usage and improves performance. Spans only work with arrays, not collections, because the memory must be contiguous. Before we look at spans in more detail, we need to understand some related objects: indexes and ranges. Identifying positions with the Index type C# 8 introduced two features for identifying an item’s index position within an array and a range of items using two indexes. You learned in the previous section that objects in a list can be accessed by passing an integer into their indexer, as shown in the following code: int index = 3; Person p = people[index]; // Fourth person in array. char letter = name[index]; // Fourth letter in name. The Index value type is a more formal way of identifying a position, and supports counting from the end, as shown in the following code: // Two ways to define the same index, 3 in from the start. Index i1 = new(value: 3); // Counts from the start Index i2 = 3; // Using implicit int conversion operator. // Two ways to define the same index, 5 in from the end. Index i3 = new(value: 5, fromEnd: true); Index i4 = ^5; // Using the caret ^ operator. Identifying ranges with the Range type The Range value type uses Index values to indicate the start and end of its range, using its constructor, C# syntax, or its static methods, as shown in the following code: Range r1 = new(start: new Index(3), end: new Index(7)); Range r2 = new(start: 3, end: 7); // Using implicit int conversion. Range r3 = 3..7; // Using C# 8.0 or later syntax. Range r4 = Range.StartAt(3); // From index 3 to last index. 