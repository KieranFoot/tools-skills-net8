Chapter 8 341 • Two client IDs, named dev-id-1 and dev-id-2, will be excluded from the rate limits because they are on the client whitelist. These could be special client accounts for internal developers that are not shared outside the organization. • Two general (default) rules are configured: the first sets a rate limit of 2 requests every 10 seconds, and the second sets a rate limit of 100 requests every 12 hours. • Two client-specific rules are configured that are looser than the default rules: for the console-client-abc123, it is allowed to make up to 5 requests every client ID named 10 seconds, and up to 250 requests every 12 hours. 4. In IServiceCollection.Extensions.cs, import the namespace for working with rate-limiting options, as shown in the following code: using AspNetCoreRateLimit; // To use ClientRateLimitOptions and so on. 5. In IServiceCollection.Extensions.cs, define an extension method to load rate-limiting configuration from app settings and set rate-limiting options, as shown in the following code: public static IServiceCollection AddCustomRateLimiting( this IServiceCollection services, ConfigurationManager configuration) { // Add services to store rate limit counters and rules in memory. services.AddMemoryCache(); services.AddInMemoryRateLimiting(); // Load default rate limit options from appsettings.json. services.Configure<ClientRateLimitOptions>( configuration.GetSection("ClientRateLimiting")); // Load client-specific policies from appsettings.json. services.Configure<ClientRateLimitPolicies>( configuration.GetSection("ClientRateLimitPolicies")); // Register the configuration. services.AddSingleton <IRateLimitConfiguration, RateLimitConfiguration>(); return services; } 6. In Program.cs, after creating the builder, add statements to load rate-limiting configuration from app settings and set rate-limiting options, as shown in the following code: builder.Services.AddCustomRateLimiting(builder.Configuration); 