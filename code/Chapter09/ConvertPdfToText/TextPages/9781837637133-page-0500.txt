Chapter 10 467 • We use ImageSharp to create a 1200x600 image of a check. • We use the current UTC date and time to name the BLOB to avoid duplicates. In a real imple- mentation, you would need something more robust like GUIDs. IS_LOCAL environment variable is set to true, then we save the image as a PNG to the • If the local filesystem in a blobs subfolder. • We save the image as a PNG to a memory stream that is then returned as a byte array and up- [BlobOutput("checks-blob-container/check. loaded to the BLOB container defined by the attribute. png")] Testing the function that works with queues and BLOBs Now we can test the function that works with queues and BLOBs in our local development environment: 1. Start the Northwind.AzureFunctions.Service project: If you are using Visual Studio Code, you will need to navigate to the Run and Debug pane, make sure that Attach to .NET Functions is selected, and then click the Run button. 2. Note there are now four functions, as shown in the following partial output: Functions: NumbersToChecksFunction: [GET,POST] http://localhost:5101/api/ NumbersToChecksFunction NumbersToWordsFunction: [GET,POST] http://localhost:5101/api/ NumbersToWordsFunction CheckGeneratorFunction: queueTrigger ScrapeAmazonFunction: timerTrigger 3. In the HttpRequests folder, add a new file named azurefunctions-numberstochecks.http. 4. Modify its contents, as shown in the following code: ### Configure a variable for the Azure Functions base address. @base_address = http://localhost:5101/ ### Trigger the NumbersToChecksFunction function. GET {{base_address}}api/NumbersToChecksFunction?amount=123456 5. Send the request and note that a JSON document is returned with information about the NumbersToWordsFunction function, as shown in the following response: Response time: 2524 ms 