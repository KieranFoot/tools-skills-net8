Writing, Debugging, and Testing Functions 182 3. In Program.cs, comment out the CalculateTax statements, and call the RunCardinalToOrdinal method, as shown in the following code: RunCardinalToOrdinal(); 4. Run the console app and view the results, as shown in the following output: 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th 26th 27th 28th 29th 30th 31st 32nd 33rd 34th 35th 36th 37th 38th 39th 40th 41st 42nd 43rd 44th 45th 46th 47th 48th 49th 50th 51st 52nd 53rd 54th 55th 56th 57th 58th 59th 60th 61st 62nd 63rd 64th 65th 66th 67th 68th 69th 70th 71st 72nd 73rd 74th 75th 76th 77th 78th 79th 80th 81st 82nd 83rd 84th 85th 86th 87th 88th 89th 90th 91st 92nd 93rd 94th 95th 96th 97th 98th 99th 100th 101st 102nd 103rd 104th 105th 106th 107th 108th 109th 110th 111th 112th 113th 114th 115th 116th 117th 118th 119th 120th 121st 122nd 123rd 124th 125th 126th 127th 128th 129th 130th 131st 132nd 133rd 134th 135th 136th 137th 138th 139th 140th 141st 142nd 143rd 144th 145th 146th 147th 148th 149th 150th 5. In the RunCardinalToOrdinal function, change the maximum number to 1500. 6. Run the console app and view the results, as shown partially in the following output: 1,480th 1,481st 1,482nd 1,483rd 1,484th 1,485th 1,486th 1,487th 1,488th 1,489th 1,490th 1,491st 1,492nd 1,493rd 1,494th 1,495th 1,496th 1,497th 1,498th 1,499th 1,500th Calculating factorials with recursion The factorial of 5 is 120 because factorials are calculated by multiplying the starting number by one less than itself, and then by one less again, and so on until the number is reduced to 1. An example can be seen here: 5 x 4 x 3 x 2 x 1 = 120. The factorial function is defined for non-negative integers only, i.e., for 0, 1, 2, 3, and so on, and it is defined as: 0! = 1 { 1, 2, 3, ... } n! = n × (n − 1)!, for n ∈ We could leave it to the compiler to reject negative numbers by declaring the input parameter as uint as we did for the CardinalToOrdinal function, but this time let’s see an alternative way to handle that: throwing an argument exception. Factorials are written like this: 5!, where the exclamation mark is read as “bang,” so 5! = 120, or five bang equals one hundred and twenty. Bang is a good term to use in the context of factorials because they increase in size very rapidly, just like an explosion. 