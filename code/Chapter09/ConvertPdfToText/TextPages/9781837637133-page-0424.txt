Chapter 9 391 For example, to wait and retry, as shown in the following code: RetryPolicy policy = Policy .Handle<CustomException>().Or<ArithmeticException>() .WaitAndRetry(new[] { TimeSpan.FromSeconds(1), // 1 second between 1st and 2nd try. TimeSpan.FromSeconds(2), // 2 seconds between 2nd and 3rd try. TimeSpan.FromSeconds(5) // 5 seconds between 3rd and 4th try. }); Instead of hardcoded delay values, you can also define a function to generate them, as shown in the following code: RetryPolicy policy = Policy .Handle<CustomException>().Or<ArithmeticException>() .WaitAndRetry(3, retryAttempt => TimeSpan.FromSeconds(Math.Pow(2, retryAttempt))); // 2 ^ 1 = 2 seconds then // 2 ^ 2 = 4 seconds then // 2 ^ 3 = 8 seconds then However, if we pass an array of fixed delays, even if they are calculated, imagine what happens when a fault occurs in a busy web service. All the clients receive an exception, they all wait for the first second, and they all attempt to recall the web service one second later. This causes floods that could make the situation worse! Jittering is the idea of adding small amounts of randomization to time delays. There are many imple- mentations that you can find online, and the best is built-in with an extra Polly package. We will use it to generate time delays in our example project. Applying policies to HTTP clients When calling a web service, itâ€™s a good practice to define an HTTP client factory and register it in a dependency services collection. In this scenario, you will not call the methods that might throw an exception yourself. Instead, you must define a policy and then attach it to a registered HTTP client, so that it automatically follows that policy. To do so, we will use an extension class named HttpPolicyExtensions to create policies specifically for common HTTP requests and failures, as shown in the following code: AsyncRetryPolicy<HttpResponseMessage> retryPolicy = HttpPolicyExtensions // Handle network failures, 408 and 5xx status codes. .HandleTransientHttpError() // Define the policy using all the same options as before. .RetryAsync(3); 