Building Web User Interfaces Using ASP.NET Core 646 <a asp-controller="Home" asp-action="Index" asp-route-country="Brazil" class="btn btn-outline-primary" role="button">Orders in Brazil</a> </p> If you set a controller name without an action name, then it defaults to the current action, in this case, Privacy. The asp-route-{parametername} attribute can use any arbitrary parameter name. In the code example above, we used id and country. id will map to the route parameter with the same name. country is not a route parameter, so it will be passed as a query string. 3. In the Controllers folder, in HomeController.cs, modify the Index action method to define two optional parameters to pass a customer ID and the name of a country, and then modify the LINQ query to use them to filter the orders if they are set, as shown highlighted in the following code: public IActionResult Index( string? id = null, string? country = null) { // Start with a simplified initial model. IEnumerable<Order> model = db.Orders .Include(order => order.Customer) .Include(order => order.OrderDetails); // Add filtering based on parameters. if (id is not null) { model = model.Where(order => order.Customer?.CustomerId == id); } else if (country is not null) { model = model.Where(order => order.Customer?.Country == country); } // Add ordering and make enumerable. model = model .OrderByDescending(order => order.OrderDetails .Sum(detail => detail.Quantity * detail.UnitPrice)) .AsEnumerable(); return View(model); } 