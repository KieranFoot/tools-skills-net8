Chapter 6 235 Making fluent assertions in unit testing FluentAssertions are a set of extension methods that make writing and reading the code in unit tests and the error messages of failing tests more similar to a natural human language like English. It works with most unit testing frameworks, including xUnit. When you add a package reference for a test framework, FluentAssertions will automatically find the package and use it for throwing exceptions. After importing the FluentAssertions namespace, call the Should() extension method on a variable and then one of the hundreds of other extension methods to make assertions in a human-readable way. You can chain multiple assertions using the And() extension method or have separate statements, each calling Should(). Making assertions about strings Letâ€™s start by making assertions about a single string value: 1. Use your preferred code editor to add a new xUnit Test Project / xunit named FluentTests to a Chapter06 solution. FluentTests project, add a package reference to FluentAssertions, as highlighted in 2. In the the following markup: <ItemGroup> <PackageReference Include="FluentAssertions" Version="6.12.0" /> <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.8.0" /> FluentAssertions 7.0 should be available by the time this book is published. You can check at the following link: https://www.nuget.org/packages/ FluentAssertions/. 3. Build the FluentTests project. UnitTest1.cs to FluentExamples.cs. 4. Rename In FluentExamples.cs, import the namespace to make the FluentAssertions extension meth- 5. ods available and write a test method for a string value, as shown in the following code: using FluentAssertions; // To use common fluent assertions extension methods. namespace FluentTests; public class FluentExamples { [Fact] public void TestString() { 