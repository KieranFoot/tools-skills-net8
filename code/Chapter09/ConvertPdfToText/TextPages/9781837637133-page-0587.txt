Combining Data Sources Using GraphQL 554 Figure 12.12: Adding a new product using a GraphQL mutation 7. Close the browser, and shut down the web server. Implementing updates and deletes as mutations Next, we will define mutations to update just the unit price for a product, all the “units” fields for a product, and delete a product: 1. In Mutation.cs, define three record types to represent the inputs needed to perform two updateProduct and one deleteProduct mutations, as shown in the following code: public record UpdateProductPriceInput( int? ProductId, decimal? UnitPrice); public record UpdateProductUnitsInput( int? ProductId, short? UnitsInStock, short? UnitsOnOrder, short? ReorderLevel); public record DeleteProductInput( int? ProductId); 2. In Mutation.cs, define two class types to represent the types needed to return the results from an update or delete mutation, including if the action was successful, as shown in the following code: 