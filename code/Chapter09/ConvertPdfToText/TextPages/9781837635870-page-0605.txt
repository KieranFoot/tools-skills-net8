Querying and Manipulating Data Using LINQ 586 ForegroundColor = ConsoleColor.DarkYellow; WriteLine($"*** {title} ***"); ForegroundColor = previousColor; } } 5. Add a new class file named Program.Functions.cs. Program.Functions.cs, delete any existing statements and then define a partial Program 6. In class with a method named DeferredExecution that is passed an array of string values, and then define two queries, as shown in the following code: partial class Program { private static void DeferredExecution(string[] names) { SectionTitle("Deferred execution"); // Question: Which names end with an M? // (using a LINQ extension method) var query1 = names.Where(name => name.EndsWith("m")); // Question: Which names end with an M? // (using LINQ query comprehension syntax) var query2 = from name in names where name.EndsWith("m") select name; } } 7. In Program.cs, delete the existing statements and then add statements to define a sequence of string values for people who work in an office, and then pass it as an argument to the DeferredExecution method, as shown in the following code: // A string array is a sequence that implements IEnumerable<string>. string[] names = { "Michael", "Pam", "Jim", "Dwight", "Angela", "Kevin", "Toby", "Creed" }; DeferredExecution(names); 8. In Program.Functions.cs, in the DeferredExecution method, to get the answer – in other words, to execute the query – you must materialize it by either calling one of the To methods like ToArray, ToDictionary, or ToLookup, or by enumerating the query. Add statements to do this, as shown in the following code: // Answer returned as an array of strings containing Pam and Jim. string[] result1 = query1.ToArray(); 