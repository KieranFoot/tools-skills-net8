Chapter 8 325 11. Confirm the product was updated by executing a GET request for the product ID. In the HttpRequests folder, create a file named webapi-delete-product.http and modify 12. its contents to contain a DELETE request for the new product, as shown in the following code: DELETE https://localhost:5081/api/products/78 13. Note the successful response, as shown in Figure 8.5: Figure 8.5: Deleting a product using the Web API service 14. Send the request again and note the response contains a 404 status code because the product has now been deleted. 15. Shut down the web server. Excluding paths from OpenAPI documentation Sometimes you want to have a path that works but is not shown in the Swagger documentation. Let’s see how to remove the service base address that returns a plain text Hello World! response from the Swagger documentation web page: 1. In WebApplication.Extensions.cs, for the root path that returns Hello World, exclude it from the OpenAPI documentation, as shown highlighted in the following code: app.MapGet("/", () => "Hello World!") .ExcludeFromDescription(); 2. Start the Northwind.WebApi.Service project using the https profile without debugging and note the path is now not documented. We have a working web service implemented using ASP.NET Core Minimal APIs. Now let’s attack it! (So that we can learn how to prevent those attacks.) Visual Studio 2022 scaffolding for Minimal APIs It is important to learn how to implement a service using minimal APIs from scratch so that you properly understand it. But once you know how to do it manually, the process can be automated and the boilerplate code can be written for you, especially if you are building a web API that wraps an EF Core entity model. 