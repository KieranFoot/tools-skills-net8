Handling Dates, Times, and Internationalization 266 Let’s use them to plan a release party for .NET 9, probably on Tuesday, November 12, 2024, one week after the US presidential election: 1. In Program.cs, add statements to define the .NET 9 release party and a time for it to start, and then combine the two values to make a calendar entry so that we don’t miss it, as shown in the following code: SectionTitle("Working with only a date or a time"); DateOnly party = new(year: 2024, month: 11, day: 12); WriteLine($"The .NET 9 release party is on {party.ToLongDateString()}."); TimeOnly starts = new(hour: 11, minute: 30); WriteLine($"The party starts at {starts}."); DateTime calendarEntry = party.ToDateTime(starts); WriteLine($"Add to your calendar: {calendarEntry}."); 2. Run the code and note the results, as shown in the following output: *** Working with only a date or a time The .NET 9 release party is on Tuesday, November 12, 2024. The party starts at 11:30 AM. Add to your calendar: 11/12/2024 11:30:00 AM. Getting date/time formatting information Each culture has its own date/time formatting rules. These are defined in the DateTimeFormat property of a CultureInfo instance. Let’s output some commonly used information: 1. In Program.cs, add statements to get the date/time formatting information for the current culture and output some of its most useful properties, as shown in the following code: SectionTitle("Working with date/time formats"); DateTimeFormatInfo dtfi = DateTimeFormatInfo.CurrentInfo; // Or use Thread.CurrentThread.CurrentCulture.DateTimeFormat. WriteLine($"Date separator: {dtfi.DateSeparator}"); WriteLine($"Time separator: {dtfi.TimeSeparator}"); WriteLine($"Long date pattern: {dtfi.LongDatePattern}"); WriteLine($"Short date pattern: {dtfi.ShortDatePattern}"); 