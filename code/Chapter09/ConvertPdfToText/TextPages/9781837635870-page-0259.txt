Building Your Own Types with Object-Oriented Programming 240 2. In Program.cs, add statements to: • Create an instance of the Person type. • Output the instance using a textual description of itself. new keyword allocates memory for the object and initializes any internal data, as shown The in the following code: // Person bob = new Person(); // C# 1 or later. // var bob = new Person(); // C# 3 or later. Person bob = new(); // C# 9 or later. WriteLine(bob); // Implicit call to ToString(). // WriteLine(bob.ToString()); // Does the same thing. 3. Run the PeopleApp project and view the result, as shown in the following output: Current culture: English (United States). Packt.Shared.Person You might be wondering, “Why does the bob variable have a method named ToString? The Person class is empty!” Don’t worry, we’re about to find out! Inheriting from System.Object Although our Person class did not explicitly choose to inherit from a type, all types ultimately inherit directly or indirectly from a special type named System.Object. The implementation of the ToString method in the System.Object type outputs the full namespace and type name. Back in the original Person class, we could have explicitly told the compiler that Person inherits from the System.Object type, as shown in the following code: public class Person : System.Object When class B is inherited from class A, we say that A is the base or superclass, and B is the derived or System.Object is the base or superclass, and Person is the derived or subclass. subclass. In this case, object. You can also use the C# keyword Let’s make our class explicitly inherit from object and then review what members all objects have: 1. Modify your Person class to explicitly inherit from object, as shown in the following code: public class Person : object 2. Click inside the object keyword and press F12, or right-click on the object keyword and choose Go to Definition. 