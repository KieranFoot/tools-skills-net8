Chapter 4 189 5. In Program.Functions.cs, write a function named FibFunctional written in a declarative style, as shown in the following code: static int FibFunctional(uint term) => term switch { 0 => throw new ArgumentOutOfRangeException(), 1 => 0, 2 => 1, _ => FibFunctional(term - 1) + FibFunctional(term - 2) }; 6. In Program.Functions.cs, write a function to call it inside a for statement that loops from 1 to 30, as shown in the following code: static void RunFibFunctional() { for (uint i = 1; i <= 30; i++) { WriteLine("The {0} term of the Fibonacci sequence is {1:N0}.", arg0: CardinalToOrdinal(i), arg1: FibFunctional(term: i)); } } 7. In Program.cs, comment out the RunFibImperative method call, and call the RunFibFunctional method. 8. Run the code and view the results (which will be the same as before). Now that you have seen some examples of functions, let’s see how you can fix them when they have bugs. Debugging during development In this section, you will learn how to debug problems at development time. You must use a code editor that has debugging tools, such as Visual Studio 2022 or Visual Studio Code. Creating code with a deliberate bug Let’s explore debugging by creating a console app with a deliberate bug, which we will then use the debugger tools in your code editor to track down and fix: 1. Use your preferred coding tool to add a new Console App / console project named Debugging to the Chapter04 solution. Debugging.csproj to statically import System.Console for all code files. 2. Modify 