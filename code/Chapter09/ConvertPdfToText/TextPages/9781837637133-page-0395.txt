Building and Securing Web Services Using Minimal APIs 362 Many .NET developers have been waiting for AOT compilation for a long time. Microsoft is finally delivering on the promise, and it will expand to cover more project types over the next few major versions, so it’s a technology to keep an eye on. Understanding identity services Identity services are used to authenticate and authorize users. It is important for these services to implement open standards so that you can integrate disparate systems. Common standards include OpenID Connect and OAuth 2.0. Microsoft has no plans to officially support third-party authentication servers like IdentityServer4 be- cause “creating and sustaining an authentication server is a full-time endeavor, and Microsoft already has a team and a product in that area, Azure Active Directory, which allows 500,000 objects for free.” JWT bearer authorization JSON Web Token (JWT) is a standard that defines a compact and secure method to transmit information as a JSON object. The JSON object is digitally signed so it can be trusted. The most common scenario for using JWT is authorization. A user logs in to a trusted party using credentials like a username and password or biometric scan or two-factor authentication, and the trusted party issues a JWT. This is then sent with every request to the secure web service. In their compact form, JWTs consist of three parts separated by dots. These parts are the header, payload, and signature, as shown in the following format: aaa.bbb.ccc. The header and payload are Base64 encoded. Authenticating service clients using JWT bearer authentication During local development, the dotnet user-jwts command-line tool is used to create and manage local JWTs. The values are stored in a JSON file in the local machine’s user profile folder. Let’s secure the web service using JWT bearer authentication and test it with a local token: 1. In the Northwind.WebApi.Service project, add a reference to the package for JWT bearer authentication, as shown in the following markup: <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="8.0.0" /> 2. Build the Northwind.WebApi.Service project to restore packages. Program.cs, after creating the builder, add statements to add authorization and authenti- 3. In cation using JWT, as shown highlighted in the following code: var builder = WebApplication.CreateBuilder(args); builder.Services.AddAuthorization(); 