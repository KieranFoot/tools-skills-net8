Chapter 5 281 public override string ToString() { return $"Coach Class with {CarryOnKG:N2} KG carry on: {Name}"; } } You will learn about overriding the ToString method in Chapter 6, Implementing Interfaces and Inheriting Classes. 4. In Program.cs, add statements to define an object array containing five passengers of various types and property values, and then enumerate them, outputting the cost of their flight, as shown in the following code: // An array containing a mix of passenger types. Passenger[] passengers = { new FirstClassPassenger { AirMiles = 1_419, Name = "Suman" }, new FirstClassPassenger { AirMiles = 16_562, Name = "Lucy" }, new BusinessClassPassenger { Name = "Janice" }, new CoachClassPassenger { CarryOnKG = 25.7, Name = "Dave" }, new CoachClassPassenger { CarryOnKG = 0, Name = "Amit" }, }; foreach (Passenger passenger in passengers) { decimal flightCost = passenger switch { FirstClassPassenger p when p.AirMiles > 35_000 => 1_500M, FirstClassPassenger p when p.AirMiles > 15_000 => 1_750M, FirstClassPassenger _ => 2_000M, BusinessClassPassenger _ => 1_000M, CoachClassPassenger p when p.CarryOnKG < 10.0 => 500M, CoachClassPassenger _ => 650M, _ => 800M }; WriteLine($"Flight costs {flightCost:C} for {passenger}"); } While reviewing the preceding code, note the following: • Most code editors do not align the lambda symbols => as I have done above. • To pattern match on the properties of an object, you must name a local variable, like p, which can then be used in an expression. 