Managing NoSQL Data Using Azure Cosmos DB 134 Hierarchy of components The hierarchy of components for Azure Cosmos DB is: • Account: You can create up to 50 accounts via the Azure portal. • Database: You can have an unlimited number of databases per account. We will create a da- Northwind. tabase named • Container: You can have an unlimited number of containers per database. We will create a Products. container named • Partition: These are created and managed automatically within a container, and you can have an unlimited number. Partitions are either logical or physical. A logical partition contains items with the same partition key and defines the scope for transactions. Multiple logical partitions are mapped to a physical partition. Small containers may only need one physical partition. You should not concern yourself with physical partitions since you have no control over them. Focus on deciding what your partition key should be because that defines the items stored in a logical partition. • Item: This is a stored entity in a container. We will add items that represent each product, like Chai tea. “Item” is a deliberately generic term and is used by the Core (SQL) API to refer to a JSON document but can also be used for the other APIs. The other APIs also have their own more specific terms: • Cassandra uses row. • MongoDB uses document. • Graph databases like Gremlin use vertex and edge. Throughput provisioning Throughput is measured as request units per second (RU/s). A single request unit (RU) is about the cost of performing a GET request for a 1KB document using its unique identifier. Creating, updating, and deleting cost more RUs; for example, a query might cost 46.54 RUs, or a delete operation might cost 14.23 RUs. Throughput must be provisioned in advance, although you can scale up and down at any time in increments or decrements of 100 RU/s. You will be billed per hour. You can discover how much a request costs in RUs by getting the RequestCharge prop- erty. You can learn more at the following link: https://learn.microsoft.com/en-us/ azure/cosmos-db/sql/find-request-unit-charge. We will output this property in all the example code that we run in this chapter. You must provision throughput to run CRUD operations (creates, reads, updates, and deletes). You must estimate throughput by calculating the number of operations you’ll need to support throughout the year. For example, a commerce website might need to expect much greater throughput at Thanks- giving in the US or Singles Day in China. 