Building User Interfaces Using Blazor 764 Abstracting a service for a Blazor component We could implement the Blazor component so that it directly calls the Northwind database context to fetch the customers using an entity model. This would work if the Blazor component executes on the server. But if the component ran in the browser using WebAssembly, then it would not work. We will now create a local dependency service to enable better reuse of the components: 1. Use your preferred coding tool to add a new project, as defined in the following list: • Project template: Class Library / classlib • Project file and folder: Northwind.Blazor.Services • Solution file and folder: PracticalApps 2. In the Northwind.Blazor.Services.csproj project file, add a project reference to the North- wind entity models library, as shown in the following markup: <ItemGroup> <!-- change Sqlite to SqlServer if you prefer --> <ProjectReference Include="..\Northwind.EntityModels.Sqlite\ Northwind.EntityModels.Sqlite.csproj" /> </ItemGroup> 3. Build the Northwind.Blazor.Services project. Northwind.Blazor.Services project, rename Class1.cs to INorthwindService.cs. 4. In the In INorthwindService.cs, define a contract for a local service that abstracts CRUD operations, 5. as shown in the following code: using Northwind.EntityModels; // To use Customer. namespace Northwind.Blazor.Services; public interface INorthwindService { Task<List<Customer>> GetCustomersAsync(); Task<List<Customer>> GetCustomersAsync(string country); Task<Customer?> GetCustomerAsync(string id); Task<Customer> CreateCustomerAsync(Customer c); Task<Customer> UpdateCustomerAsync(Customer c); Task DeleteCustomerAsync(string id); } 6. In the Northwind.Blazor.csproj project file, add a project reference to the services library, as shown highlighted in the following markup: <ItemGroup> 