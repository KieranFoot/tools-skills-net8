Building Web Components Using Blazor 670 ComponentBase has some useful methods that you can call and override, as shown in Table 15.2: Method(s) Description Call this method to execute a function on the associated rendererâ€™s synchronization context. This avoids the requirement to write thread- synchronizing code when accessing shared resources. Multiple threads InvokeAsync are not allowed to access the rendering process at the same time. The use of InvokeAsync means that only one thread will access components at any given moment, which eliminates the need to write thread-locking and synchronization code for shared state. OnAfterRender, Override these methods to invoke code each time the component has been rendered. OnAfterRenderAsync OnInitialized, Override these methods to invoke code after the component has received its initial parameters from its parent in the render tree. OnInitializedAsync OnParametersSet, Override these methods to invoke code after the component has received parameters and the values have been assigned to properties. OnParametersSetAsync ShouldRender Override this method to indicate if the component should render. StateHasChanged Call this method to cause the component to re-render. Table 15.2: Useful methods of ComponentBase Blazor layouts Blazor components can have shared layouts in a similar way to MVC views and Razor Pages. You would create a .razor component file and make it explicitly inherit from LayoutComponentBase, as shown in the following markup: @inherits LayoutComponentBase <div> ... @Body ... </div> The base class has a property named Body that you can render in the markup at the correct place within the layout. You can set a default layout for components in the App.razor file and its Router component. To ex- plicitly set a layout for a component, use the @layout directive, as shown in the following markup: @page "/employees" @layout AlternativeLayout 