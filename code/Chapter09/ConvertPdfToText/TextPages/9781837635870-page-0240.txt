Chapter 4 221 Execution errors are when something happens at runtime that cannot be fixed by writing “better” code. Execution errors can be split into program errors and system errors. If you attempt to access a network resource but the network is down, you need to be able to handle that system error by logging an exception, and possibly backing off for a time and trying again. But some system errors, such as running out of memory, simply cannot be handled. If you attempt to open a file that does not exist, you might be able to catch that error and handle it programmatically by creating a new file. Program errors can be programmatically fixed by writing smart code. System errors often cannot be fixed programmatically. Commonly thrown exceptions in functions Very rarely should you define new types of exceptions to indicate usage errors. .NET already defines many that you should use. When defining your own functions with parameters, your code should check the parameter values and throw exceptions if they have values that will prevent your function from properly functioning. For example, if a parameter to a function should not be null, throw ArgumentNullException. For other problems, throw ArgumentException, NotSupportedException, or InvalidOperationException. For any exception, include a message that describes the problem for whoever will have to read it (typ- ically a developer audience for class libraries and functions, or end users if it is at the highest level of a GUI app), as shown in the following code: static void Withdraw(string accountName, decimal amount) { if (string.IsNullOrWhiteSpace(accountName)) { throw new ArgumentException(paramName: nameof(accountName)); } if (amount <= 0) { throw new ArgumentOutOfRangeException(paramName: nameof(amount), message: $"{nameof(amount)} cannot be negative or zero."); } // process parameters } Good Practice: If a function cannot successfully perform its operation, you should consider it a function failure and report it by throwing an exception. 