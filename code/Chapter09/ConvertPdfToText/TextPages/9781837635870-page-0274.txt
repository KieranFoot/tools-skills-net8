Chapter 5 255 9. Note that the statement now compiles without errors. In Program.cs, add a statement to output information about the book, as shown in the fol- 10. lowing code: WriteLine("{0}: {1} written by {2} has {3:N0} pages.", book.Isbn, book.Title, book.Author, book.PageCount); Before we run the project and view the output, letâ€™s talk about an alternative way that we could initial- ize fields (or properties) for a type. Initializing fields with constructors Fields often need to be initialized at runtime. You can do this in a constructor that will be called when new keyword. Constructors execute before any fields are set you make an instance of a class using the by the code that uses the type: 1. In Person.cs, add statements after the existing read-only HomePlanet field to define a second Name and Instantiated fields in a constructor, as highlighted read-only field, and then set the in the following code: // Read-only fields: Values that can be set at runtime. public readonly string HomePlanet = "Earth"; public readonly DateTime Instantiated; #endregion #region Constructors: Called when using new to instantiate a type. public Person() { // Constructors can set default values for fields // including any read-only fields like Instantiated. Name = "Unknown"; Instantiated = DateTime.Now; } #endregion 2. In Program.cs, add statements to instantiate a new person and then output its initial field values, as shown in the following code: Person blankPerson = new(); WriteLine(format: "{0} of {1} was created at {2:hh:mm:ss} on a {2:dddd}.", 