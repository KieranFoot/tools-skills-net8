Building Mobile and Desktop Apps Using .NET MAUI 714 Writing platform-specific code If you need to write code statements that only execute for a specific platform like Android, then you can use compiler directives. For example, by default, Entry controls on Android show an underline character. If you want to hide the underline, you could write some Android-specific code to get the handler for the Entry control, use its NativeView property to access the underlying native control, and then set the property that controls that feature to false, as shown in the following code: #if __ANDROID__ Handlers.EntryHandler.EntryMapper[nameof(IEntry.BackgroundColor)] = (h, v) => { (h.NativeView as global::Android.Views.Entry).UnderlineVisible = false; }; #endif Predefined compiler constants include the following: • __ANDROID__ • __IOS__ • WINDOWS The compiler #if statement syntax is slightly different from the C# if statement syntax, as shown in the following code: #if __IOS__ // iOS-specific statements #elif __ANDROID__ // Android-specific statements #elif WINDOWS // Windows-specific statements #endif Now that you have been introduced to some of the important concepts around MAUI apps, and you’ve set up the additional components needed for MAUI, let’s get practical and build a MAUI project. Building mobile and desktop apps using .NET MAUI We will build a mobile and desktop app for managing customers in Northwind. Good Practice: If you have a Mac and you have never run Xcode on it, then run it now until you see the Start window. This will ensure that all its required components are installed and registered. If you do not do this, then you might get errors with your projects later. 