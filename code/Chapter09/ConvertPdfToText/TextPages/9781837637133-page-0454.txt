Chapter 9 421 _timer = new Timer(callback: DoWork, state: null, dueTime: TimeSpan.Zero, period: TimeSpan.FromSeconds(_seconds)); return Task.CompletedTask; } public Task StopAsync(CancellationToken cancellationToken) { _logger.LogInformation("{0} is stopping.", nameof(TimerWorker)); _timer?.Change(dueTime: Timeout.Infinite, period: 0); return Task.CompletedTask; } public async ValueTask DisposeAsync() { if (_timer is IAsyncDisposable asyncTimer) { await asyncTimer.DisposeAsync(); } _timer = null; } } 3. In Program.cs, add a statement to register the timer worker service, as shown in the following code: builder.Services.AddHostedService<TimerWorker>(); 4. Start the Northwind.Background.Workers project without debugging, and note the initialization of both workers, as shown in the following output: info: Northwind.Background.Workers.QueueWorker[0] Worker running at: 06/12/2023 12:58:25 +01:00 info: Northwind.Background.Workers.TimerWorker[0] TimerWorker is running. info: Microsoft.Hosting.Lifetime[0] Application started. Press Ctrl+C to shut down. info: Microsoft.Hosting.Lifetime[0] Hosting environment: Development 