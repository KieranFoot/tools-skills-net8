Querying and Manipulating Data Using LINQ 582 3. If there’s a match, process that item. For example, output one or more of its properties to the user, update one or more properties to new values, delete the item, or perform an aggregate calculation like counting or summing values. 4. Move on to the next item. Repeat until all items have been processed. Procedural code tells the compiler how to achieve a goal. Do this, then do that. Since the compiler does not know what you are trying to achieve, it cannot help you as much. You are 100% responsible for ensuring that every how-to step is correct. LINQ makes these common tasks much easier with less opportunity to introduce subtle bugs. Instead of needing to explicitly state each individual action, like move, read, update, and so on, LINQ enables the programmer to use a declarative aka functional style of writing statements. Declarative, aka functional, code tells the compiler what goal to achieve. The compiler works out the best way to achieve the goal. The statements also tend to be more concise. Good Practice: If you do not fully understand how LINQ works, then the statements you write can introduce their own subtle bugs! A code teaser doing the rounds in 2022 involves a sequence of tasks and understanding when they are executed (https://twitter.com/ amantinband/status/1559187912218099714). Most experienced developers got it wrong! To be fair, it is the combination of LINQ behavior with multi-threading behavior that confused most. But by the end of this chapter, you will be better informed to understand why the code was dangerous due to LINQ behavior. Although we wrote a few LINQ expressions in Chapter 10, Working with Data Using Entity Framework Core, they weren’t the focus, so I didn’t properly explain how LINQ works. Let’s now take the time to properly understand them. LINQ components LINQ has several parts; some are required, and some are optional: • Extension methods (required): These include examples such as Where, OrderBy, and Select. These are what provide the functionality of LINQ. • LINQ providers (required): These include LINQ to Objects for processing in-memory objects, LINQ to Entities for processing data stored in external databases and modeled with EF Core, and LINQ to XML for processing data stored as XML. These providers are the part of LINQ that executes LINQ expressions in a way specific to different types of data. Lambda expressions (optional): These can be used instead of named methods to simplify LINQ • queries, for example, for the conditional logic of the Where method for filtering. LINQ query comprehension syntax (optional): These include C# keywords like from, in, where, • orderby, descending, and select. These are aliases for some of the LINQ extension methods, and their use can simplify the queries you write, especially if you already have experience with other query languages, such as Structured Query Language (SQL). 