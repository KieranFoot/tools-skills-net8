Building and Securing Web Services Using Minimal APIs 316 await db.Products.FindAsync(id) is Product product ? TypedResults.Ok(product) : TypedResults.NotFound()) .WithName("GetProductById") .WithOpenApi() .Produces<Product>(StatusCodes.Status200OK) .Produces(StatusCodes.Status404NotFound); app.MapGet("api/products/{name}", ( [FromServices] NorthwindContext db, [FromRoute] string name) => db.Products.Where(p => p.ProductName.Contains(name))) .WithName("GetProductsByName") .WithOpenApi() .Produces<Product[]>(StatusCodes.Status200OK); return app; } } 10. In WebApplication.Extensions.cs, define an extension method for the WebApplication class to configure a response to the HTTP POST request documented in the API table, as shown in the following code: public static WebApplication MapPosts(this WebApplication app) { app.MapPost("api/products", async ([FromBody] Product product, [FromServices] NorthwindContext db) => { db.Products.Add(product); await db.SaveChangesAsync(); return Results.Created($"api/products/{product.ProductId}", product); }).WithOpenApi() .Produces<Product>(StatusCodes.Status201Created); return app; } 11. In WebApplication.Extensions.cs, define an extension method for the WebApplication class to configure a response to the HTTP PUT request documented in the API table, as shown in the following code: public static WebApplication MapPuts(this WebApplication app) { 