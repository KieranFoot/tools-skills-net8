Writing, Debugging, and Testing Functions 174 Warning! Do not define a namespace for your partial Program class. If you do, it will be in a different namespace and therefore will not merge with the auto-generated partial Program class. Optionally, all the static methods in the Program class could be explicitly declared as private but this is the default anyway. Since all the functions will be called within the Program class itself, the access modifier is not important. Times table example Let’s say that you want to help your child learn their times tables, so you want to make it easy to gen- erate a times table for a number, such as the 7 times table: 1 x 7 = 7 2 x 7 = 14 3 x 7 = 21 ... 10 x 7 = 70 11 x 7 = 77 12 x 7 = 84 Most times tables have either 10, 12, or 20 rows, depending on how advanced the child is. You learned about the for statement earlier in this book, so you know that it can be used to generate repeated lines of output when there is a regular pattern, such as a 7 times table with 12 rows, as shown in the following code: for (int row = 1; row <= 12; row++) { Console.WriteLine($"{row} x 7 = {row * 7}"); } However, instead of always outputting the 7 times table with 12 rows, we want to make this more flexible so it can output any size times table for any number. We can do this by creating a function. Let’s explore functions by creating one to output any times table for numbers 0 to 255 of any size up to 255 rows (but it defaults to 12 rows): 1. Use your preferred coding tool to create a new project, as defined in the following list: • Project template: Console App / console • Project file and folder: WritingFunctions • Solution file and folder: Chapter04 • In Visual Studio 2022, set the startup project for the solution to the current selection. 