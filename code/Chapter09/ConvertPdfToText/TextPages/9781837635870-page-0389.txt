Packaging and Distributing .NET Types 370 Assemblies are distributed as NuGet packages, which are files that are downloadable from public on- line feeds and can contain multiple assemblies and other resources. You will also hear about project SDKs, workloads, and platforms, which are combinations of NuGet packages. Microsoft’s NuGet feed is found here: https://www.nuget.org/. What is a namespace? A namespace is the address of a type. Namespaces are a mechanism to uniquely identify a type by requiring a full address rather than just a short name. In the real world, Bob of 34 Sycamore Street is different from Bob of 12 Willow Drive. In .NET, the IActionFilter interface of the System.Web.Mvc namespace is different from the IActionFilter interface of the System.Web.Http.Filters namespace. Dependent assemblies If an assembly is compiled as a class library and provides types for other assemblies to use, then it .dll (dynamic link library), and it cannot be executed standalone. has the file extension Likewise, if an assembly is compiled as an application, then it has the file extension .exe (executable) and can be executed standalone. Before .NET Core 3, console apps were compiled to .dll files and had to be executed by the dotnet run command or a host executable. Any assembly can reference one or more class library assemblies as dependencies, but you cannot have circular references. So, assembly B cannot reference assembly A if assembly A already references assembly B. The compiler will warn you if you attempt to add a dependency reference that would cause a circular reference. Circular references are often a warning sign of poor code design. If you are sure that you need a circular reference, then use an interface to solve it. Microsoft .NET project SDKs By default, console applications have a dependency reference on the Microsoft .NET project SDK. This platform contains thousands of types in NuGet packages that almost all applications would need, such as the System.Int32 and System.String types. When using .NET, you reference the dependency assemblies, NuGet packages, and platforms that your application needs in a project file. Let’s explore the relationship between assemblies and namespaces: 1. Use your preferred code editor to create a new project, as defined in the following list: • Project template: Console App / console • Project file and folder: AssembliesAndNamespaces • Solution file and folder: Chapter07 2. Open AssembliesAndNamespaces.csproj and note that it is a typical project file for a .NET application, as shown in the following markup: 