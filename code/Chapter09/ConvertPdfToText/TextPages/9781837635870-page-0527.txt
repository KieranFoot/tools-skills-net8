Working with Files, Streams, and Serialization 508 More Information: You can learn more about the setx command here: https://learn. microsoft.com/en-us/windows-server/administration/windows-commands/setx. You can also manage environment variables with a user interface on Windows. Navigate to Settings | System | About | Advanced system settings, and then in the System Properties dialog box, click Environment Variables. To temporarily set an environment variable at the command prompt or terminal on macOS or Linux, you can use the export command, as shown in the following command: export MY_ENV_VAR=Delta More Information: You can learn more about the export command here: https://ss64. com/bash/export.html. Letâ€™s see some examples of expanding, setting in various ways, and getting environment variables: 1. In Program.cs, add statements to define a string that contains a couple of environment vari- ables (if the ones I picked are not defined on your computer, then pick any other two that you do have defined) and then expand them and output them to the console, as shown in the following code: string myComputer = "My username is %USERNAME%. My CPU is %PROCESSOR_ IDENTIFIER%."; WriteLine(ExpandEnvironmentVariables(myComputer)); 2. Run the code and view the result, as shown in the following output: My username is markj. My CPU is Intel64 Family 6 Model 140 Stepping 1, GenuineIntel. 3. In Program.cs, add statements to set a process scoped environment variable named MY_ PASSWORD and then get it and output it, as shown in the following code: string password_key = "MY_PASSWORD"; SetEnvironmentVariable(password_key, "Pa$$w0rd"); string? password = GetEnvironmentVariable(password_key); WriteLine($"{password_key}: {password}"); 