Working with Data Using Entity Framework Core 574 For example, to delete all products, call the ExecuteDelete or ExecuteDeleteAsync method on any table, as shown in the following code: await db.Products.ExecuteDeleteAsync(); The preceding code would execute an SQL statement in the database, as shown in the following code: DELETE FROM Products To delete all products that have a unit price greater than 50, use the following code: await db.Products .Where(product => product.UnitPrice > 50) .ExecuteDeleteAsync(); The preceding code would execute an SQL statement in the database, as shown in the following code: DELETE FROM Products p WHERE p.UnitPrice > 50 ExecuteUpdate and ExecuteDelete can only act on a single table, so although you can write quite complex LINQ queries, they can only update or delete from a single table. To update all products that are not discontinued to increase their unit price by 10% due to inflation, use the following code: await db.Products .Where(product => !product.Discontinued) .ExecuteUpdateAsync(s => s.SetProperty( p => p.UnitPrice, // Selects the property to update. p => p.UnitPrice * 0.1)); // Sets the value to update it to. You can chain multiple calls to SetProperty in the same query to update multiple prop- erties in one command. Letâ€™s see some examples: 1. In Program.Modifications.cs, add a method to update all products with a name that begins ExecuteUpdate, as shown in the following code: with a specified value using private static (int affected, int[]? productIds) IncreaseProductPricesBetter( string productNameStartsWith, decimal amount) { 