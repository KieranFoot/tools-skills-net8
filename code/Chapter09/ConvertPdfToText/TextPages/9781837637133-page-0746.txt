Chapter 16 713 The top bar automatically shows a Back button when needed to allow the user to navigate back to a previous page. ListView control The ListView control is used for long lists of data-bound values of the same type. It can have headers and footers and its list items can be grouped. It has cells to contain each list item. There are two built-in cell types: text and image. Developers can define custom cell types. Cells can have context actions that appear when the cell is swiped on an iPhone, long-pressed on Android, or right-clicked on a desktop OS. A context action that is destructive can be shown in red, as shown in the following markup: <TextCell Text="{Binding CompanyName}" Detail="{Binding Location}"> <TextCell.ContextActions> <MenuItem Clicked="Customer_Phoned" Text="Phone" /> <MenuItem Clicked="Customer_Deleted" Text="Delete" IsDestructive="True" /> </TextCell.ContextActions> </TextCell> Entry and Editor controls The Entry and Editor controls are used for editing text values and are often data-bound to an entity model property, as shown in the following markup: <Editor Text="{Binding CompanyName, Mode=TwoWay}" /> Good Practice: Use Entry for a single line of text. Use Editor for multiple lines of text. .NET MAUI handlers In .NET MAUI, XAML controls are defined in the Microsoft.Maui.Controls namespace. Components called handlers map these common controls to native controls on each platform. On iOS, a handler will map a .NET MAUI Button to an iOS-native UIButton defined by UIkit. On macOS, Button is mapped to NSButton defined by AppKit. On Android, Button is mapped to an Android-native AppCompatButton. Handlers have a NativeView property that exposes the underlying native control. This allows you to work with platform-specific features like properties, methods, and events, and customize all instances of a native control. 