Building Serverless Nanoservices Using Azure Functions 440 foreach (DateTime occurrence in occurrences.Take(40)) { WriteLine($"{occurrence:ddd, dd MMM yyyy HH:mm:ss}"); } Note the following: • The default potential time span for occurrences is the whole year of 2023. The default expression is 0,30 * * * * *, meaning at 0 and 30 seconds of every minute • of every hour of every day of every weekday of every month. • The formatting for the syntax help assumes each component will be three characters -3 is used for output formatting. You could write a cleverer algorithm to wide because dynamically adjust the arrows to point to variable width components, but I was lazy. I will leave that as an exercise for you. • Our expression includes seconds, so when parsing, we must set that as an additional option. After defining the schedule, the schedule calls its GetNextOccurrences method to return • a sequence of all the calculated occurrences. • The loop only outputs the first 40 occurrences. That should be enough to understand how most expressions work. 5. Start the console app without debugging, and note the occurrences are every 30 seconds, as shown in the following partial output: Start at: Sun, 01 Jan 2023 00:00:00 End at: Mon, 01 Jan 2024 00:00:00 Expression: 0,30 * * * * * \ / \ / \ / \ / \ / \ / - - - - - - | | | | | | | | | | | +--- day of week (0 - 6) (Sunday=0) | | | | +------- month (1 - 12) | | | +----------- day of month (1 - 31) | | +--------------- hour (0 - 23) | +------------------- min (0 - 59) +----------------------- sec (0 - 59) Sun, 01 Jan 2023 00:00:30 Sun, 01 Jan 2023 00:01:00 Sun, 01 Jan 2023 00:01:30 ... Sun, 01 Jan 2023 00:19:30 Sun, 01 Jan 2023 00:20:00 