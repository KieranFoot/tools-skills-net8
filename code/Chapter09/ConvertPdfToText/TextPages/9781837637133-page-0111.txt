Managing Relational Data Using SQL Server 78 { public int SupplierId { get; set; } public string? CompanyName { get; set; } public string? City { get; set; } public string? Country { get; set; } } 4. At the bottom of Program.cs, add statements to retrieve Supplier entities in Germany, enu- merate the collection outputting basic information about each one, and then serialize the collection as JSON to the console, as shown in the following code: WriteLineInColor("Using Dapper", ConsoleColor.DarkGreen); connection.ResetStatistics(); // So we can compare using Dapper. IEnumerable<Supplier> suppliers = connection.Query<Supplier>( sql: "SELECT * FROM Suppliers WHERE Country=@Country", param: new { Country = "Germany" }); foreach (Supplier s in suppliers) { WriteLine("{0}: {1}, {2}, {3}", s.SupplierId, s.CompanyName, s.City, s.Country); } WriteLineInColor(JsonSerializer.Serialize(suppliers), ConsoleColor.Green); OutputStatistics(connection); 5. Run the console app, and in the section where we used Dapper, note the same connection was used, so its events were raised while the Dapper query was executed, the enumerated collection output, and then JSON generated from the list of suppliers, as shown in the following output: Using Dapper 11: Heli Süßwaren GmbH & Co. KG, Berlin, Germany 12: Plutzer Lebensmittelgroßmärkte AG, Frankfurt, Germany 13: Nord-Ost-Fisch Handelsgesellschaft mbH, Cuxhaven, Germany [{"SupplierId":11, "CompanyName":"Heli S\u00FC\u00DFwaren GmbH \u0026 Co. KG", "City":"Berlin","Country":"Germany"}, {"SupplierId":12, "CompanyName":"Plutzer Lebensmittelgro\u00DFm\u00E4rkte AG", 