Caching, Queuing, and Resilient Background Services 380 }; _memoryCache.Set(OutOfStockProductsKey, cachedValue, cacheEntryOptions); } MemoryCacheStatistics? stats = _memoryCache.GetCurrentStatistics(); _logger.LogInformation("Memory cache. Total hits: {stats? .TotalHits}. Estimated size: {stats?.CurrentEstimatedSize}."); return cachedValue ?? Enumerable.Empty<Product>(); } 6. Start the web service project using the https profile without debugging. 7. Arrange the windows so that you can see the command prompt or terminal at the same time as the web page. 8. On the Swagger web page, click GET /api/product/outofstock to expand that section. 9. Click the Try it out button. 10. Click the Execute button, and note in the output that EF Core executes a SQL statement to get the products, the total hit counter is zero, and one product has now been cached, as shown in the following output: info: Northwind.WebApi.Service.Controllers.ProductsController[0] Memory cache. Total hits: 0. Estimated size: 1. 11. Click Execute within five seconds, and continue to click it a few more times: • Note that EF Core does not need to re-execute the SQL statement because the products are cached, and if something reads them within a five-second sliding expiration, they will stay in memory forever. Note the total hit counter for the cache increments each time the out-of-stock products • are found in the cache, as shown in the following output: info: Northwind.WebApi.Service.Controllers.ProductsController[0] Memory cache. Total hits: 1. Estimated size: 1. info: Northwind.WebApi.Service.Controllers.ProductsController[0] Memory cache. Total hits: 2. Estimated size: 1. info: Northwind.WebApi.Service.Controllers.ProductsController[0] Memory cache. Total hits: 3. Estimated size: 1. 12. Wait at least five seconds. Click Execute, and note in the output that EF Core executes a SQL statement to get the products 13. because they have not been read within the five-second sliding expiration window. 