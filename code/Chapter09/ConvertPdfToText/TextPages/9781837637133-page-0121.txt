Building Entity Models for SQL Server Using EF Core 88 Another example is for the Categories table, as shown highlighted in the following DDL code: CREATE TABLE Categories ( CategoryId INTEGER PRIMARY KEY, CategoryName NVARCHAR (15) NOT NULL, Description "NTEXT", Picture "IMAGE" ); The Description column can be longer than the maximum 8,000 characters that can be stored in an nvarchar variable, so it needs to map to ntext instead, as shown in the following code: [Column(TypeName = "ntext")] public string? Description { get; set; } Using the EF Core Fluent API to define the model The last way that the model can be defined is by using the Fluent API. This API can be used instead of attributes, as well as being used in addition to them. One reason you might need to do this is if the entity models need to be defined in a .NET Standard 2.0 class library so they can be used on legacy platforms. In this case, the class library should not include references to data annotation libraries. Another reason is that your team might have a policy to separate raw data models from validation rules. For example, to define the ProductName property, instead of decorating the property with two attributes, an equivalent Fluent API statement could be written in the OnModelCreating method of the database context class, as shown in the following code: modelBuilder.Entity<Product>() .Property(product => product.ProductName) .IsRequired() // only needed if you have disabled nullability checks .HasMaxLength(40); This keeps the entity model class simpler. You will see an example of this in the coding task below. Understanding data seeding with the Fluent API Another benefit of the Fluent API is to provide initial data to populate a database. EF Core automatically works out what insert, update, or delete operations must be executed. For example, if we wanted to make sure that a new database has at least one row in the Product table, HasData method, as shown in the following code: then we would call the modelBuilder.Entity<Product>() .HasData(new Product { ProductId = 1, ProductName = "Chai", UnitPrice = 8.99M }); 