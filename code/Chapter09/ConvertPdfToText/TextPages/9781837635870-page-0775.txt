Building User Interfaces Using Blazor 756 How to define a routable page component To create a routable page component, add the @page directive to the top of a componentâ€™s .razor file, as shown in the following markup: @page "customers" The preceding code is the equivalent of an MVC controller decorated with the [Route] attribute, as shown in the following code: [Route("customers")] public class CustomersController { A page component can have multiple @page directives to register multiple routes, as shown in the following code: @page "/weather" @page "/forecast" The Router component scans the assembly specifically in its AppAssembly parameter for components decorated with the [Route] attribute and registers their URL paths. At runtime, the page component is merged with any specific layout that you have specified, just like an MVC view or Razor Page would be. By default, the Blazor Web App project template defines MainLayout. razor as the layout for page components. Good Practice: By convention, put routable page Blazor components in the Components\ Pages folder. How to navigate routes and pass route parameters Microsoft provides a dependency service named NavigationManager that understands Blazor routing and the NavLink component. The NavigateTo method is used to go to the specified URL. Blazor routes can include case-insensitive named parameters, and your code can most easily access the passed values by binding the parameter to a property in the code block using the [Parameter] attribute, as shown in the following markup: @page "/customers/{country}" <div>Country parameter as the value: @Country</div> @code { [Parameter] 