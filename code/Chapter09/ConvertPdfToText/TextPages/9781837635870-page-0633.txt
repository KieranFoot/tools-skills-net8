Querying and Manipulating Data Using LINQ 614 Aggregating and paging sequences There are LINQ extension methods to perform aggregation functions, such as Average and Sum. Letâ€™s write some code to see some of these methods in action, aggregating information from the Products table: 1. In Program.Functions.cs, add a method to show the use of the aggregation extension methods, as shown in the following code: private static void AggregateProducts() { SectionTitle("Aggregate products"); using NorthwindDb db = new(); // Try to get an efficient count from EF Core DbSet<T>. if (db.Products.TryGetNonEnumeratedCount(out int countDbSet)) { WriteLine($"{"Product count from DbSet:",-25} {countDbSet,10}"); } else { WriteLine("Products DbSet does not have a Count property."); } // Try to get an efficient count from a List<T>. List<Product> products = db.Products.ToList(); if (products.TryGetNonEnumeratedCount(out int countList)) { WriteLine($"{"Product count from list:",-25} {countList,10}"); } else { WriteLine("Products list does not have a Count property."); } WriteLine($"{"Product count:",-25} {db.Products.Count(),10}"); WriteLine($"{"Discontinued product count:",-27} {db.Products .Count(product => product.Discontinued),8}"); WriteLine($"{"Highest product price:",-25} {db.Products 