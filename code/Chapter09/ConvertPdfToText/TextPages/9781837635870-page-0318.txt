Chapter 6 299 throw new ArgumentException(string.Format( "{0} must be married to {1} to procreate with them.", arg0: p1.Name, arg1: p2.Name)); } Person baby = new() { Name = $"Baby of {p1.Name} and {p2.Name}", Born = DateTimeOffset.Now }; p1.Children.Add(baby); p2.Children.Add(baby); return baby; } // Instance method to "multiply". public Person ProcreateWith(Person partner) { return Procreate(this, partner); } Note the following: • In the static method named Procreate, the Person objects that will procreate are passed as parameters named p1 and p2. Person class named baby is created with a name composed of a combination of the two • A new people who have procreated. This could be changed later by setting the returned baby variable’s Name property. Although we could add a third parameter to the Procreate method for the baby name, we will define a binary operator later, and they cannot have third parameters, so for consistency, we will just return the baby reference and let the calling code set the name of it. The baby object is added to the Children collection of both parents and then returned. Classes • are reference types, meaning a reference to the baby object stored in memory is added, not a clone of the baby object. You will learn the difference between reference types and value types later in Chapter 6, Implementing Interfaces and Inheriting Classes. ProcreateWith, the Person object to procreate with is passed • In the instance method named as a parameter named partner, and that, along with this, is passed to the static Procreate method to reuse the method implementation. this is a keyword that references the current instance of the class. It is a convention to use a different method name for related static and instance methods, for example, Compare(x, y) for the static method name and x.CompareTo(y) for the instance method name. 