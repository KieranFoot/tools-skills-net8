Chapter 13 619 Good Practice: Add gRPC JSON transcoding support to all your gRPC services hosted in ASP.NET Core. This provides the best of both worlds. Clients that cannot use gRPC natively can call the Web API. Clients that can use gRPC natively can call it directly. Practicing and exploring Test your knowledge and understanding by answering some questions, getting some hands-on practice, and exploring this chapter’s topics with deeper research. Exercise 13.1 – Test your knowledge Answer the following questions: 1. What are three benefits of gRPC that make it a good choice for implementing services? 2. How are contracts defined in gRPC? Which of the following .NET types require extensions to be imported: int, double, or DateTime? 3. 4. Why should you set a deadline when calling a gRPC method? What are the benefits of enabling gRPC JSON transcoding to a gRPC service hosted in ASP. 5. NET Core? Exercise 13.2 – Compare gRPC services with HTTP APIs Review the article found at the following link: https://learn.microsoft.com/en-us/aspnet/core/grpc/comparison Exercise 13.3 – Explore topics Use the links on the following page to learn more details about the topics covered in this chapter: https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter- 13---building-efficient-microservices-using-grpc Summary In this chapter, you: • Learned about some concepts of gRPC services, how they work, and their benefits. • Implemented a simple gRPC service. • Implemented a gRPC service that uses an EF Core model that cannot yet use AOT publish. SqlClient libraries that can use AOT publish and are • Implemented a gRPC service that uses therefore smaller and faster. • Learned how to set deadlines and read metadata sent as headers and trailers. 