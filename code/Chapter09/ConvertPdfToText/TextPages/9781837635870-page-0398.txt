Chapter 7 379 An alternative to manually creating two class libraries is to create one that supports multi-targeting. If you would like me to add a section about multi-targeting to the next edition, please let me know. You can read about multi-targeting here: https://learn.microsoft.com/en-us/dotnet/standard/ . library-guidance/cross-platform-targeting#multi-targeting Controlling the .NET SDK By default, executing dotnet commands uses the highest version installed .NET SDK. There may be times when you want to control which SDK is used. For example, once .NET 9 becomes available in preview, starting in February 2024, or the final ver- sion becomes available in November 2024, you might install it. But you would probably want your experience to match the book steps, which use the .NET 8 SDK. But once you install a .NET 9 SDK, it will be used by default. You can control the .NET SDK used by default by using a global.json file, which contains the version dotnet command searches the current folder and then each ancestor folder in turn for a to use. The global.json file to see if it should use a different .NET SDK version. You do not need to complete the following steps, but if you want to try and do not already have .NET 6 SDK installed, then you can install it from the following link: https://dotnet.microsoft.com/download/dotnet/6.0 1. Create a subdirectory/folder in the Chapter07 folder named ControlSDK. 2. On Windows, start Command Prompt or Windows Terminal. On macOS, start Terminal. If you are using Visual Studio Code, then you can use the integrated terminal. ControlSDK folder, at the command prompt or terminal, enter a command to list the 3. In the installed .NET SDKs, as shown in the following command: dotnet --list-sdks 4. Note the results and the version number of the latest .NET 6 SDK installed, as shown highlighted in the following output: 5.0.214 [C:\Program Files\dotnet\sdk] 6.0.314 [C:\Program Files\dotnet\sdk] 7.0.304 [C:\Program Files\dotnet\sdk] 8.0.100 [C:\Program Files\dotnet\sdk] 5. Create a global.json file that forces the use of the latest .NET Core 6.0 SDK that you have installed (which might be later than mine), as shown in the following command: dotnet new globaljson --sdk-version 6.0.314 6. Note the result, as shown in the following output: The template "global.json file" was created successfully. 