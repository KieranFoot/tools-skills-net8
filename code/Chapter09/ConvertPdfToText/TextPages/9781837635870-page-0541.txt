Working with Data Using Entity Framework Core 522 9. In the table editor window, click the Data tab, and you will see 77 products, as shown in Figure 10.5: Figure 10.5: The Data tab showing the 77 rows in the Products table 10. In the Database window, right-click Northwind and select Disconnect from the database. 11. Quit SQLiteStudio. Using the lightweight ADO.NET database providers Before Entity Framework, there was ADO.NET. Compared to EF, this is a simpler and more efficient API for working with databases. It provides abstract classes like DbConnection, DbCommand, and DbReader, and provider-specific implementations of them like SqlConnection and SqlCommand. In this chapter, if you choose to use SQL Server, then you should use the SqlConnectionStringBuilder class to help write a valid connection string. This is because it has properties for all possible parts of a database connection string that you set individually and then it returns the complete string. You should also get sensitive secrets like passwords from an environment variable or a secret management system instead of writing them in your source code. For SQLite, the connection string is so simple you do not need to use the SqliteConnectionStringBuilder class. The EF Core database providers for SQLite and SQL Server are built on top of the ADO.NET libraries, so EF Core is always inherently slower than ADO.NET. Furthermore, ADO.NET can be used independently for better performance because the EF Core database providers are “closer to the metal.” If you want to use native ahead-of-time (AOT) publishing, be aware that EF Core does not yet support it. This means you can only use the ADO.NET libraries if you plan to compile to native code. The EF Core team is investigating how they can support native AOT, but it is challenging so it is unlikely to happen with EF Core 8 this year. Hopefully, it will happen for EF Core 9 in 2024 or EF Core 10 in 2025. Apart from SqlConnectionStringBuilder, this book does not cover using the ADO.NET library, but I do cover examples of how to publish native AOT minimal API web services using the ADO.NET for SQL Server library in the companion book, Apps and Services with .NET 8. You can learn more about the ADO.NET for SQLite library at the following link: https://learn.microsoft.com/en-us/dotnet/standard/data/sqlite/ 