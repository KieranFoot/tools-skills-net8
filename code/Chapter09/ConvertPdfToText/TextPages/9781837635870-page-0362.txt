Chapter 6 343 Sometimes, you want to either assign a variable to a result or use an alternative value, such as 3, if the variable is null. You do this using the null-coalescing operator, ??, as shown in the following code: // Result will be 25 if authorName?.Length is null. authorNameLength = authorName?.Length ?? 25; Checking for null in method parameters Even if you enable NRTs, when defining methods with parameters, it is good practice to check for null values. In earlier versions of C#, you would have to write if statements to check for null parameter values and then throw an ArgumentNullException for any parameter that is null, as shown in the following code: public void Hire(Person manager, Person employee) { if (manager is null) { throw new ArgumentNullException(paramName: nameof(manager)); } if (employee is null) { throw new ArgumentNullException(paramName: nameof(employee)); } ... } C# 10 introduced a convenience method to throw an exception if an argument is null, as shown in the following code: public void Hire(Person manager, Person employee) { ArgumentNullException.ThrowIfNull(manager); ArgumentNullException.ThrowIfNull(employee); ... } C# 11 previews proposed and introduced a new !! operator that does this for you, as shown in the following code: public void Hire(Person manager!!, Person employee!!) { ... } 