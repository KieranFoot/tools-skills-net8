Building Websites Using ASP.NET Core Razor Pages 668 Now that you have seen how to set up a basic website with support for static files like HTML web pages and CSS stylesheets, letâ€™s make it more interesting by adding support for dynamic web pages. The simplest technology for dynamic web pages is ASP.NET Core Razor Pages. Exploring ASP.NET Core Razor Pages ASP.NET Core Razor Pages allow a developer to easily mix C# code statements with HTML markup to make the generated web page dynamic. That is why Razor Pages use the .cshtml file extension. By convention, ASP.NET Core looks for Razor Pages in a folder named Pages. Enabling Razor Pages You will now copy and change the static HTML page into a dynamic Razor Page, and then add and enable the Razor Pages service: 1. In the Northwind.Web project folder, create a folder named Pages. index.html file into the Pages folder. (In Visual Studio 2022 or JetBrains Rider, hold 2. Copy the down Ctrl while dragging and dropping.) For the file in the Pages folder, rename the file extension for index.html from .html to .cshtml. 3. 4. In the Pages folder, in index.cshtml, add the @page directive to the top of the file. index.cshtml, remove the <h2> element that says that this is a static HTML page. 5. In Program.cs, after the statement that creates the builder, add a statement to add ASP.NET 6. In Core Razor Pages and its related services, such as model binding, authorization, anti-forgery, views, and tag helpers, and optionally define a #region, as shown in the following code: #region Configure the web server host and services. var builder = WebApplication.CreateBuilder(args); builder.Services.AddRazorPages(); var app = builder.Build(); #endregion 7. In Program.cs, before the statement that maps an HTTP GET request for the path /hello, add MapRazorPages method, as shown highlighted in the following code: a statement to call the app.MapRazorPages(); app.MapGet("/", () => $"Environment is {app.Environment.EnvironmentName}"); 