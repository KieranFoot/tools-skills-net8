Chapter 7 281 WriteLine($"Number decimal separator: {globalization .NumberFormat.NumberDecimalSeparator}"); RegionInfo region = new(globalization.LCID); WriteLine($"Currency symbol: {region.CurrencySymbol}"); WriteLine($"Currency name: {region.CurrencyNativeName} ({ region.CurrencyEnglishName})"); WriteLine($"IsMetric: {region.IsMetric}"); WriteLine(); ForegroundColor = previousColor; } } 3. In Program.cs, delete the existing statements, and add statements to set the output encoding of the console to support Unicode. Then, output information about the globalization and local- ization cultures. Finally, prompt the user to enter a new culture code and show how that affects the formatting of common values, such as dates and currency, as shown in the following code: // To enable special characters like â‚¬. OutputEncoding = System.Text.Encoding.UTF8; OutputCultures("Current culture"); WriteLine("Example ISO culture codes:"); string[] cultureCodes = { "da-DK", "en-GB", "en-US", "fa-IR", "fr-CA", "fr-FR", "he-IL", "pl-PL", "sl-SI" }; foreach (string code in cultureCodes) { CultureInfo culture = CultureInfo.GetCultureInfo(code); WriteLine($" {culture.Name}: {culture.EnglishName} / { culture.NativeName}"); } 