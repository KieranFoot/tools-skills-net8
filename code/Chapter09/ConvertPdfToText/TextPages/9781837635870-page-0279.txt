Building Your Own Types with Object-Oriented Programming 260 3. Run the PeopleApp project and view the result: Bob Smith says 'Hello!' Bob Smith says 'Hello, Emily!' When typing a statement that calls a method, IntelliSense shows a tooltip with the name, the type of any parameters, and the return type of the method. Overloading methods Instead of having two different method names, we could give both methods the same name. This is allowed because the methods each have a different signature. A method signature is a list of parameter types that can be passed when calling the method. Overloaded methods must differ in their list of parameters types. Two overloaded methods cannot have the same list of parameters types and differ only in their return types. Letâ€™s code an example: 1. In Person.cs, change the name of the SayHelloTo method to SayHello. Program.cs, change the method call to use the SayHello method, and note that the quick 2. In info for the method tells you that it has an additional overload, 1 of 2, as well as 2 of 2, in Visual Studio 2022, although other code editors may be different, as shown in Figure 5.3: Figure 5.3: An IntelliSense tooltip for an overloaded method Good Practice: Use overloaded methods to simplify your class by making it appear to have fewer methods. Passing optional parameters Another way to simplify methods is to make parameters optional. You make a parameter optional by assigning a default value inside the method parameter list. Optional parameters must always come last in the list of parameters. 