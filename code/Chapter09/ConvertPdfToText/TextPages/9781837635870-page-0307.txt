Building Your Own Types with Object-Oriented Programming 288 // the constructor and the rest of the class. } } With class primary constructors, you combine both into a more succinct syntax, as shown in the following code: public class Headset(string manufacturer, string productName); Let’s see an example: 1. In the PacktLibraryModern project, add a class file named Headset.cs. 2. Modify the code file contents to give the class two parameters for manufacturer and product name respectively, as shown in the following code: namespace Packt.Shared; public class Headset(string manufacturer, string productName); 3. In Program.cs, add statements to instantiate a headset, as shown in the following code: Headset vp = new("Apple", "Vision Pro"); WriteLine($"{vp.ProductName} is made by {vp.Manufacturer}."); One of the differences between a record and a class type with a primary con- structor is that its parameters don’t become public properties automatically, so you will see CS1061 compiler errors. Neither ProductName nor productName are accessible outside the class. 4. In Headset.cs, add statements to define two properties and set them using the parameters passed to the primary constructor, as highlighted in the following code: namespace Packt.Shared; public class Headset(string manufacturer, string productName) { public string Manufacturer { get; set; } = manufacturer; public string ProductName { get; set; } = productName; } 5. Run the PeopleApp project and view the results, as shown in the following output: Vision Pro is made by Apple. 