Chapter 13 599 info: System.Net.Http.HttpClient.Shipper.LogicalHandler[100] Start processing HTTP request POST https://localhost:5131/shipper. Shipper/GetShipper info: System.Net.Http.HttpClient.Shipper.ClientHandler[100] Sending HTTP request POST https://localhost:5131/shipper.Shipper/ GetShipper warn: Grpc.Net.Client.Internal.GrpcCall[7] gRPC call deadline exceeded. info: Grpc.Net.Client.Internal.GrpcCall[3] Call failed with gRPC error status. Status code: 'DeadlineExceeded', Message: ''. 12. Close the browser and shut down the web servers. ShipperService.cs, comment out the statement that causes a five-second delay, as shown 13. In in the following code: // await Task.Delay(TimeSpan.FromSeconds(5)); Good Practice: The default is no deadline. Always set a deadline in the client call. In your service implementation, get the deadline and use it to automatically abandon the work if it is exceeded. Pass the cancellation token to any asynchronous calls so that work completes quickly on the server and frees up resources. Handling dates, times, and decimal numbers You might have noted that there are no date/time types built into gRPC. To store these values, you must use well-known type extensions, for example, google.protobuf.Timestamp (equivalent to DateTimeOffset) and google.protobuf.Duration (equivalent to TimeSpan). To use them as field types in a message, they must be imported, as shown in the following code: syntax = "proto3"; import "google/protobuf/duration.proto"; import "google/protobuf/timestamp.proto"; message Employee { int32 employeeId = 1; google.protobuf.Timestamp birth_date = 2; google.protobuf.Duration earned_vacation_time = 3; ... } 