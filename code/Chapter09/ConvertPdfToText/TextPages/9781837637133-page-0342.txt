Chapter 8 309 • MapPatch: Map a route to a PATCH request to update an entity. MapDelete: Map a route to a DELETE request to delete an entity. • MapMethods: Map a route to any other HTTP method or methods, for example, CONNECT or HEAD. • For example, you might want to map an HTTP GET request for the relative path api/customers to a delegate defined by a lambda expression or a function that returns a JSON document containing a list of customers, and equivalent mappings to insert and delete, as shown in the following code: app.MapGet("api/customers", GetCustomers); app.MapPost("api/customers", InsertCustomer); app.MapDelete("api/customers/{id}", DeleteCustomer); You might want to map an HTTP CONNECT request for the relative path api/customers to a lambda statement block, as shown in the following code: app.MapMethods("api/customers", new[] { "CONNECT" }, () => { // Do something. }); If you have multiple endpoints that share a common relative path, then you can define a route group. The MapGroup method was introduced in .NET 7: RouteGroupBuilder group = app.MapGroup("api/customers") group.MapGet("/", GetCustomers) .MapGet("/{id}", GetCustomerById) .MapPost("/", InsertCustomer) .MapDelete("/{id}", DeleteCustomer); More Information: You can learn more about mapping routes at the following link: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/ route-handlers. Understanding parameter mapping The delegate can have parameters defined that can be set automatically. Although most mappings can be configured without explicitly being specified, you can optionally use attributes to define where ASP.NET Core Minimal APIs should set the parameter values from: • [FromServices]: The parameter will be set from the registered dependency services. [FromRoute]: The parameter will be set from a matching named route segment. • [FromQuery]: The parameter will be set from a matching named query string parameter. • [FromBody]: The parameter will be set from the body of the HTTP request. • 