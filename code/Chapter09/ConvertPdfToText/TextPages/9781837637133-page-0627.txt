Building Efficient Microservices Using gRPC 594 11. Note the message about generating native code and trim warnings for packages like Microsoft. Data.SqlClient, as shown in the following partial output: Generating native code ... C:\Users\markj\.nuget\packages\microsoft.data.sqlclient\5.1.1\runtimes\ win\lib\net6.0\Microsoft.Data.SqlClient.dll : warning IL2104: Assembly 'Microsoft .Data.SqlClient' produced trim warnings. For more information see https://aka.ms/dotnet-illink/libraries [C:\apps-services-net8\Chapter13\ Northwind.Grpc.Service\Northwind.Grpc.Service.csproj] ... 12. Start File Explorer and open the bin\Release\net8.0\win-x64\publish folder and note the EXE file is about 45 MB. This and the Microsoft.Data.SqlClient.SNI.dll file are the only files that need to be deployed onto another Windows computer for the web service to work. The appsettings.json files are only needed to override configuration if needed. The PDB files are only needed if debugging and, anyway, two of them are only because we left the EF Core code in the project for reference to make it easier to switch back to non-AOT publishing. bin\Release\net8.0\win-x64\publish folder at the command prompt or terminal. 13. Open the At the command prompt or terminal, run Northwind.Grpc.Service.exe and explicitly specify 14. the URL with the port number to use, as shown in the following command: Northwind.Grpc.Service.exe --urls "https://localhost:5131" The launchSettings.json file is only used by code editors like Visual Studio 2022 so the ports specified there are ignored and not deployed with the service in production. 15. Start the Northwind.Grpc.Client.Mvc project. 16. Note the web page shows the shipper with an ID of 1 and that you can search for the other shippers. 17. Close the browser and shut down the web servers. More Information: You can learn more about gRPC and native AOT at the following link: https://learn.microsoft.com/en-us/aspnet/core/grpc/native-aot. 