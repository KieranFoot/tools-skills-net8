Building Your Own Types with Object-Oriented Programming 252 2. To get the value of a constant field, you must write the name of the class, not the name of an instance of the class. In Program.cs, add a statement to write Bob’s name and species to the console, as shown in the following code: // Constant fields are accessible via the type. WriteLine($"{bob.Name} is a {Person.Species}."); 3. Run the PeopleApp project and view the result, as shown in the following output: Bob Smith is a Homo Sapiens. Examples of const fields in Microsoft types include System.Int32.MaxValue and System.Math. PI because neither value will ever change, as you can see in Figure 5.2: Figure 5.2: Examples of constants in System.Math class Good Practice: Constants are not always the best choice for two important reasons: the value must be known at compile time, and it must be expressible as a literal string, Boolean, or number value. Every reference to the const field is replaced with the literal value at compile time, which will, therefore, not be reflected if the value changes in a future version and you do not recompile any assemblies that reference it to get the new value. Making a field read-only Often, a better choice for fields that should not change is to mark them as read-only: 1. In Person.cs, add a statement to declare an instance read-only field to store a person’s home planet, as shown in the following code: // Read-only fields: Values that can be set at runtime. public readonly string HomePlanet = "Earth"; 2. In Program.cs, add a statement to write Bob’s name and home planet to the console, as shown in the following code: // Read-only fields are accessible via the variable. WriteLine($"{bob.Name} was born on {bob.HomePlanet}."); 