Caching, Queuing, and Resilient Background Services 392 To attach the policy to an HTTP client, call the AddPolicyHandler extension method after defining the factory. You will see how to do this in practice later in this section. Adding random faults to the web service First, let’s add random faults to the web service: 1. In the Northwind.WebApi.Service project, in ProductsController.cs, in the Get action meth- od that has a name parameter, add statements to randomly throw an exception two-thirds of the time, as highlighted in the following code: // GET api/products/cha [HttpGet("{name}")] public IEnumerable<Product> Get(string name) { // Works correctly 1 out of 3 times. if (Random.Shared.Next(1, 4) == 1) { return _db.Products.Where(p => p.ProductName.Contains(name)); } // Throws an exception at all other times. throw new Exception("Randomized fault."); } 2. Build the project. Building an MVC project to call the faulty web service Next, let’s create an ASP.NET Core MVC client that calls the randomly faulty web service endpoint. Initially, it will just receive the exception if the web service throws an exception. Later, we will add transient fault handling using Polly: 1. Use your preferred code editor to add a new project, as defined in the following list: • Project template: ASP.NET Core Web App (Model-View-Controller) / mvc • Solution file and folder: Chapter09 • Project file and folder: Northwind.WebApi.Client.Mvc • Other Visual Studio 2022 options: • Authentication Type: None. • Configure for HTTPS: Selected. • Enable Docker: Cleared. • Do not use top-level statements: Cleared. 