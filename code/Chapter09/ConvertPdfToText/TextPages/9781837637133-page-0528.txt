Chapter 11 495 9. In the console app, press Enter to stop it from listening. 10. Close Chrome and shut down the web server. Streaming data using SignalR So far, we have seen how SignalR can broadcast structured messages to one or more clients. This works well with data that is relatively small and structured and exists completely at a point in time. But what about data that comes in parts over time? Streams can be used for these scenarios. SignalR supports both service-to-client (downloading data from a stream) and client-to-service (uploading data to a stream). To enable download streaming, a hub method must return IAsyncEnumerable<T> (only supported by ChannelReader<T>. C# 8 or later) or To enable upload streaming, a hub method must accept a parameter of type IAsyncEnumerable<T> (only supported by C# 8 or later) or ChannelReader<T>. Defining a hub for streaming Letâ€™s add some streaming methods to see how they work in action: 1. In the Northwind.Common project, add a new file named StockPrice.cs and modify its content to define a record for stock price data, as shown in the following code: namespace Northwind.SignalR.Streams; public record StockPrice(string Stock, double Price); 2. Build the Northwind.SignalR.Service.Client.Mvc project to update its referenced projects. In the Northwind.SignalR.Service.Client.Mvc project, add a new class named StockPriceHub. 3. cs, and modify its contents to define a hub with two streaming methods, as shown in the fol- lowing code: using Microsoft.AspNetCore.SignalR; // To use Hub. using System.Runtime.CompilerServices; // To use [EnumeratorCancellation]. using Northwind.SignalR.Streams; // To use StockPrice. namespace Northwind.SignalR.Service.Hubs; public class StockPriceHub : Hub { public async IAsyncEnumerable<StockPrice> GetStockPriceUpdates( string stock, [EnumeratorCancellation] CancellationToken cancellationToken) { 