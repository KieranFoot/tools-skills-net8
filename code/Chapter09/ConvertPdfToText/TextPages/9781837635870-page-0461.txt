Working with Common .NET Types 442 Letâ€™s explore lists: 1. Use your preferred code editor to add a new Console App / console project named WorkingWithCollections to the Chapter08 solution. Program.Helpers.cs. 2. Add a new class file named In Program.Helpers.cs, define a partial Program class with a generic method to output a 3. collection of T values with a title, as shown in the following code: partial class Program { private static void OutputCollection<T>( string title, IEnumerable<T> collection) { WriteLine($"{title}:"); foreach (T item in collection) { WriteLine($" {item}"); } } } 4. In Program.cs, delete the existing statements and then add some statements to illustrate some of the common ways of defining and working with lists, as shown in the following code: // Simple syntax for creating a list and adding three items. List<string> cities = new(); cities.Add("London"); cities.Add("Paris"); cities.Add("Milan"); /* Alternative syntax that is converted by the compiler into the three Add method calls above. List<string> cities = new() { "London", "Paris", "Milan" }; */ /* Alternative syntax that passes an array of string values to AddRange method. List<string> cities = new(); cities.AddRange(new[] { "London", "Paris", "Milan" }); */ OutputCollection("Initial list", cities); WriteLine($"The first city is {cities[0]}."); WriteLine($"The last city is {cities[cities.Count - 1]}."); 