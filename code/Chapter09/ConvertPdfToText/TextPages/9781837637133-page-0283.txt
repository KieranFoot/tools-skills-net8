Using Popular Third-Party Libraries 250 new() { CategoryId = 2, CategoryName = "Condiments"}, new() { CategoryId = 3, CategoryName = "Confections"}, new() { CategoryId = 4, CategoryName = "Dairy Products"}, new() { CategoryId = 5, CategoryName = "Grains/Cereals"}, new() { CategoryId = 6, CategoryName = "Meat/Poultry"}, new() { CategoryId = 7, CategoryName = "Produce"}, new() { CategoryId = 8, CategoryName = "Seafood"} } }; CatalogDocument document = new(model); document.GeneratePdf(filename); WriteLine("PDF catalog has been created: {0}", Path.Combine(Environment.CurrentDirectory, filename)); try { if (OperatingSystem.IsWindows()) { System.Diagnostics.Process.Start("explorer.exe", filename); } else { WriteLine("Open the file manually."); } } catch (Exception ex) { WriteLine($"{ex.GetType()} says {ex.Message}"); } The Process class and its Start method should also be able to start processes on Mac and Linux, but getting the paths right can be tricky, so Iâ€™ve left that as an optional exercise for the reader. You can learn more about the Process class and its Start method at the following link: https://learn.microsoft.com/en-us/ dotnet/api/system.diagnostics.process.start. 7. Run the console app and note the PDF file generated, as shown in Figure 6.4: 