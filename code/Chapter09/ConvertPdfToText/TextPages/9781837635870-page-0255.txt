Building Your Own Types with Object-Oriented Programming 236 Understanding type access modifiers Note that the C# keyword public is applied before class. This keyword is an access modifier, and it allows for any other code to access this class even outside this class library. If you do not explicitly apply the public keyword, then it will only be accessible within the assembly that defined it. This is because the implicit access modifier for a class is internal. We need this class to be accessible outside the assembly, so we must make sure it is public. If you have nested classes, meaning a class defined in another class, then the inner class could have the private access modifier, which would mean it is not accessible outside its parent class. Introduced with .NET 7, the file access modifier applied to a type means that type can only be used within its code file. This would only be useful if you define multiple classes in the same code file, which is rarely good practice but is used with source generators. More Information: You can learn more about the file access modifier at the following link: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/ keywords/file. Good Practice: The two most common access modifiers for a class are public and internal (the default access modifier for a class if not specified). Always explicitly specify the access modifier for a class to make it clear what it is. Other access modifiers include private and file, but they are rarely used. Understanding members The Person type does not yet have any members encapsulated within it. We will create some over the following pages. Members can be fields, methods, or specialized versions of both. You’ll find a description of them here: • Fields are used to store data. You can think of fields as variables that belong to a type. There are also three specialized categories of field, as shown in the following bullets: • Constant: The data never changes. The compiler literally copies the data into any code that reads it. For example, byte.MaxValue is always 255. • Read-only: The data cannot change after the class is instantiated, but the data can be calculated or loaded from an external source at the time of instantiation. For example, DateTime.UnixEpoch is January 1, 1970. • Event: The data references one or more methods that you want to execute when some- thing happens, such as clicking on a button or responding to a request from some other code. Events will be covered in Chapter 6, Implementing Interfaces and Inheriting Classes. For example, Console.CancelKeyPress happens when Ctrl+C or Ctrl+Break are pressed in a console app. 