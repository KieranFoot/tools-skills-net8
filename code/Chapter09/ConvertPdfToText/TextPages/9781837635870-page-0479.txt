Working with Common .NET Types 460 Range r5 = 3..; // From index 3 to last index. Range r6 = Range.EndAt(3); // From index 0 to index 3. Range r7 = ..3; // From index 0 to index 3. Extension methods have been added to string values (which internally use an array of char), int arrays, and spans to make ranges easier to work with. These extension methods accept a range as a parameter and return a Span<T>. This makes them very memory-efficient. Using indexes, ranges, and spans Let’s explore using indexes and ranges to return spans: 1. Use your preferred code editor to add a new Console App / console project named WorkingWithRanges to the Chapter08 solution. Program.cs, delete the existing statements and then add statements to compare using the 2. In string type’s Substring method with ranges to extract parts of someone’s name, as shown in the following code: string name = "Samantha Jones"; // Getting the lengths of the first and last names. int lengthOfFirst = name.IndexOf(' '); int lengthOfLast = name.Length - lengthOfFirst - 1; // Using Substring. string firstName = name.Substring( startIndex: 0, length: lengthOfFirst); string lastName = name.Substring( startIndex: name.Length - lengthOfLast, length: lengthOfLast); WriteLine($"First: {firstName}, Last: {lastName}"); // Using spans. ReadOnlySpan<char> nameAsSpan = name.AsSpan(); ReadOnlySpan<char> firstNameSpan = nameAsSpan[0..lengthOfFirst]; ReadOnlySpan<char> lastNameSpan = nameAsSpan[^lengthOfLast..]; WriteLine($"First: {firstNameSpan}, Last: {lastNameSpan}"); 