Building and Securing Web Services Using Minimal APIs 332 10. Also note the output shows that the web service did execute the database query and return the products in a JSON document response to the browser, as shown in the following output: info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[2] Response: StatusCode: 200 Content-Type: application/json; charset=utf-8 info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[4] ResponseBody: [{"productId":12,"productName": "Queso Manchego La Pastora","supplierId":5,"categoryId":4, "quantityPerUnit":"10 - 500 g pkgs.","unitPrice":38.0000, "unitsInStock":86,"unitsOnOrder":0,"reorderLevel":0, "discontinued":false,"category":null,"supplier":null, "orderDetails":[]}, {"productId":51,"productName":"Manjimup Dried Apples", "supplierId":24,"categoryId":7, "quantityPerUnit":"50 - 300 g pkgs.","unitPrice":53.0000, "unitsInStock":20,"unitsOnOrder":0,"reorderLevel":10, "discontinued":false,"category":null,"supplier":null, "orderDetails":[]}] Although the browser receives a response containing the data requested, it is the browser that enforces the same origin policy by refusing to reveal the HTTP response to the JavaScript. The web service is not “secured” by CORS. 11. Close the browser(s) and shut down the web servers. Creating a .NET client Next, let’s create a .NET client to the web service to see that the same origin policy does not apply to non-web browsers: 1. In the Northwind.WebApi.Client.Mvc project, add a reference to the entity models project so Product class, as shown in the following markup: that we can use the <ItemGroup> <ProjectReference Include="..\..\Chapter03\Northwind.Common. EntityModels .SqlServer\Northwind.Common.EntityModels.SqlServer.csproj" /> </ItemGroup> 2. Build the Northwind.WebApi.Client.Mvc project at the command prompt or terminal by entering the following command: dotnet build. 