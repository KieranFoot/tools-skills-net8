Chapter 6 209 <Using Include="System.Console" Static="true" /> </ItemGroup> <ItemGroup> <PackageReference Include="SixLabors.ImageSharp" Version="3.0.2" /> </ItemGroup> ... To save space, in other steps like this in this chapter, I will not show the markup to treat warnings as errors or to globally and statically import the System.Console class. I will only show the ItemGroup and PackageReference for task-specific libraries. 5. Build the WorkingWithImages project. 6. If you are using Visual Studio 2022, then in Solution Explorer, toggle Show All Files. In the obj\Debug\net8.0 folder, open WorkingWithImages.GlobalUsings.g.cs, and note 7. that referencing the SixLabors.ImageSharp package adds three global namespace imports alongside the usual ones added by the .NET SDK, as shown in the following code: // <auto-generated/> global using global::SixLabors.ImageSharp; global using global::SixLabors.ImageSharp.PixelFormats; global using global::SixLabors.ImageSharp.Processing; ... If you reference older versions of SixLabors.ImageSharp like 2.0.0, then it does not do this so you must manually import those three namespaces in each code file. This feature is one reason why version 3.0 and later have a minimum requirement of .NET 6. 8. In Program.cs, delete the existing statements and then add statements to convert all the files in the images folder into grayscale thumbnails at one-tenth size, as shown in the following code: string imagesFolder = Path.Combine( Environment.CurrentDirectory, "images"); WriteLine($"I will look for images in the following folder:\ n{imagesFolder}"); WriteLine(); if (!Directory.Exists(imagesFolder)) { WriteLine(); WriteLine("Folder does not exist!"); 