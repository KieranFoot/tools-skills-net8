Chapter 7 269 public void TestDiscountDuringWorkdays() { // Arrange DiscountService service = new(); // Act decimal discount = service.GetDiscount(); // Assert Assert.Equal(0M, discount); } [Fact] public void TestDiscountDuringWeekends() { DiscountService service = new(); decimal discount = service.GetDiscount(); Assert.Equal(0.2M, discount); } } 9. Run the two tests, and note that only one can ever succeed at any one time. If you run the tests during workdays, the weekend test will fail. If you run the tests during the weekend, the workday test will fail! Now that youâ€™ve seen the problem, how can we solve it? The way Microsoft solves it is by each team that creates .NET libraries defining its own internal ISystemClock interface with, at a minimum, a property named UtcNow, and sometimes other members, along with implementations that typically use the built-in system clock but are all slightly different. A typical example is shown in the following code: using System; namespace Microsoft.Extensions.Internal { public interface ISystemClock { DateTimeOffset UtcNow { get; } } public class SystemClock 