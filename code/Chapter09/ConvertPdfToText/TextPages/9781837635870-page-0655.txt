Introducing Web Development Using ASP.NET Core 636 • The database provider: Microsoft.EntityFrameworkCore.Sqlite • The namespace: --namespace Northwind.EntityModels • To use data annotations as well as the Fluent API: --data-annotations Warning! dotnet-ef commands must be entered all on one line and in a folder that contains a project, or you will see the following error: No project was found. Change the current working directory or use the --project option. Remember that all command lines can be found at and copied from the following link: https://github. com/markjprice/cs12dotnet8/blob/main/docs/command-lines.md. If you use SQLite, then you will see warnings about incompatible type mappings be- tween the table columns and properties in the entity class models. For example, The column 'BirthDate' on table 'Employees' should map to a property of type 'DateOnly', but its values are in an incompatible format. Using a different type. This is due to SQLite using dynamic types. We will fix those issues in the next section. Creating a class library for a database context using SQLite You will now define a database context class library: 1. Add a new project to the solution, as defined in the following list: • Project template: Class Library / classlib • Project file and folder: Northwind.DataContext.Sqlite • Solution file and folder: PracticalApps 2. In the Northwind.DataContext.Sqlite project, statically and globally import the Console class, add a package reference to the EF Core data provider for SQLite, and add a project reference to the Northwind.EntityModels.Sqlite project, as shown in the following markup: <ItemGroup> <Using Include="System.Console" Static="true" /> </ItemGroup> <ItemGroup> <PackageReference Version="8.0.0" Include="Microsoft.EntityFrameworkCore.Sqlite" /> </ItemGroup> <ItemGroup> <ProjectReference Include="..\Northwind.EntityModels.Sqlite \Northwind.EntityModels.Sqlite.csproj" /> </ItemGroup> 