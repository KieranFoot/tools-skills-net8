Chapter 3 143 Row 0, Column 2: Gamma Row 1, Column 0: Anne Row 1, Column 1: Ben Row 1, Column 2: Charlie Row 1, Column 3: Doug Row 2, Column 0: Aardvark Row 2, Column 1: Bear List pattern matching with arrays Earlier in this chapter, you saw how an individual object supports pattern matching against its type and properties. Pattern matching also works with arrays and collections. Introduced with C# 11, list pattern matching works with any type that has a public Length or Count property and has an indexer using an int or System.Index parameter. You will learn about indexers in Chapter 5, Building Your Own Types with Object-Oriented Programming. When you define multiple list patterns in the same switch expression, you must order them so that the more specific one comes first, or the compiler will complain because a more general pattern will match all the more specific patterns too and make the more specific one unreachable. Table 3.3 shows examples of list pattern matching, assuming a list of int values: Example Description [] Matches an empty array or collection. [..] Matches an array or collection with any number of items, including zero, so [..] must come after [] if you need to switch on both. [_] Matches a list with any single item. [int item1] or Matches a list with any single item and can use the value in the return expression by referring to item1. [var item1] [7, 2] Matches exactly a list of two items with those values in that order. [_, _] Matches a list with any two items. [var item1, var Matches a list with any two items and can use the values in the return item2] expression by referring to item1 and item2. [_, _, _] Matches a list with any three items. [var item1, ..] Matches a list with one or more items. Can refer to the value of the first item in its return expression by referring to item1. [var firstItem, .., Matches a list with two or more items. Can refer to the value of the first and var lastItem] last item in its return expression by referring to firstItem and lastItem. [.., var lastItem] Matches a list with one or more items. Can refer to the value of the last item in its return expression by referring to lastItem. Table 3.3: Examples of list pattern matching 