Chapter 4 205 Good Practice: Any type that represents a file usually implements a buffer to improve performance. Instead of writing immediately to the file, data is written to an in-memory buffer, and only once the buffer is full will it be written in one chunk to the file. This behavior can be confusing while debugging because we do not immediately see the results! Enabling AutoFlush means the Flush method is called automatically after every write. This reduces performance, so you should only set it on during debugging and not in production. 2. At the bottom of Program.cs, add statements to flush and close any buffered trace listeners Debug and Trace, as shown in the following code: for // Close the text file (also flushes) and release resources. Debug.Close(); Trace.Close(); 3. Run the release configuration of the console app: • In Visual Studio Code, enter the following command in the TERMINAL window for the Instrumenting project and note that nothing will appear to have happened: dotnet run --configuration Release • In Visual Studio 2022, in the standard toolbar, select Release in the Solution Configu- #if DEBUG region are grayed out rations drop-down list, note that any statements in a to indicate they are not compiled, as shown in Figure 4.18, and then navigate to Debug | Start Without Debugging. Figure 4.18: Selecting the Release configuration in Visual Studio 4. On your desktop, open the file named log.txt and note that it contains the message Trace . says, I am watching! 