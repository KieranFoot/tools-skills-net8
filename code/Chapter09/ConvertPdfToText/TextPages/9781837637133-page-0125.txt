Building Entity Models for SQL Server Using EF Core 92 public string? Description { get; set; } [Column(TypeName = "image")] public byte[]? Picture { get; set; } [InverseProperty("Category")] public virtual ICollection<Product> Products { get; set; } = new List<Product>(); } Note the following: • It decorates the entity class with the [Index] attribute that was introduced in EF Core 5. This indicates properties that should have an index for its column in the table. In earlier versions, only the Fluent API was supported for defining indexes. Since we are working with an existing database, this attribute is not needed. But if we want to recreate a new empty Northwind database from our code, then this information will be used to create indexes in the Categories table. Categories but the dotnet-ef tool used the Human- • The table name in the database is izer third-party library to automatically singularize the class name to Category, which is a more natural name when creating a single entity. The entity class is declared using the partial keyword so that you can create a matching • partial class for adding additional code. This allows you to rerun the tool and regen- erate the entity class without losing that extra code you wrote in your partial class. CategoryId property is decorated with the [Key] attribute to explicitly indicate • The that it is the primary key for this entity although its name follows the primary key convention too. The Products property uses the [InverseProperty] attribute to define the foreign key • relationship to the Category property on the Product entity class. 8. Open ProductsAboveAveragePrice.cs and note that it represents a row returned by a database view rather than a table, so it is decorated with the [Keyless] attribute. NorthwindDb.cs and review the class, as shown in the following edited-for-space code: 9. Open using System; using System.Collections.Generic; using Microsoft.EntityFrameworkCore; namespace Northwind.Models; public partial class NorthwindDb : DbContext { public NorthwindDb() { 