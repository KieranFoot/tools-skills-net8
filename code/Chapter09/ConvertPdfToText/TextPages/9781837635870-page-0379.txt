Implementing Interfaces and Inheriting Classes 360 Now let’s highlight what is different about the more specialized types of classes: • A sealed class does not support inheritance. abstract class does not allow instantiation with new. • An record class uses value equality instead of reference equality. • A We can do the same for other types compared to a “normal” class: • A struct or record struct does not support inheritance, it uses value equality instead of reference equality, and its state is stored in stack memory. interface does not allow instantiation with new and supports multiple inheritance. • An Mutability and records A common misconception is that record types are immutable, meaning their instance property and field values cannot be changed after initialization. However, the mutability of a record type actually depends on how the record is defined. Let’s explore mutability: 1. In the PacktLibrary project, add a new class file named Mutability.cs. Mutability.cs, as shown in the following code, and note the following: 2. Modify namespace Packt.Shared; // A mutable record class. public record class C1 { public string? Name { get; set; } } // An immutable record class. public record class C2(string? Name); // A mutable record struct. public record struct S1 { public string? Name { get; set; } } // Another mutable record struct. public record struct S2(string? Name); // An immutable record struct. public readonly record struct S3(string? Name); 