Speaking C# 72 • Head and Engine might be fields or properties; they are nouns that belong to Animal and Car. Fido and Bob are variables; they are nouns for referring to a specific object. • There are tens of thousands of types available to C#, though have you noticed how I didn’t say, “There are tens of thousands of types in C#”? The difference is subtle but important. The language of C# only has a few keywords for types, such as string and int, and strictly speaking, C# doesn’t define any string that look like types are aliases, which represent types provided by types. Keywords such as the platform on which C# runs. It’s important to know that C# cannot exist alone; after all, it’s a language that runs on variants of .NET. In theory, someone could write a compiler for C# that uses a different platform, with different under- lying types. In practice, the platform for C# is .NET, which provides tens of thousands of types to C#, including System.Int32, which is the C# keyword alias int maps to, as well as many more complex System.Xml.Linq.XDocument. types, such as It’s worth taking note that the term type is often confused with class. Have you ever played the parlor game Twenty Questions, also known as Animal, Vegetable, or Mineral? In the game, everything can be categorized as an animal, vegetable, or mineral. In C#, every type can be categorized as a class, struct, enum, interface, or delegate. You will learn what these mean in Chapter 6, Implementing Interfaces and Inheriting Classes. As an example, the C# keyword string is a class, but int is a struct. So, it is best to use the term type to refer to both. Revealing the extent of the C# vocabulary We know that there are more than 100 keywords in C#, but how many types are there? Let’s write some code to find out how many types (and their methods) are available to C# in our simple console app. Don’t worry about exactly how this code works for now, but know that it uses a technique called reflection: 1. Comment out all the existing statements in Program.cs. System.Reflection namespace at the top of the Program.cs file 2. We’ll start by importing the so that we can use some of the types in that namespace like Assembly and TypeName, as shown in the following code: using System.Reflection; // To use Assembly, TypeName, and so on. Good Practice: We could use the implicit imports and global using features to import this namespace for all .cs files in this project, but since there is only one file, it is better to import the namespace in the one file in which it is needed. 3. Write statements to get the compiled console app and loop through all the types that it has access to, outputting the names and number of methods each has, as shown in the following code: // Get the assembly that is the entry point for this app. Assembly? myApp = Assembly.GetEntryAssembly(); 