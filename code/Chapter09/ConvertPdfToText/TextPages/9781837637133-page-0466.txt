Chapter 9 433 Exercise 9.4 – Replace Hangfire with Quartz.NET Quartz.NET is a similar library to Hangfire. Read the official documentation, and then create a proj- ect named Northwind.Background.Quartz that implements the same functionality as Northwind. Background.Hangfire: https://www.quartz-scheduler.net/ Exercise 9.5 – Review the Reliable Web App pattern The Reliable Web App (RWA) pattern is a set of best practices with prescriptive guidance that helps developers successfully migrate an on-premises web project to the cloud. It includes a reference implementation and shows how to make the most of Azure cloud services to modernize mission-crit- ical workloads in a reliable, secure, high-performance, cost-efficient manner using modern design, development, and operational practices: https://learn.microsoft.com/en-us/azure/architecture/web-apps/guides/reliable-web-app/ dotnet/plan-implementation A collection of videos about the RWA pattern for .NET are at the following link: https://www.youtube.com/playlist?list=PLI7iePan8aH54gIDJquV61dE3ENyaDi3Q Summary In this chapter, you learned: • About service architecture and how different parts of a system can affect performance. • How to cache data closer to the action, using in-memory and distributed caching. • How to control HTTP caching for clients and intermediaries. • How to implement fault tolerance using Polly. • How to implement queuing using RabbitMQ. How to implement long-running background services using BackgroundService and Hangfire. • In the next chapter, you will learn how to use Azure Functions to implement nano services, aka serverless services. 