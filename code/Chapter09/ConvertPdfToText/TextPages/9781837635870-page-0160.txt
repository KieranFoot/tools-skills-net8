Chapter 3 141 You must supply a value for every row and every column when it is instantiated, or you will get compile errors. If you need to indicate a missing string value, then use string.Empty. Or if you declare the array to be nullable string values by using string?[], then you can also use null for a missing value. If you cannot use the array initialization syntax, perhaps because you are loading values from a file or database, then you can separate the declaration of the array dimension and the allocation of memory from the assigning of values, as shown in the following code: // Alternative syntax for declaring and allocating memory // for a multi-dimensional array. string[,] grid2 = new string[3,4]; // Allocate memory. grid2[0, 0] = "Alpha"; // Assign values. grid2[0, 1] = "Beta"; // And so on. grid2[2, 3] = "Dog"; When declaring the size of the dimensions, you specify the length, not the upper bound. The expression new string[3,4] means the array can have 3 items in its first dimension (0) with an upper bound of 2, and the array can have 4 items in its second dimension (1) with an upper bound of 3. Working with jagged arrays If you need a multi-dimensional array but the number of items stored in each dimension is different, then you can define an array of arrays, aka a jagged array. We could visualize a jagged array as shown in Figure 3.3: Figure 3.3: Visualization of a jagged array 