Managing NoSQL Data Using Azure Cosmos DB 168 function callbackInsert(err, item, options) { if (err) throw err; getContext().getResponse().setBody(1); } } """ }); WriteLine("Status code: {0}, Request charge: {1} RUs.", response.StatusCode, response.RequestCharge); } } catch (HttpRequestException ex) { WriteLine($"Error: {ex.Message}"); WriteLine("Hint: If you are using the Azure Cosmos Emulator then please make sure it is running."); } catch (Exception ex) { WriteLine("Error: {0} says {1}", arg0: ex.GetType(), arg1: ex.Message); } } 3. In Program.cs, comment out all the existing statements, and add a statement to run the new method, as shown in the following code: await CreateInsertProductStoredProcedure(); 4. Run the console app and note the results, which should be the successful creation of the stored procedure, as shown in the following output: * * Creating the insertProduct stored procedure * Status code: Created, Request charge: 6.29 RUs. 5. In Program.Methods.cs, add statements to define a method to execute the stored procedure, as shown in the following code: static async Task ExecuteInsertProductStoredProcedure() { 