Chapter 9 419 await Task.Delay(3000, stoppingToken); } } } 4. Start the RabbitMQ container, as shown in the following command: docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.12-management 5. Wait for the messages to say it is ready for clients to connect on port 5672, as shown in the following output: 2023-06-12 08:50:16.591574+00:00 [info] <0.599.0> Ready to start client connection listeners 2023-06-12 08:50:16.593090+00:00 [info] <0.744.0> started TCP listener on [::]:5672 6. Leave the command prompt or terminal running. 7. If your database server is not running (for example, because you are hosting it in Docker, a virtual machine, or in the cloud), then make sure to start it. Start the Northwind.WebApi.Service project without debugging so that we can query for 8. products in the Northwind database. Northwind.WebApi.Client.Mvc project without debugging so that we can send mes- 9. Start the sages to the RabbitMQ queue. apples and a product 10. In the MVC website, click Send a message, and then enter a message of 1. ID of bananas and 2, and cherries and 3. 11. Repeat for Northwind.Background.Workers project without debugging, and note the three mes- 12. Start the sages are processed from the queue, as shown in the following output: info: Northwind.Background.Workers.QueueWorker[0] Queue product is waiting for messages. info: Northwind.Background.Workers.QueueWorker[0] Worker running at: 06/12/2023 09:58:59 +01:00 info: Microsoft.Hosting.Lifetime[0] Application started. Press Ctrl+C to shut down. info: Microsoft.Hosting.Lifetime[0] Hosting environment: Development info: Microsoft.Hosting.Lifetime[0] Content root path: C:\apps-services-net8\Chapter09\Northwind.Queue. Worker info: Northwind.Background.Workers.QueueWorker[0] 