Multitasking and Concurrency 200 await connection.CloseAsync(); } catch (Exception ex) { MessageBox.Show(ex.Message); } } EmployeesListBox.Items.Add( $"Async: {timer.ElapsedMilliseconds:N0}ms"); } Note the following: • Defining an async void method is generally bad practice because it is “fire and forget.” You will not be notified when it is completed and there is no way to cancel it because it does not return a Task or Task<T> that can be used to control it. WAITFOR DELAY command to simulate process- • The SQL statement uses the SQL Server ing that takes five seconds. It then selects three columns from the Employees table. The GetEmployeesSyncButton_Click event handler uses synchronous methods to open • a connection and fetch the employee rows. The GetEmployeesAsyncButton_Click event handler is marked as async and uses • asynchronous methods with the await keyword to open a connection and fetch the employee rows. Both event handlers use a stopwatch to record the number of milliseconds the operation • takes and add it to the list box. 10. Start the WPF app without debugging. 11. Click in the text box, enter some text, and note that the GUI is responsive. 12. Click the Get Employees Synchronously button. 13. Try to click in the text box, and note the GUI is not responsive. 14. Wait for at least five seconds until the list box is filled with employees. 15. Click in the text box, enter some text, and note the GUI is responsive again. 16. Click the Get Employees Asynchronously button. Click in the text box, enter some text, and note that the GUI is still responsive while it per- 17. forms the operation. Continue typing until the list box is filled with the employees, as shown in Figure 5.2: 