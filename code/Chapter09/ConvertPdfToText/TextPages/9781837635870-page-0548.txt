Chapter 10 529 ProductName = "Chai", UnitPrice = 8.99M }); Calls to HasData take effect either during a data migration executed by the command dotnet ef database update or when you call the Database.EnsureCreated method. Our model will map to an existing database that is already populated with data, so we will not need to use this technique in our code. Building EF Core models for the Northwind tables Now that you’ve learned about ways to define EF Core models, let’s build models to represent two of the tables in the Northwind database. For reuse, we will do this in a separate class library project. The two entity classes will refer to each other, so to avoid compiler errors, we will create the classes without any members first: 1. Use your preferred code editor to create a new project, as defined in the following list: • Project template: Class Library / classlib • Project file and folder: Northwind.EntityModels • Solution file and folder: Chapter10 2. In the Northwind.EntityModels project, delete the file named Class1.cs and then add two class files named Category.cs and Product.cs. Category.cs, define a class named Category, as shown in the following code: 3. In namespace Northwind.EntityModels; public class Category { } 4. In Product.cs, define a class named Product, as shown in the following code: namespace Northwind.EntityModels; public class Product { } 5. In the WorkingWithEFCore project, add a project reference to the Northwind.EntityModels project, as shown in the following markup: <ItemGroup> <ProjectReference Include="..\Northwind.EntityModels\ Northwind.EntityModels.csproj" /> </ItemGroup> 