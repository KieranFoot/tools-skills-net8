Building Web User Interfaces Using ASP.NET Core 628 Referencing an EF Core class library and registering a data context We will reference the EF Core model that you created in Chapter 3, Building Entity Models for SQL Server Using EF Core: 1. In the Northwind.Mvc.csproj project file, treat warnings as errors and add a project reference to the Northwind database context project, as shown in the following markup: <ItemGroup> <ProjectReference Include="..\..\Chapter03\Northwind.Common.DataContext .SqlServer\Northwind.Common.DataContext.SqlServer.csproj" /> </ItemGroup> The Include path must not have a line break. 2. At the command prompt or terminal, build the Northwind.Mvc project, as shown in the fol- lowing command: dotnet build. Program.cs, import the namespace to use the AddNorthwindContext extension method, as 3. In shown in the following code: using Northwind.EntityModels; // To use AddNorthwindContext method. 4. In the section that adds services to the container, add a statement that registers NorthwindContext as a service, as shown in the following code: builder.Services.AddNorthwindContext(); Defining web user interfaces with Razor views Let’s review how we can build the user interface of a web page in a modern ASP.NET Core MVC website. Understanding Razor views In MVC, the V stands for view. The responsibility of a view is to transform a model into HTML or other formats. There are multiple view engines that could be used to do this. The default view engine is called Razor, and it uses the @ symbol to indicate server-side code execution. Let’s review the home page view and how it uses a shared layout: 1. In the Views/Home folder, open the Index.cshtml file and note the block of C# code wrapped in @{ }. This will execute first and can be used to store data that needs to be passed into a shared layout file, like the title of the web page, as shown in the following code: 