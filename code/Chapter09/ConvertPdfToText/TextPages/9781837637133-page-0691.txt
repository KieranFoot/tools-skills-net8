Building Web User Interfaces Using ASP.NET Core 658 Output caching endpoints Letâ€™s see it in action with a really simple example of applying output caching to some endpoints to make sure it is working properly: 1. In the Northwind.Mvc project, in Program.cs, after the call to AddNorthwindContext, add a statement to add the output cache middleware and override the default expiration timespan to make it only 10 seconds, as shown in the following code: builder.Services.AddOutputCache(options => { options.DefaultExpirationTimeSpan = TimeSpan.FromSeconds(10); }); Good Practice: The default expiration time span is one minute. Think carefully about what the duration should be. 2. In Program.cs, before the call to map controller routes, add a statement to use output cache, as shown in the following code: app.UseOutputCache(); 3. In Program.cs, after the call to map Razor Pages, add statements to create two simple end- points that respond with plain text, one that is not cached and one that uses the output cache, as shown in the following code: app.MapGet("/notcached", () => DateTime.Now.ToString()); app.MapGet("/cached", () => DateTime.Now.ToString()).CacheOutput(); 4. In appsettings.Development.json, add a log level of Information for the output caching middleware, as shown highlighted in the following configuration: { "Logging": { "LogLevel": { "Default": "Information", "Microsoft.AspNetCore": "Warning", "Microsoft.AspNetCore.OutputCaching": "Information" } } } 5. Start the Northwind.Mvc website project and arrange the browser window and command prompt or terminal window so that you can see both. 