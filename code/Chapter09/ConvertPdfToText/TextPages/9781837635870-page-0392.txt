Chapter 7 373 Recent versions of code editors will often automatically add a namespace import statement to fix the problem I want you to see. Please delete the using statement that your code editor writes for you. 2. Build the project and note the compiler error message, as shown in the following output: CS0246 The type or namespace name 'XDocument' could not be found (are you missing a using directive or an assembly reference?) The XDocument type is not recognized because we have not told the compiler what the namespace of the type is. Although this project already has a reference to the assembly that contains the type, we also need to either prefix the type name with its namespace, for example, System.Xml.Linq.XDocument, or import the namespace. 3. Click inside the XDocument class name. Your code editor displays a light bulb, showing that it recognizes the type and can automatically fix the problem for you. using System.Xml.Linq; from the menu. 4. Click the light bulb, and select using statement to the top of the file. Once a namespace is This will import the namespace by adding a imported at the top of a code file, then all the types within the namespace are available for use in that code file by just typing their name, without the type name needing to be fully qualified by prefixing it with its namespace. I like to add a comment after importing a namespace to remind me why I need to import that name- space, as shown in the following code: using System.Xml.Linq; // To use XDocument. If you do not comment your namespaces, you or other developers will not know why they are imported and might delete them, breaking the code. Or they might never delete imported namespaces “just in case” they are needed, potentially cluttering the code unnecessarily. This is why most modern code editors have features to remove unused namespaces. This technique also subconsciously trains you, while you are learning, to remember which namespace you need to import to use a particular type or extension method. Relating C# keywords to .NET types One of the common questions I get from new C# programmers is, “What is the difference between string with a lowercase s and String with an uppercase S?” The short answer is easy: none. The long answer is that all C# keywords that represent types like string or int are aliases for a .NET type in a class library assembly. When you use the string keyword, the compiler recognizes it as a System.String type. When you use the int type, the compiler recognizes it as a System.Int32 type. 