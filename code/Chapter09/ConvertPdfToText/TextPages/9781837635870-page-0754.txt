Chapter 14 735 W3CLogger is like HTTP logging so I will not cover details of how to use it in this book. You can learn more about W3CLogger at the following link: https://learn.microsoft. com/en-us/aspnet/core/fundamentals/w3c-logger/. In ASP.NET Core 7 or later, you can specify that you want to log additional request headers when using W3CLogger. Call the AdditionalRequestHeaders method and pass the name of the header you want to log, as shown in the following code: services.AddW3CLogging(options => { options.AdditionalRequestHeaders.Add("x-forwarded-for"); options.AdditionalRequestHeaders.Add("x-client-ssl-protocol"); }); You are now ready to build applications that consume your web service. Consuming web services using HTTP clients Now that we have built and tested our Northwind service, we will learn how to call it from any .NET app using the HttpClient class and its factory. Understanding HttpClient The easiest way to consume a web service is to use the HttpClient class. However, many people use it wrongly because it implements IDisposable and Microsoft’s own documentation shows poor usage of it. See the book links in the GitHub repository for articles with more discussion of this. Usually, when a type implements IDisposable, you should create it inside a using statement to ensure that it is disposed of as soon as possible. HttpClient is different because it is shared, reentrant, and partially thread-safe. The problem has to do with how the underlying network sockets must be managed. The bottom line is that you should use a single instance of it for each HTTP endpoint that you consume during the life of your application. This will allow each HttpClient instance to have defaults set that are appropriate for the endpoint it works with while managing the underlying network sockets efficiently. Configuring HTTP clients using HttpClientFactory Microsoft is aware of the issue of .NET developers misusing HttpClient, and in ASP.NET Core 2.1, it introduced HttpClientFactory to encourage best practices; that is the technique we will use. In the following example, we will use the Northwind MVC website that you created in the online-only MVC chapter as a client for the Northwind Web API service. Let’s configure an HTTP client: 