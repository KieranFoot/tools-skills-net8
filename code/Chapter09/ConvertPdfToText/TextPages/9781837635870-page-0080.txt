Chapter 2 61 Although /* */ is mostly used for multiline comments, it is also useful for commenting in the middle of a statement, as shown in the following code: decimal totalPrice = subtotal /* for this item */ + salesTax; Good Practice: Well-designed code, including function signatures with well-named pa- rameters and class encapsulation, can be somewhat self-documenting. When you find yourself putting too many comments and explanations in your code, ask yourself: can I rewrite, aka refactor, this code to make it more understandable without long comments? Your code editor has commands to make it easier to add and remove comment characters, as shown in the following list: • Visual Studio 2022: Navigate to Edit | Advanced | Comment Selection or Uncomment Selection. • Visual Studio Code: Navigate to Edit | Toggle Line Comment or Toggle Block Comment. • JetBrains Rider: Navigate to Code | Comment with Line Comment or Comment with Block Comment. Good Practice: You comment code by adding descriptive text above or after code state- ments. You comment out code by adding comment characters before or around statements to make them inactive. Uncommenting means removing the comment characters. Blocks In English, we indicate a new paragraph by starting a new line. C# indicates a block of code with the use of curly brackets, { }. Blocks start with a declaration to indicate what is being defined. For example, a block can define the start and end of many language constructs, including namespaces, classes, methods, or statements like foreach. You will learn more about namespaces, classes, and methods later in this chapter and subsequent chapters, but to briefly introduce some of those concepts now: • A namespace contains types like classes to group them together. • A class contains the members of an object, including methods. • A method contains statements that implement an action that an object can take. 