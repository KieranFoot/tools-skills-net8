Managing NoSQL Data Using Azure Cosmos DB 148 }; WriteLine("Database Id: {0}, Status: {1}.", arg0: dbResponse.Database.Id, arg1: status); IndexingPolicy indexingPolicy = new() { IndexingMode = IndexingMode.Consistent, Automatic = true, // Items are indexed unless explicitly excluded. IncludedPaths = { new IncludedPath { Path = "/*" } } }; ContainerProperties containerProperties = new("Products", partitionKeyPath: "/productId") { IndexingPolicy = indexingPolicy }; ContainerResponse containerResponse = await dbResponse.Database .CreateContainerIfNotExistsAsync( containerProperties, throughput: 1000 /* RU/s */); status = dbResponse.StatusCode switch { HttpStatusCode.OK => "exists", HttpStatusCode.Created => "created", _ => "unknown", }; WriteLine("Container Id: {0}, Status: {1}.", arg0: containerResponse.Container.Id, arg1: status); Container container = containerResponse.Container; ContainerProperties properties = await container. ReadContainerAsync(); WriteLine($" PartitionKeyPath: {properties.PartitionKeyPath}"); WriteLine($" LastModified: {properties.LastModified}"); WriteLine(" IndexingPolicy.IndexingMode: {0}", arg0: properties.IndexingPolicy.IndexingMode); 