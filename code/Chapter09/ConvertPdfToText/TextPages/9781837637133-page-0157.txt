Building Entity Models for SQL Server Using EF Core 124 Writing unit tests for entity models A well-written unit test will have three parts: • Arrange: This part will declare and instantiate variables for input and output. • Act: This part will execute the unit that you are testing. In our case, that means calling the method that we want to test. • Assert: This part will make one or more assertions about the output. An assertion is a belief that, if not true, indicates a failed test. For example, when adding 2 and 2, we would expect the result to be 4. NorthwindContext and entity model classes: Now, we will write some unit tests for the 1. Rename the file UnitTest1.cs to NorthwindEntityModelsTests.cs and then open it. In Visual Studio Code, rename the class to NorthwindEntityModelsTests. (Visual Studio 2. prompts you to rename the class when you rename the file.) Modify the NorthwindEntityModelsTests class to import the Northwind.EntityModels name- 3. space and have some test methods for ensuring the context class can connect, ensuring the provider is SQL Server, and ensuring the first product is named Chai, as shown in the following code: using Northwind.EntityModels; namespace Northwind.Common.EntityModels.Tests { public class NorthwindEntityModelsTests { [Fact] public void CanConnectIsTrue() { using (NorthwindContext db = new()) // arrange { bool canConnect = db.Database.CanConnect(); // act Assert.True(canConnect); // assert } } [Fact] public void ProviderIsSqlServer() { using (NorthwindContext db = new()) { string? provider = db.Database.ProviderName; 