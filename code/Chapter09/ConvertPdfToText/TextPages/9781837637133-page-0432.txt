Chapter 9 399 3. In Program.cs, import common Polly namespaces to work with ASP.NET Core, as shown in the following code: using Polly; // To use AddTransientHttpErrorPolicy method. using Polly.Contrib.WaitAndRetry; // To use Backoff. using Polly.Extensions.Http; // To use HttpPolicyExtensions. using Polly.Retry; // To use AsyncRetryPolicy<T> 4. In Program.cs, before the statement to add an HTTP client to services, add statements to gen- erate five jittered and exponentially increasing time-span values, output them to the console, use them to define an asynchronous wait and retry policy, and then add the retry policy to the HTTP client factory, as highlighted in the following code: // Create five jittered delays, starting with about 1 second. IEnumerable<TimeSpan> delays = Backoff.DecorrelatedJitterBackoffV2( medianFirstRetryDelay: TimeSpan.FromSeconds(1), retryCount: 5); WriteLine("Jittered delays for Polly retries:"); foreach (TimeSpan item in delays) { WriteLine($" {item.TotalSeconds:N2} seconds."); } AsyncRetryPolicy<HttpResponseMessage> retryPolicy = HttpPolicyExtensions // Handle network failures, 408 and 5xx status codes. .HandleTransientHttpError().WaitAndRetryAsync(delays); builder.Services.AddHttpClient(name: "Northwind.WebApi.Service", configureClient: options => { options.BaseAddress = new("https://localhost:5091/"); options.DefaultRequestHeaders.Accept.Add( new MediaTypeWithQualityHeaderValue( "application/json", 1.0)); }) .AddPolicyHandler(retryPolicy); 5. If your database server is not running (for example, because you are hosting it in Docker, a virtual machine, or in the cloud), then make sure to start it. Northwind.WebApi.Service project, using the https profile without debugging. 6. Start the Northwind.WebApi.Client.Mvc project, using the https profile without debugging. 7. Start the 