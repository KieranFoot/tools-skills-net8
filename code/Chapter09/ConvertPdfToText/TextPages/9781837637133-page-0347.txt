Building and Securing Web Services Using Minimal APIs 314 // Learn more about configuring Swagger/OpenAPI at https://aka.ms/ aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen(); builder.Services.AddNorthwindContext(); var app = builder.Build(); // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) { app.UseSwagger(); app.UseSwaggerUI(); } app.UseHttpsRedirection(); 8. Add a new class file named WebApplication.Extensions.cs. Good Practice: Instead of cluttering your Program.cs file with hundreds of lines of code, define extension methods for the common types that are configured in minimal APIs, like WebApplication and IServiceCollection. 9. In WebApplication.Extensions.cs, import namespaces for controlling HTTP results, binding a parameter to a dependency service, and working with Northwind entity models, and then define an extension method for the WebApplication class to configure responses to all the HTTP GET requests documented in our API table, as shown in the following code: using Microsoft.AspNetCore.Http.HttpResults; // To use Results. using Microsoft.AspNetCore.Mvc; // To use [FromServices] and so on. using Northwind.EntityModels; // To use NorthwindContext, Product. namespace Packt.Extensions; public static class WebApplicationExtensions { public static WebApplication MapGets(this WebApplication app, int pageSize = 10) { app.MapGet("/", () => "Hello World!") .ExcludeFromDescription(); 