Implementing Interfaces and Inheriting Classes 346 "{0} was born on {1:dd/MM/yy} and hired on {2:dd/MM/yy}.", arg0: Name, arg1: Born, arg2: HireDate); } } 2. Run the PeopleApp project, view the result, and note that the first line of output is before the employees were hired; hence, it has a default date, as shown in the following output: John Jones was born on 28/07/90 and hired on 01/01/01. John Jones was hired on 2014-11-23. Your coding tool warns you that your method now hides the method from Person by drawing a squiggle under the method name, the PROBLEMS/Error List window includes more details, and the compiler will output a warning when you build and run the console application, as shown in Figure 6.4: Figure 6.4: Hidden method warning As the warning describes, you should hide this message by applying the new keyword to the method, indicating that you are deliberately replacing the old method, as highlighted in the following code: public new void WriteToConsole() Make this fix now. Understanding the this and base keywords There are two special C# keywords that can be used to refer to the current object instance or the base class that it inherits from: â€¢ this: Represents the current object instance. For example, in the Person class instance mem- bers (but not in static members), you could use the expression this.Born to access the Born field of the current object instance. You rarely need to use it, since the expression Born would also work. It is only when there is a local variable also named Born that you would need to use this.Born, to explicitly say you are referring to the field, not the local variable. 