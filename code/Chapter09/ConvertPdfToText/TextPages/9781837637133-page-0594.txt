Chapter 12 561 { public int? ProductId { get; set; } public decimal? OriginalUnitPrice { get; set; } public decimal? NewUnitPrice { get; set; } } 3. Add a new class file named Subscription.cs. Modify the contents to define a subscription to an event (aka a topic) named OnProductDiscounted 4. that a client can subscribe to, as shown in the following code: namespace Northwind.GraphQL.Service; public class Subscription { [Subscribe] [Topic] public ProductDiscount OnProductDiscounted( [EventMessage] ProductDiscount productDiscount) => productDiscount; } 5. In Mutation.cs, in the UpdateProductPriceAsync method, add statements to send a message over the topic whenever a product has its unit price reduced, as highlighted in the following code: public async Task<UpdateProductPayload> UpdateProductPriceAsync( UpdateProductPriceInput input, NorthwindContext db, ITopicEventSender eventSender) { Product? product = await db.Products.FindAsync(input.ProductId); int affectedRows = 0; if (product is not null) { if (input.UnitPrice < product.UnitPrice) { // If the product has been discounted, // send a message to subscribers. ProductDiscount productDiscount = new() { ProductId = input.ProductId, OriginalUnitPrice = product.UnitPrice, 