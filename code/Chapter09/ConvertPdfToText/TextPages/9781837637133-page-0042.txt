Chapter 1 9 Although the theory of microservices and serverless services has made them a fashionable choice over the past decade or so, monolithic services have recently had a resurgence in popularity as developers have found the reality of microservices does not always match the theory. You will learn how to build ASP.NET Core Web API and Minimal API web services that use HTTP as the underlying communication technology and follow the design principles of Roy Field’s REST architecture. You will also learn how to build services using web and other technologies that extend basic web APIs, including: • gRPC: For building highly efficient and performant microservices with support for almost any platform. • SignalR: For implementing real-time communications between components. GraphQL: For letting the client control what data is retrieved across multiple data sources. • Although GraphQL can use HTTP, it does not have to, and it does not follow the web design principles defined by Roy Field in his dissertation about REST APIs. • Azure Functions: For hosting serverless nanoservices in the cloud. OData: For easily wrapping EF Core and other data models as a web service. This is an on- • line-only section. Windows Communication Foundation In 2006, Microsoft released .NET Framework 3.0 with some major new frameworks, one of which was Windows Communication Foundation (WCF). It abstracted the business logic implementation of a service from the communication technology infrastructure so that you could easily switch to an alternative in the future or even have multiple mechanisms to communicate with the service. WCF heavily uses XML configuration to declaratively define endpoints, including their address, binding, and contract. This is known as the ABCs of WCF endpoints. Once you understand how to do this, WCF is a powerful yet flexible technology. Microsoft decided not to officially port WCF to modern .NET, but there is a community-owned OSS project named CoreWCF managed by the .NET Foundation. If you need to migrate an existing service from .NET Framework to modern .NET or build a client to a WCF service, then you can use CoreWCF. Be aware that it can never be a full port since parts of WCF are Windows-specific. Technologies like WCF allow for the building of distributed applications. A client application can make remote procedure calls (RPCs) to a server application. Instead of using a port of WCF to do this, we should use an alternative RPC technology like gRPC, which is covered in this book. More Information: You can learn more about CoreWCF in its GitHub repository found at the following link: https://github.com/CoreWCF/CoreWCF. You can read the announce- ment about client support for calling WCF or CoreWCF with System.ServiceModel 6.0 at the following link: https://devblogs.microsoft.com/dotnet/wcf-client-60-has- been-released/. 