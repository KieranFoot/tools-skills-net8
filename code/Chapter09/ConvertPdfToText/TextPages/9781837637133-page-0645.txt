Building Efficient Microservices Using gRPC 612 5. Start the Northwind.Grpc.Service project without debugging. Northwind.Grpc.Client.Mvc project. 6. Start the 7. On the home page, in the top navigation bar, click Products. 8. In the MVC website project command prompt or terminal, note the warning, which will be distinct from information messages as it is yellow-on-black by default, as shown in the fol- lowing output: warn: Northwind.Grpc.Client.Mvc.Interceptors.ClientLoggingInterceptor[0] Starting call. Type: Unary. Method: GetProductsMinimumPrice. 9. Close the browser and shut down the web servers. More Information: You might be thinking, “Interceptors sound a lot like ASP.NET Core middleware!” You can read a useful comparison at the following link: https://learn. microsoft.com/en-us/aspnet/core/grpc/interceptors#grpc-interceptors- versus-middleware. Exception and transient fault handling gRPC has built-in support to automatically retry failed calls, which is a good way to handle transient faults like temporary network disconnects and down or busy services. In the client, an RpcException could be thrown that includes details of the error. First, let’s add a transient fault to the gRPC service and see how the client handles it: 1. In the Northwind.Grpc.Service project, in the Services folder, in GreeterService.cs, modify the SayHello method to wait for one second and then, randomly, one in three times it should work but two in three times throw a service unavailable exception, as shown in the following code: public override async Task<HelloReply> SayHello( HelloRequest request, ServerCallContext context) { await Task.Delay(1000); if (Random.Shared.Next(1, 4) == 1) { return new HelloReply { Message = "Hello " + request.Name }; } else { 