Working with Data Using Entity Framework Core 566 EF Core 8 enables support for the lazy loading of entities that are not being tracked. Letâ€™s try an example: 1. In Program.Queries.cs, add a method to request a no tracking query for products, and when you enumerate the products, use lazy loading to fetch the related category name, as shown in the following code: private static void LazyLoadingWithNoTracking() { using NorthwindDb db = new(); SectionTitle("Lazy-loading with no tracking"); IQueryable<Product>? products = db.Products?.AsNoTracking(); if (products is null || !products.Any()) { Fail("No products found."); return; } foreach (Product p in products) { WriteLine("{0} is in category named {1}.", p.ProductName, p.Category.CategoryName); } } 2. In Program.cs, add a call to LazyLoadingWithNoTracking. You might want to comment out ConfigureConsole, which ensures you see the same currency any other method calls except and other formatting as shown in the book. 3. Run the code and note that it works without throwing an exception as it would have done with previous versions of EF Core. If you want to see the runtime exception for yourself, in the project file, change the ver- sion numbers of the three EF Core packages from 8.0.0 to any older package version, like 7.0.0 or 6.0.0. Summary of tracking Which should you choose? Of course, it depends on your specific scenarios. 