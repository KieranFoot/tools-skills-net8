Chapter 11 597 3. In Program.cs, comment out the call to FilteringByType, and then add a call to the WorkingWithSets method, as shown in the following code: // FilteringByType(); WorkingWithSets(); 4. Run the code and view the results, as shown in the following output: Cohort 1 Rachel, Gareth, Jonathan, George Cohort 2 Jack, Stephen, Daniel, Jack, Jared Cohort 3 Declan, Jack, Jack, Jasmine, Conor cohort2.Distinct() Jack, Stephen, Daniel, Jared cohort2.DistinctBy(name => name.Substring(0, 2)): Jack, Stephen, Daniel cohort2.Union(cohort3) Jack, Stephen, Daniel, Jared, Declan, Jasmine, Conor cohort2.Concat(cohort3) Jack, Stephen, Daniel, Jack, Jared, Declan, Jack, Jack, Jasmine, Conor cohort2.Intersect(cohort3) Jack cohort2.Except(cohort3) Stephen, Daniel, Jared cohort1.Zip(cohort2) Rachel matched with Jack, Gareth matched with Stephen, Jonathan matched with Daniel, George matched with Jack With Zip, if there are unequal numbers of items in the two sequences, then some items will not have a matching partner. Those without a partner, like Jared, will not be included in the result. For the DistinctBy example, instead of removing duplicates by comparing the whole name, we define a lambda key selector to remove duplicates by comparing the first two characters, so Jared is removed because Jack already is a name that starts with Ja. So far, we have used the LINQ to Objects provider to work with in-memory objects. Next, we will use the LINQ to Entities provider to work with entities stored in a database. 