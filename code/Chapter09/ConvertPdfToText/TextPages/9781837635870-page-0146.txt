Chapter 3 127 else WriteLine("Your password is strong."); This style of if statement should be avoided because it can introduce serious bugs. An infamous exam- ple is the #gotofail bug in Apple’s iPhone iOS operating system. For 18 months after Apple’s iOS 6 was released, in September 2012, it had a bug due to an if statement without braces in its Secure Sockets Layer (SSL) encryption code. This meant that any user running Safari, the device’s web browser, who tried to connect to secure websites, such as their bank, was not properly secure because an important check was being accidentally skipped. Just because you can leave out the curly braces, doesn’t mean you should. Your code is not “more effi- cient” without them; instead, it is harder to read, less maintainable, and potentially more dangerous. Pattern matching with the if statement A feature introduced with C# 7 and later is pattern matching. The if statement can use the is keyword in combination with declaring a local variable to make your code safer: 1. Add statements so that if the value stored in the variable named o is an int, then the value is assigned to the local variable named i, which can then be used inside the if statement. This is safer than using the variable named o because we know for sure that i is an int variable and not something else, as shown in the following code: // Add and remove the "" to change between string and int. object o = "3"; int j = 4; if (o is int i) { WriteLine($"{i} x {j} = {i * j}"); } else { WriteLine("o is not an int so it cannot multiply!"); } 2. Run the code and view the results, as shown in the following output: o is not an int so it cannot multiply! 3. Delete the double-quote characters around the "3" value so that the value stored in the variable named o is an int type instead of a string type. 4. Rerun the code to view the results, as shown in the following output: 3 x 4 = 12 