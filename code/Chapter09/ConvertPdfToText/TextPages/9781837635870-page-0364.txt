Chapter 6 345 john.WriteToConsole(); 4. Run the PeopleApp project and view the result, as shown in the following output: John Jones was born on a Saturday. Note that the Employee class has inherited all the members of Person. Extending classes to add functionality Now, we will add some employee-specific members to extend the class: 1. In Employee.cs, add statements to define two properties, for an employee code and the date they were hired (we do not need to know a start time, so we can use the DateOnly type), as shown in the following code: public string? EmployeeCode { get; set; } public DateOnly HireDate { get; set; } 2. In Program.cs, add statements to set John’s employee code and hire date, as shown in the following code: john.EmployeeCode = "JJ001"; john.HireDate = new(year: 2014, month: 11, day: 23); WriteLine($"{john.Name} was hired on {john.HireDate:yyyy-MM-dd}."); 3. Run the PeopleApp project and view the result, as shown in the following output: John Jones was hired on 2014-11-23. Hiding members So far, the WriteToConsole method is inherited from Person, and it only outputs the employee’s name and date and time of birth. We might want to change what this method does for an employee: 1. In Employee.cs, add statements to redefine the WriteToConsole method, as highlighted in the following code: namespace Packt.Shared; public class Employee : Person { public string? EmployeeCode { get; set; } public DateOnly HireDate { get; set; } public void WriteToConsole() { WriteLine(format: 