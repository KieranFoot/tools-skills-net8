Chapter 11 591 Targeting a lambda expression We can simplify our code even further using a lambda expression in place of a named method. Although it can look complicated at first, a lambda expression is simply a nameless function. It uses the => (read as “goes to”) symbol to indicate the return value: 1. Comment out the second query, and then add a third version of the query that uses a lambda expression, as shown in the following code: // Using a lambda expression instead of a named method. var query = names.Where(name => name.Length > 4); Note that the syntax for a lambda expression includes all the important parts of the NameLongerThanFour method, but nothing more. A lambda expression only needs to define the following: • The names of input parameters: name • A return value expression: name.Length > 4 The type of the name input parameter is inferred from the fact that the sequence contains string values, and the return type must be a bool value, as defined by the delegate, for Where to work, so the expression after the => symbol must return a bool value. The compiler does most of the work for us, so our code can be as concise as possible. 2. Run the code and note that it has the same behavior. Lambda expressions with default parameter values Introduced with C# 12, you can now provide default values for parameters in lambda expressions, as shown in the following code: var query = names.Where((string name = "Bob") => name.Length > 4); For what we are using this lambda expression for, setting a default value is not necessary, but later you will see more useful examples. Sorting and more Other commonly used extension methods are OrderBy and ThenBy, used for sorting a sequence. Sorting by a single property using OrderBy Extension methods can be chained if the previous method returns another sequence, that is, a type that implements the IEnumerable<T> interface. 