Building and Consuming Web Services 716 BadRequest Returns a 400 status code and an optional message string with more details. Returns an e status code and automatically populates the ProblemDetails body NotFound (requires a compatibility version of 2.2 or later). Table 14.4: ControllerBase helper methods that return a response Configuring the customer repository and Web API controller Now that you’ve learned enough theory, you will put it into practice to configure the repository so that it can be called from within a Web API controller. You will register a scoped dependency service implementation for the repository when the web ser- vice starts up, and then use constructor parameter injection to get it in a new Web API controller for working with customers. It will have five action methods to perform CRUD operations on customers—two GET methods (for all customers or one customer), POST (create), PUT (update), and DELETE. To show an example of differentiating between MVC and Web API controllers using routes, we will use the common /api URL prefix convention for the customer controller: 1. In Program.cs, import the namespace for working with our customer repository, as shown in the following code: using Northwind.WebApi.Repositories; // To use ICustomerRepository. 2. In Program.cs, add a statement before the call to the Build method, which will register the CustomerRepository for use at runtime as a scoped dependency, as shown in the following code: builder.Services.AddScoped<ICustomerRepository, CustomerRepository>(); Good Practice: Our repository uses a database context that is registered as a scoped dependency. You can only use scoped dependencies inside other scoped depen- dencies, so we cannot register the repository as a singleton. You can read more about this at the following link: https://learn.microsoft.com/en-us/dotnet/ core/extensions/dependency-injection#scoped. 3. In the Controllers folder, add a new class named CustomersController.cs. If you are using Visual Studio 2022, then you can choose the MVC Controller - Empty project item template. In CustomersController.cs, add statements to define a Web API controller class to work with 4. customers, as shown in the following code: // To use [Route], [ApiController], ControllerBase and so on. using Microsoft.AspNetCore.Mvc; using Northwind.EntityModels; // To use Customer. using Northwind.WebApi.Repositories; // To use ICustomerRepository. namespace Northwind.WebApi.Controllers; 