Chapter 11 619 { // We must order data before skipping and taking to ensure // the data is not randomly sorted in each page. var pagingQuery = products.OrderBy(p => p.ProductId) .Skip(currentPage * pageSize).Take(pageSize); Clear(); // Clear the console/screen. SectionTitle(pagingQuery.ToQueryString()); OutputTableOfProducts(pagingQuery.ToArray(), currentPage, totalPages); } Why order when paging? The EF Core team gave a good example at the following link: https://devblogs.microsoft.com/dotnet/announcing-ef7-preview7- entity-framework/#linq-expression-tree-interception. I also cover order- ing when paging in the companion book Apps and Services with .NET 8. 3. In Program.Functions.cs, add a method to loop while the user presses either the left or right arrow to page through the products in the database, showing one page at a time, as shown in the following code: private static void PagingProducts() { SectionTitle("Paging products"); using NorthwindDb db = new(); int pageSize = 10; int currentPage = 0; int productCount = db.Products.Count(); int totalPages = productCount / pageSize; while (true) // Use break to escape this infinite loop. { OutputPageOfProducts(db.Products, pageSize, currentPage, totalPages); Write("Press <- to page back, press -> to page forward, any key to exit."); ConsoleKey key = ReadKey().Key; if (key == ConsoleKey.LeftArrow) 