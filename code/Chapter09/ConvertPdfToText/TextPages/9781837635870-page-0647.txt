Introducing Web Development Using ASP.NET Core 628 Microsoft ASP.NET Core is part of a history of Microsoft technologies used to build websites and ser- vices that have evolved over the years: • Active Server Pages (ASP) was released in 1996 and was Microsoft’s first attempt at a platform for dynamic server-side execution of website code. ASP files contain a mix of HTML and code that execute on the server written in the VBScript language. ASP.NET Web Forms was released in 2002 with the .NET Framework and was designed to enable • non-web developers, such as those familiar with Visual Basic, to quickly create websites by dragging and dropping visual components and writing event-driven code in Visual Basic or C#. Web Forms should be avoided for new .NET Framework web projects in favor of ASP.NET MVC. • Windows Communication Foundation (WCF) was released in 2006 and enables developers to build SOAP and REST services. SOAP is powerful but complex, so it should be avoided unless you need advanced features, such as distributed transactions and complex messaging topologies. • ASP.NET MVC was released in 2009 to cleanly separate the concerns of web developers between the models, which temporarily store the data; the views, which present the data using various formats in the UI; and the controllers, which fetch the model and pass it to a view. This sepa- ration enables improved reuse and unit testing. • ASP.NET Web API was released in 2012 and enables developers to create HTTP services (aka REST services) that are simpler and more scalable than SOAP services. • ASP.NET SignalR was released in 2013 and enables real-time communication for websites by abstracting underlying technologies and techniques, such as WebSockets and long polling. This enables website features such as live chat or updates to time-sensitive data such as stock prices across a wide variety of web browsers, even when they do not support an underlying technology such as WebSockets. • ASP.NET Core was released in 2016 and combines modern implementations of .NET Frame- work technologies such as MVC, Web API, and SignalR with newer technologies such as Razor Pages, gRPC, and Blazor, all running on modern .NET. Therefore, it can execute cross-platform. ASP.NET Core has many project templates to get you started with its supported technologies. Good Practice: Choose ASP.NET Core to develop websites and web services because it includes web-related technologies that are modern and cross-platform. Classic ASP.NET versus modern ASP.NET Core Until modern .NET, ASP.NET was built on top of a large assembly in .NET Framework named System. and it was tightly coupled to Microsoft’s Windows-only web server named Internet Informa- Web.dll tion Services (IIS). Over the years, this assembly has accumulated a lot of features, many of which are not suitable for modern cross-platform development. ASP.NET Core is a major redesign of ASP.NET. It removes the dependency on the System.Web.dll assembly and IIS and is composed of modular lightweight packages, just like the rest of modern .NET. Using IIS as the web server is still supported by ASP.NET Core, but there is a better option. 