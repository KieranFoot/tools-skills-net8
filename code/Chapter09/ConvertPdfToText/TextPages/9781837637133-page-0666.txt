Chapter 14 633 }; } <div>Your order for @order.Quantity of @order.Product has a total cost of $@ order.Price * @order.Quantity</div> The preceding Razor file would result in the following incorrect output: Your order for 3 of Sushi has a total cost of $8.49 * 3 Although Razor markup can include the value of any single property using the @object.property syntax, you should wrap expressions in parentheses, as shown in the following markup: <div>Your order for @order.Quantity of @order.Product has a total cost of $@ (order.Price * order.Quantity)</div> The preceding Razor expression results in the following correct output: Your order for 3 of Sushi has a total cost of $25.47 Understanding HTML Helper methods When creating a view for ASP.NET Core MVC, you can use the Html object and its methods to generate markup. When Microsoft first introduced ASP.NET MVC in 2009, these HTML Helper methods were the way to programmatically render HTML. Modern ASP.NET Core retains these HTML Helper methods for backward compatibility and provides Tag Helpers, which are usually easier to read and write in most scenarios. But there are notable situ- ations where Tag Helpers cannot be used, like in Razor components. You will learn about Tag Helpers later in this chapter. Some useful Html object methods include the following: • ActionLink: Use this to generate an anchor <a> element that contains a URL path to the specified controller and action. For example, Html.ActionLink(linkText: "Binding", actionName: "ModelBinding", controllerName: "Home") would generate <a href="/home/ modelbinding">Binding</a>. AntiForgeryToken: Use this inside a <form> to insert a <hidden> element containing an an- • ti-forgery token that can be validated when the form is submitted. Display and DisplayFor: Use this to generate HTML markup for the expression relative to the • current model using a display template. There are built-in display templates for .NET types and custom templates can be created in the DisplayTemplates folder. The folder name is case-sensitive on case-sensitive filesystems. DisplayForModel: Use this to generate HTML markup for an entire model instead of a single • expression. 