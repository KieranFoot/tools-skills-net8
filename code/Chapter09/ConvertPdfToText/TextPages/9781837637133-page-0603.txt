Building Efficient Microservices Using gRPC 570 int32 page = 3; int32 page_size = 4; } message SearchResponse { /* Message types can be nested and/or repeated to create the equivalent of collections or arrays. */ repeated SearchResult results = 1; } message SearchResult { string url = 1; string title = 2; repeated string authors = 3; } service Searcher { rpc PerformSearch (SearchRequest) returns (SearchResponse); } More Information: The Protobuf style guide recommends using all lowercase with un- derscores for field names, all uppercase with underscores for enum values, and so on. The C# tooling will automatically convert to .NET styles in the auto-generated types it creates for you. You can read more recommendations at the following link: https://protobuf. dev/programming-guides/style/. Fields must be given a unique number between 1 and 536,870,911. You cannot use the range 19,000 to 19,999 because they are reserved for the Protocol Buffers implementation. These numbers are used instead of the field name during serialization to save space in the binary format. Good Practice: Field numbers cannot be changed once you start using a message because they are tightly bound to the very efficient wire format used by gRPC. Changing a field number is the equivalent of deleting and creating a new field. You should also never reuse a field number. You can read about the consequences of misusing field numbers at the following link: https://protobuf.dev/programming-guides/proto3/#consequences. Field data types cannot be null, so all number types default to zero (0). Number and other field data types are shown in Table 13.1: 