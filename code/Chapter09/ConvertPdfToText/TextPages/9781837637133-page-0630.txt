Chapter 13 597 { _logger.LogCritical($"This request has a deadline of { context.Deadline:T}. It is now {DateTime.UtcNow:T}."); await Task.Delay(TimeSpan.FromSeconds(5)); ... } 2. In the Northwind.Grpc.Service project, in appsettings.Development.json, modify the log- ging level for ASP.NET Core from the default of Warning to Information, as shown highlighted in the following configuration: { "Logging": { "LogLevel": { "Default": "Information", "Microsoft.AspNetCore": "Information" } } } 3. In the Northwind.Grpc.Client.Mvc project, in the Controllers folder, in HomeController. , in the Index method, set a deadline of three seconds when calling the GetShipperAsync cs method, as shown highlighted in the following code: AsyncUnaryCall<ShipperReply> shipperCall = shipperClient.GetShipperAsync( new ShipperRequest { ShipperId = id }, // Deadline must be a UTC DateTime. deadline: DateTime.UtcNow.AddSeconds(3)); 4. In HomeController.cs, in the Index method, before the existing catch block, add a catch block for an RpcException when the exceptionâ€™s status code matches the code for deadline exceeded, as shown highlighted in the following code: catch (RpcException rpcex) when (rpcex.StatusCode == global::Grpc.Core.StatusCode.DeadlineExceeded) { _logger.LogWarning("Northwind.Grpc.Service deadline exceeded."); model.ErrorMessage = rpcex.Message; } catch (Exception ex) { _logger.LogWarning($"Northwind.Grpc.Service is not responding."); 