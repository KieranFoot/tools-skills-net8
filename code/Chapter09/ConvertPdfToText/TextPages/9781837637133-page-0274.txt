Chapter 6 241 RuleFor(order => order.CustomerLevel) .IsInEnum(); RuleFor(order => order.Total) .GreaterThan(0); RuleFor(order => order.ShipDate) .GreaterThan(order => order.OrderDate); When(order => order.CustomerLevel == CustomerLevel.Gold, () => { RuleFor(order => order.Total).LessThan(50M); RuleFor(order => order.Total).GreaterThanOrEqualTo(20M); }).Otherwise(() => { RuleFor(order => order.Total).LessThan(20M); }); } } Testing the validator Now we are ready to create a console app to test the validator on the model: 1. Use your preferred code editor to add a new Console App / console project named FluentValidation.Console to a Chapter06 solution. In the FluentValidation.Console project, treat warnings as errors, globally and statically im- 2. port the System.Console class, and add project references for FluentValidation.Validators and FluentValidation.Models, as shown in the following markup: <ItemGroup> <ProjectReference Include= "..\FluentValidation.Models\FluentValidation.Models.csproj" /> <ProjectReference Include= "..\FluentValidation.Validators\FluentValidation.Validators.csproj" /> </ItemGroup> 3. Build the FluentValidation.Console project to build referenced projects. In Program.cs, delete the existing statements, and then add statements to create an order and 4. validate it, as shown in the following code: using FluentValidation.Models; // To use Order. using FluentValidation.Results; // To use ValidationResult. 