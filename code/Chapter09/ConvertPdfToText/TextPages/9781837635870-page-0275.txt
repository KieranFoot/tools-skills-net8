Building Your Own Types with Object-Oriented Programming 256 arg0: blankPerson.Name, arg1: blankPerson.HomePlanet, arg2: blankPerson.Instantiated); 3. Run the PeopleApp project and view the result from both the code about the book as well as the blank person, as shown in the following output: 978-1803237800: C# 12 and .NET 8 - Modern Cross-Platform Development Fundamentals written by has 0 pages. Unknown of Earth was created at 11:58:12 on a Sunday Defining multiple constructors You can have multiple constructors in a type. This is especially useful to encourage developers to set initial values for fields: 1. In Person.cs, add statements to define a second constructor that allows a developer to set initial values for the person’s name and home planet, as shown in the following code: public Person(string initialName, string homePlanet) { Name = initialName; HomePlanet = homePlanet; Instantiated = DateTime.Now; } 2. In Program.cs, add statements to create another person using the constructor with two pa- rameters, as shown in the following code: Person gunny = new(initialName: "Gunny", homePlanet: "Mars"); WriteLine(format: "{0} of {1} was created at {2:hh:mm:ss} on a {2:dddd}.", arg0: gunny.Name, arg1: gunny.HomePlanet, arg2: gunny.Instantiated); 3. Run the PeopleApp project and view the result: Gunny of Mars was created at 11:59:25 on a Sunday Setting required fields with a constructor Now let’s return to the Book class example with its required fields: 1. In the PacktLibraryModern project, in Book.cs, add statements to define a pair of construc- tors, one that supports object initializer syntax and one to set the two required properties, as highlighted in the following code: 