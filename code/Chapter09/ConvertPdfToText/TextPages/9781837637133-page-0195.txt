Managing NoSQL Data Using Azure Cosmos DB 162 Delete id: 1, productName: Chai Status code: NoContent, Request charge: 14.29 RUs. ... Delete id: 77, productName: Original Frankfurter grüne Soße Status code: NoContent, Request charge: 14.48 RUs. Total requests charge: 1,128.87 RUs 18. In the Azure Cosmos DB Emulator or Azure portal Data Explorer, confirm that the Products container is empty. Understanding SQL queries The following keywords and more are available when writing SQL queries for Azure Cosmos DB: • SELECT to select from item properties. Supports * for all and TOP for limiting the results to the first specific number of items. AS to define aliases. • FROM to define the items to select from. Some of the previous queries used FROM c, where c • is an implied alias for the items in the container. Since a SQL query is executed within the context of a container like Products, you can use any alias you like, so FROM Items c or FROM would work equally well. p WHERE to define a filter. • LIKE to use pattern matching. % means zero, one, or more characters. _ means a single char- • [a-f] or [aeiou] means a single character within the defined range or set. [^aeiou] acter. means not in the range or set. IN, BETWEEN are range and set filters. • AND, OR, NOT for Boolean logic. • ORDER BY to sort the results. • DISTINCT to remove duplicates. • COUNT, AVG, SUM, and other aggregate functions. • To query the Products container using the Core (SQL) API, you might write the following code: SELECT p.id, p.productName, p.unitPrice FROM Items p Let’s try executing a SQL query against our product items: 1. In Program.cs, uncomment the call to (re)create the product items and modify the call to ListProductItems to pass a SQL query that filters the products to only show the products in the Beverages category and only their ID, name, and unit price, as shown in the following code: //await CreateCosmosResources(); await CreateProductItems(); await ListProductItems("SELECT p.id, p.productName, p.unitPrice FROM Items p WHERE p.category.categoryName = 'Beverages'"); //await DeleteProductItems(); 