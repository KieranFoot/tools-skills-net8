Chapter 5 251 3. In Program.cs, add statements to set the shared interest rate, and then create two instances of the BankAccount type, as shown in the following code: BankAccount.InterestRate = 0.012M; // Store a shared value in static field. BankAccount jonesAccount = new(); jonesAccount.AccountName = "Mrs. Jones"; jonesAccount.Balance = 2400; WriteLine(format: "{0} earned {1:C} interest.", arg0: jonesAccount.AccountName, arg1: jonesAccount.Balance * BankAccount.InterestRate); BankAccount gerrierAccount = new(); gerrierAccount.AccountName = "Ms. Gerrier"; gerrierAccount.Balance = 98; WriteLine(format: "{0} earned {1:C} interest.", arg0: gerrierAccount.AccountName, arg1: gerrierAccount.Balance * BankAccount.InterestRate); 4. Run the PeopleApp project and view the additional output: Mrs. Jones earned $28.80 interest. Ms. Gerrier earned $1.18 interest. Remember that C is a format code that tells .NET to use the current culture’s currency format for the decimal numbers. Fields are not the only members that can be static. Constructors, methods, properties, and other members can also be static. Making a field constant If the value of a field will never ever change, you can use the const keyword and assign a literal value at compile time. Any statement that changes the value will cause a compile-time error. Let’s see a simple example: 1. In Person.cs, add a string constant for the species of a person, as shown in the following code: // Constant fields: Values that are fixed at compilation. public const string Species = "Homo Sapiens"; 