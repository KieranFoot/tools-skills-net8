Caching, Queuing, and Resilient Background Services 386 • If the request has an Authorization header, then the response is not cached. If the request has a Vary header, then the response is not cached when the values are not • valid or *. The web server sets response caching headers, and then intermediate proxies and clients should respect the headers to tell them how they should cache the responses. Good Practice: Response aka HTTP caching is not typically useful for web user interfaces because web browsers often set request headers that prevent HTTP caching. For web user interfaces, output caching is better suited, and we will cover that in Chapter 14, Building Web User Interfaces Using ASP.NET Core. The Cache-Control HTTP header for requests and responses has some common directives, as shown in Table 9.2: Directive Description public Clients and intermediaries can cache this response. private Only a client should cache this response. max-age The client does not accept responses older than the specified number of seconds. no-cache A client request is asking for a non-cached response. A server is telling the client and intermediaries not the cache the response. no-store A cache must not store the request or response. Table 9.2: Common Cache-Control HTTP header directives As well as Cache-Control, there are other headers that might affect caching, as shown in Table 9.3: Header Description Age Estimated number of seconds old the response is. Expires An absolute date/time after which the response should be considered expired. Vary All fields must match for a cached response to be sent. Otherwise, a fresh response is sent. For example, a query string of color. Table 9.3: Common HTTP headers for caching For example, a client could ask for a fresh list of discontinued products, and the service should not use any cached version, as shown in the following HTTP response: GET api/products/discontinued Cache-Control: no-cache A service could return some products as a JSON array, with a header to say that intermediaries should not cache the response but clients can, as shown in the following HTTP response: content-type: application/json; charset=utf-8 