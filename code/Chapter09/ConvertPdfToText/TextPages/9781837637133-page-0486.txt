Chapter 10 453 The function will need to make HTTP GET requests so we should inject the HTTP client factory. To do that, we will need to add some extra package references and create a special startup class: 1. In the Northwind.AzureFunctions.Service project, add package references for working with Azure Functions extensions and timers, as shown in the following markup: <PackageReference Include="Microsoft.Azure.Functions.Extensions" Version="1.1.0" /> <PackageReference Version="4.2.0" Include="Microsoft.Azure.Functions.Worker.Extensions.Timer" /> 2. Build the Northwind.AzureFunctions.Service project to restore packages. Program.cs, import namespaces for working with dependency injection and HTTP media 3. In headers, as shown in the following code: using Microsoft.Extensions.DependencyInjection; // To use AddHttpClient(). using System.Net.Http.Headers; // To use MediaTypeWithQualityHeaderValue. 4. In Program.cs, add statements to configure a HTTP client factory for making requests to Amazon as if it was the Chrome browser as a dependency service, as shown highlighted in the following code: var host = new HostBuilder() .ConfigureFunctionsWorkerDefaults() .ConfigureServices(services => { services.AddHttpClient(name: "Amazon", configureClient: options => { options.BaseAddress = new Uri("https://www.amazon.com"); // Pretend to be Chrome with US English. options.DefaultRequestHeaders.Accept.Add( new MediaTypeWithQualityHeaderValue("text/html")); options.DefaultRequestHeaders.Accept.Add( new MediaTypeWithQualityHeaderValue("application/xhtml+xml")); options.DefaultRequestHeaders.Accept.Add( new MediaTypeWithQualityHeaderValue("application/xml", 0.9)); options.DefaultRequestHeaders.Accept.Add( new MediaTypeWithQualityHeaderValue("image/avif")); options.DefaultRequestHeaders.Accept.Add( new MediaTypeWithQualityHeaderValue("image/webp")); options.DefaultRequestHeaders.Accept.Add( 