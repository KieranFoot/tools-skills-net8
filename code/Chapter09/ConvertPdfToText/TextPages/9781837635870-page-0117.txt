Speaking C# 98 Before C# 10, string constants could only be combined by using concatenation with the + operator, as shown in the following code: private const string firstname = "Omar"; private const string lastname = "Rudberg"; private const string fullname = firstname + " " + lastname; With C# 10, interpolated strings (prefixed with $) can now be used, as shown in the following code: private const string fullname = $"{firstname} {lastname}"; This only works for combining string constant values. It cannot work with other types like numbers, which would require runtime data type conversions. You cannot enter private const declarations in a top-level program like Program.cs. You will see how to use them in Chapter 5, Building Your Own Types with Object-Oriented Programming. Good Practice: If you are writing code that will be part of a Unity project, then interpolated string formats is an easy way to avoid boxing. Understanding format strings A variable or expression can be formatted using a format string after a comma or colon. An N0 format string means a number with thousand separators and no decimal places, while a C format string means currency. The currency format will be determined by the current thread. For instance, if you run code that uses the number or currency format on a PC in the UK, youâ€™ll get pounds sterling with commas as the thousand separators, but if you run it on a PC in Germany, you will get euros with dots as the thousand separators. The full syntax of a format item is: { index [, alignment ] [ : formatString ] } Each format item can have an alignment, which is useful when outputting tables of values, some of which might need to be left- or right-aligned within a width of characters. Alignment values are inte- gers. Positive integers mean right-aligned and negative integers mean left-aligned. For example, to output a table of fruit and how many of each there are, we might want to left-align the names within a column of 10 characters and right-align the counts formatted as numbers with zero decimal places within a column of six characters: 1. At the bottom of Program.cs, enter the following statements: string applesText = "Apples"; int applesCount = 1234; string bananasText = "Bananas"; int bananasCount = 56789; 