Chapter 3 125 For example: int age = 50; WriteLine($"The {nameof(age)} variable uses {sizeof(int)} bytes of memory."); There are many other operators; for example, the dot between a variable and its members is called the member access operator and the round brackets at the end of a function or method name are called the invocation operator, as shown in the following code: int age = 50; // How many operators in the following statement? char firstDigit = age.ToString()[0]; // There are four operators: // = is the assignment operator // . is the member access operator // () is the invocation operator // [] is the indexer access operator Understanding selection statements Every application needs to be able to select from choices and branch along different code paths. The two selection statements in C# are if and switch. You can use if for all your code, but switch can simplify your code in some common scenarios, such as when there is a single variable that can have multiple values that each require different processing. Branching with the if statement The if statement determines which branch to follow by evaluating a Boolean expression. If the expres- sion is true, then the block executes. The else block is optional, and it executes if the if expression is false. The if statement can be nested. The if statement can be combined with other if statements as else if branches, as shown in the following code: if (expression1) { // Executes if expression1 is true. } else if (expression2) { // Executes if expression1 is false and expression2 is true. } else if (expression3) { 