Chapter 2 49 To comment out a block, use /* at the start and */ at the end, just like in C#. Declaring variables Local variable names are prefixed with @ and they are defined using SET, SELECT, or DECLARE, as shown in the following code: DECLARE @WholeNumber INT; -- Declare a variable and specify its type. SET @WholeNumber = 3; -- Set the variable to a literal value. SET @WholeNumber = @WholeNumber + 1; -- Increment the variable. SELECT @WholeNumber = COUNT(*) FROM Employees; -- Set to the number of employees. SELECT @WholeNumber = EmployeeId FROM Employees WHERE FirstName = 'Janet'; Global variables are prefixed with @@. For example, @@ROWCOUNT is a context-dependent value that returns the number of rows affected by a statement executed within the current scope, for example, the number of rows updated or deleted. Specifying data types Most types have a fixed size. For example, an int uses four bytes, a smallint uses two bytes, and a tinyint uses one byte. For text and binary types, you can either specify a type prefixed with var or nvar (meaning variable size), which will automatically change its size based on its current value up to a maximum, as shown in the following example: varchar(40); or you can specify a fixed number of characters that will always be allocated, as shown in the following example: char(40). For text types, the n prefix indicates Unicode, meaning it will use two bytes per character. Text types n use one byte per character. not prefixed with Controlling flow T-SQL has similar flow control keywords as C#, for example, BREAK, CONTINUE, GOTO, IF...ELSE, CASE, THROW, TRY...CATCH, WHILE, and RETURN. The main difference is the use of BEGIN and END to indicate the start and end of a block, the equivalent of curly braces in C#. Operators T-SQL has similar operators as C#, for example, = (assignment), +, -, *, /, %, <, >, <=, ==, !=, &, |, ^, and so on. It has logical operators like AND, OR, NOT, and LINQ-like operators like ANY, ALL, SOME, EXISTS, BETWEEN, and IN. LIKE is used for text pattern matching. The pattern can use % for any number of characters. The pattern can use _ for a single character. The pattern can use [] to specify a range and set of allowed characters, for example, [0-9A-Z.-,], which looks like a simplified regular expression syntax but keep in mind that it is not regular expression syntax. 