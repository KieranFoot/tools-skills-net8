Building Web User Interfaces Using ASP.NET Core 648 12. In the Controllers folder, in HomeController.cs, add an action method named Shipper. Give it a parameter to receive a shipper entity and then pass it to the view, as shown in the following code: public IActionResult Shipper(Shipper shipper) { return View(shipper); } This action method can respond to any method of request, for example, GET or POST. With a GET request, the shipper entity would be passed as query string key-value pairs. With a POST request, the shipper entity would be passed in the body. 13. In the Views/Home folder, add an empty Razor view named Shipper.cshtml. 14. Modify the contents, as shown in the following markup: @model Shipper @{ ViewData["Title"] = "Shippers"; } <h1>@ViewData["Title"]</h1> <div> <div class="mb-3"> <label for="shipperIdInput" class="form-label">Shipper Id</label> <input type="number" class="form-control" id="shipperIdInput" value="@Model.ShipperId"> </div> <div class="mb-3"> <label for="companyNameInput" class="form-label">Company Name</label> <input class="form-control" id="companyNameInput" value="@Model.CompanyName"> </div> <div class="mb-3"> <label for="phoneInput" class="form-label">Phone</label> <input class="form-control" id="phoneInput" value="@Model.Phone"> </div> </div> 15. In the Views/Home folder, in Privacy.cshtml, at the top of the file, add code and markup to inject the Northwind database context. Then, use it to define a Razor function to create a dictionary with string values for both the key and value populated from the shippers table, as shown highlighted in the following code: 