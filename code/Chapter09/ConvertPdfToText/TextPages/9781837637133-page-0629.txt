Building Efficient Microservices Using gRPC 596 6. Note the client successfully making POST requests to the gRPC Greeter and Shipper services and the red critical messages outputting the two entries in the gRPC metadata for the call to GetShipper, with keys of date and server, as shown in Figure 13.7: Figure 13.7: Logging metadata from a gRPC call 7. Close the browser and shut down the web servers. The trailers equivalent of the ResponseHeadersAsync property is the GetTrailers meth- od. It has a return value of Metadata that contains the dictionary of trailers. Trailers are accessible at the end of a call. Adding a deadline for higher reliability Setting a deadline for a gRPC call is recommended practice because it controls the upper limit of how long a gRPC call can run. It prevents gRPC services from potentially consuming too many server resources. The deadline information is sent to the service, so the service has an opportunity to give up its work once the deadline has passed instead of continuing forever. Even if the server completes its work within the deadline, the client may give up before the response arrives at the client because the deadline has passed due to the overhead of communication. Letâ€™s see an example: 1. In the Northwind.Grpc.Service project, in the Services folder, in ShipperService.cs, in the GetShipper method, add statements to log the deadline and to pause for five seconds, as shown highlighted in the following code: public override async Task<ShipperReply> GetShipper( ShipperRequest request, ServerCallContext context) 