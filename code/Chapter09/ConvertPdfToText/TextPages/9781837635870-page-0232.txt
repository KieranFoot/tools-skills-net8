Chapter 4 213 Trace says, I am watching! Trace error Trace warning If no --configuration argument is passed, the default trace switch level is Off (0), so none of the switch levels are output. Logging information about your source code When you write to a log, you will often want to include the name of the source code file, the name of the method, and the line number. In C# 10 and later, you can even get any expressions passed as an string value so you can log them. argument to a function as a You can get all this information from the compiler by decorating function parameters with special attributes, as shown in Table 4.2: Parameter example Description [CallerMemberName] string member = "" Sets the string parameter named member to the name of the method or property that is executing the method that defines this parameter. [CallerFilePath] string filepath = "" Sets the string parameter named filepath to the name of the source code file that contains the statement that is executing the method that defines this parameter. [CallerLineNumber] int line = 0 Sets the int parameter named line to the line number in the source code file of the statement that is executing the method that defines this parameter. [CallerArgumentExpression( Sets the string parameter named expression to the expression that has been passed to the nameof(argumentExpression))] parameter named argumentExpression. string expression = "" Table 4.2: Attributes to get information about the method caller You must make these parameters optional by assigning default values to them. Letâ€™s see some code in action: 1. In the Instrumenting project, add a class file named Program.Functions.cs. Delete any existing statements and then add statements to define a function named 2. LogSourceDetails that uses the four special attributes to log information about the calling code, as shown in the following code: using System.Diagnostics; // To use Trace. using System.Runtime.CompilerServices; // To use [CallerX] attributes 