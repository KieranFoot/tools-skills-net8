Chapter 3 157 When an exception is thrown, the thread is suspended and if the calling code has defined a try-catch statement, then it is given a chance to handle the exception. If the current method does not handle it, then its calling method is given a chance, and so on up the call stack. As you have seen, the default behavior of a console app is to output a message about the exception, including a stack trace, and then stop running the code. The application is terminated. This is better than allowing the code to continue executing in a potentially corrupt state. Your code should only catch and handle exceptions that it understands and can properly fix. Good Practice: Avoid writing code that will throw an exception whenever possible, perhaps by performing if statement checks. Sometimes you can’t, and sometimes it is best to allow the exception to be caught by a higher-level component that is calling your code. You will learn how to do this in Chapter 4, Writing, Debugging, and Testing Functions. Wrapping error-prone code in a try block When you know that a statement can cause an error, you should wrap that statement in a try block. For example, parsing from text to a number can cause an error. Any statements in the catch block will be executed only if an exception is thrown by a statement in the try block. We don’t have to do anything inside the catch block. Let’s see this in action: 1. Use your preferred coding tool to add a new Console App / console project named HandlingExceptions to the Chapter03 solution. Program.cs, delete any existing statements and then type statements to prompt the user to 2. In enter their age and then write their age to the console, as shown in the following code: WriteLine("Before parsing"); Write("What is your age? "); string? input = ReadLine(); try { int age = int.Parse(input); WriteLine($"You are {age} years old."); } catch { } WriteLine("After parsing"); You will see the following compiler message: Warning CS8604 Possible null reference argument . for parameter 's' in 'int int.Parse(string s)' 