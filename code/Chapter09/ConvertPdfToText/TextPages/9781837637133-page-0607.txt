Building Efficient Microservices Using gRPC 574 service Greeter { // Sends a greeting rpc SayHello (HelloRequest) returns (HelloReply); } // The request message containing the user's name. message HelloRequest { string name = 1; } // The response message containing the greetings. message HelloReply { string message = 1; } For working with .proto files in Visual Studio Code, you can install the extension vscode-proto3 (zxh404.vscode-proto3). For Rider, you can install the Protocol Buffers plugin from JetBrains, as shown at the following link: https://plugins. jetbrains.com/plugin/14004-protocol-buffers. 3. In Northwind.Grpc.Service.csproj, note that this project has native AOT publish enabled, the .proto file is registered for use on the server side, and the package reference for implementing a gRPC service hosted in ASP.NET Core, as shown highlighted in the following markup: <Project Sdk="Microsoft.NET.Sdk.Web"> <PropertyGroup> <TargetFramework>net8.0</TargetFramework> <Nullable>enable</Nullable> <ImplicitUsings>enable</ImplicitUsings> <InvariantGlobalization>true</InvariantGlobalization> <PublishAot>true</PublishAot> </PropertyGroup> <ItemGroup> <Protobuf Include="Protos\greet.proto" GrpcServices="Server" /> </ItemGroup> <ItemGroup> <PackageReference Include="Grpc.AspNetCore" Version="2.59.0" /> </ItemGroup> </Project> 